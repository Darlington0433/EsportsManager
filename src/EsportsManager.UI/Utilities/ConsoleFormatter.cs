using System;
using EsportsManager.BL.Constants;

namespace EsportsManager.UI.Utilities;

/// <summary>
/// ConsoleFormatter - Utility class ƒë·ªÉ format v√† t√πy ch·ªânh console window
/// </summary>
public static class ConsoleFormatter
{
    /// <summary>
    /// K√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh cho console window
    /// </summary>
    public static class WindowSize
    {
        public static int Width => AppConstants.UI.CONSOLE_WIDTH;
        public static int Height => AppConstants.UI.CONSOLE_HEIGHT;
        public static int BufferHeight => AppConstants.UI.CONSOLE_BUFFER;
    }
    
    /// <summary>
    /// Theme m√†u s·∫Øc cho console
    /// </summary>
    public static class Theme
    {
        /// <summary>
        /// M√†u n·ªÅn m·∫∑c ƒë·ªãnh
        /// </summary>
        public static readonly ConsoleColor Background = ConsoleColor.Black;

        /// <summary>
        /// M√†u ch·ªØ ch√≠nh
        /// </summary>
        public static readonly ConsoleColor Primary = ConsoleColor.White;

        /// <summary>
        /// M√†u ch·ªØ ph·ª•
        /// </summary>
        public static readonly ConsoleColor Secondary = ConsoleColor.Gray;

        /// <summary>
        /// M√†u nh·∫•n m·∫°nh
        /// </summary>
        public static readonly ConsoleColor Accent = ConsoleColor.Cyan;

        /// <summary>
        /// M√†u th√¥ng b√°o th√†nh c√¥ng
        /// </summary>
        public static readonly ConsoleColor Success = ConsoleColor.Green;

        /// <summary>
        /// M√†u c·∫£nh b√°o
        /// </summary>
        public static readonly ConsoleColor Warning = ConsoleColor.Yellow;

        /// <summary>
        /// M√†u l·ªói
        /// </summary>
        public static readonly ConsoleColor Error = ConsoleColor.Red;

        /// <summary>
        /// M√†u th√¥ng tin
        /// </summary>
        public static readonly ConsoleColor Info = ConsoleColor.Blue;
    }

    /// <summary>
    /// Kh·ªüi t·∫°o console window v·ªõi k√≠ch th∆∞·ªõc v√† m√†u s·∫Øc m·∫∑c ƒë·ªãnh
    /// </summary>
    public static void InitializeConsole()
    {
        try
        {
            Console.SetWindowSize(WindowSize.Width, WindowSize.Height);
            Console.SetBufferSize(WindowSize.Width, WindowSize.BufferHeight);
            Console.BackgroundColor = Theme.Background;
            Console.ForegroundColor = Theme.Primary;
            Console.Clear();
        }
        catch (Exception)
        {
            // Ignore errors when running in environments that don't support window size changes
        }
    }

    /// <summary>
    /// Reset m√†u console v·ªÅ m·∫∑c ƒë·ªãnh
    /// </summary>
    public static void ResetColors()
    {
        Console.BackgroundColor = Theme.Background;
        Console.ForegroundColor = Theme.Primary;
    }

    /// <summary>
    /// Thi·∫øt l·∫≠p encoding UTF-8
    /// </summary>
    private static void SetEncoding()
    {
        Console.OutputEncoding = System.Text.Encoding.UTF8;
        Console.InputEncoding = System.Text.Encoding.UTF8;
    }
    
    /// <summary>
    /// Thi·∫øt l·∫≠p title cho console
    /// </summary>
    private static void SetTitle()
    {
        Console.Title = "üéÆ ESPORTS MANAGER - Professional Console Application v1.0";
    }
    
    /// <summary>
    /// Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc console
    /// </summary>
    private static void SetDimensions()
    {
        try
        {
            // Th·ª≠ thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc l√Ω t∆∞·ªüng
            Console.SetBufferSize(AppConstants.UI.CONSOLE_WIDTH, AppConstants.UI.CONSOLE_BUFFER);
            Console.SetWindowSize(AppConstants.UI.CONSOLE_WIDTH, AppConstants.UI.CONSOLE_HEIGHT);
        }
        catch (ArgumentOutOfRangeException)
        {
            // Fallback v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n
            try
            {
                Console.SetBufferSize(100, 2000);
                Console.SetWindowSize(100, 25);
            }
            catch
            {
                // N·∫øu v·∫´n l·ªói th√¨ d√πng k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh
            }
        }
        catch (PlatformNotSupportedException)
        {
            // Platform kh√¥ng h·ªó tr·ª£ - b·ªè qua
        }
    }
    
    /// <summary>
    /// Thi·∫øt l·∫≠p m√†u s·∫Øc m·∫∑c ƒë·ªãnh
    /// </summary>
    private static void SetColors()
    {
        Console.BackgroundColor = Theme.Background;
        Console.ForegroundColor = Theme.Primary;
        Console.Clear();
    }
    
    /// <summary>
    /// K√≠ch ho·∫°t ch·∫ø ƒë·ªô full screen (Windows only)
    /// </summary>
    private static void EnableFullScreenMode()
    {
        try
        {
            // Ch·ªâ √°p d·ª•ng tr√™n Windows
            if (OperatingSystem.IsWindows())
            {
                // Maximzie console window
                ConsoleHelper.MaximizeConsoleWindow();
            }
        }
        catch
        {
            // B·ªè qua n·∫øu kh√¥ng th·ªÉ maximize
        }
    }
    
    /// <summary>
    /// Thi·∫øt l·∫≠p m√†u cho console
    /// </summary>
    public static void SetColor(ConsoleColor color)
    {
        Console.ForegroundColor = color;
    }
    
    /// <summary>
    /// T·∫°o separator line
    /// </summary>
    public static void DrawSeparator(char character = '‚ïê', int width = 100)
    {
        SetColor(Theme.Secondary);
        Console.WriteLine(new string(character, Math.Min(width, Console.WindowWidth - 1)));
        ResetColors();
    }
    
    /// <summary>
    /// Pause v·ªõi message ƒë·∫πp
    /// </summary>
    public static void PauseWithMessage(string message = "Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...")
    {
        SetColor(Theme.Warning);
        Console.Write($"\n{message}");
        ResetColors();
        Console.ReadKey(true);
    }
}

/// <summary>
/// Helper class cho c√°c thao t√°c Windows-specific
/// </summary>
internal static class ConsoleHelper
{
    [System.Runtime.InteropServices.DllImport("kernel32.dll")]
    private static extern IntPtr GetConsoleWindow();
    
    [System.Runtime.InteropServices.DllImport("user32.dll")]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    
    private const int SW_MAXIMIZE = 3;
    
    /// <summary>
    /// Maximize console window (Windows only)
    /// </summary>
    public static void MaximizeConsoleWindow()
    {
        try
        {
            IntPtr consoleWindow = GetConsoleWindow();
            if (consoleWindow != IntPtr.Zero)
            {
                ShowWindow(consoleWindow, SW_MAXIMIZE);
            }
        }
        catch
        {
            // Ignore if fails
        }
    }
}
