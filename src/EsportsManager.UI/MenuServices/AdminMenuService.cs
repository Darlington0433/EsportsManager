using System;
using EsportsManager.BL.Controllers;
using EsportsManager.BL.DTOs;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.MenuServices;

/// <summary>
/// AdminMenuService - X·ª≠ l√Ω UI menu cho Admin, delegate business logic cho AdminController
/// T√°ch bi·ªát UI concerns kh·ªèi business logic
/// </summary>
public class AdminMenuService
{
    private readonly AdminController _adminController;

    public AdminMenuService(AdminController adminController)
    {
        _adminController = adminController ?? throw new ArgumentNullException(nameof(adminController));
    }    /// <summary>
    /// Hi·ªÉn th·ªã menu ch√≠nh c·ªßa Admin
    /// </summary>
    public void ShowAdminMenu()
    {
        ShowMainMenu();
    }

    /// <summary>
    /// Hi·ªÉn th·ªã menu ch√≠nh c·ªßa Admin
    /// </summary>
    public void ShowMainMenu()
    {
        while (true)
        {
            var menuOptions = new[]
            {
                "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
                "üèÜ Qu·∫£n l√Ω gi·∫£i ƒë·∫•u/tr·∫≠n ƒë·∫•u", 
                "üìä Xem th·ªëng k√™ h·ªá th·ªëng",
                "üí∞ Xem b√°o c√°o donation",
                "üó≥Ô∏è Xem k·∫øt qu·∫£ voting",
                "üìù Qu·∫£n l√Ω feedback",
                "‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng",
                "üóëÔ∏è X√≥a ng∆∞·ªùi d√πng",
                "üö™ ƒêƒÉng xu·∫•t"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("ADMIN CONTROL PANEL", menuOptions);

            switch (selection)
            {
                case 0:
                    ShowUserManagementMenu();
                    break;
                case 1:
                    ShowTournamentManagementMenu();
                    break;
                case 2:
                    ShowSystemStatsMenu();
                    break;
                case 3:
                    ShowDonationReportsMenu();
                    break;
                case 4:
                    ShowVotingResultsMenu();
                    break;
                case 5:
                    ShowFeedbackManagementMenu();
                    break;
                case 6:
                    ShowSystemSettingsMenu();
                    break;
                case 7:
                    ShowUserDeletionMenu();
                    break;
                case 8:
                case -1:
                    return; // ƒêƒÉng xu·∫•t
            }
        }
    }

    /// <summary>
    /// Menu qu·∫£n l√Ω ng∆∞·ªùi d√πng
    /// </summary>
    private void ShowUserManagementMenu()
    {
        var userOptions = new[]
        {
            "üìã Xem danh s√°ch ng∆∞·ªùi d√πng",
            "üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng",
            "‚ö° Thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng",
            "üë§ Xem th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng",
            "üîë Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng",
            "‚¨ÖÔ∏è Quay l·∫°i"
        };

        while (true)
        {
            int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG", userOptions);
            
            switch (selection)
            {
                case 0:
                    ShowAllUsers();
                    break;
                case 1:
                    SearchUsers();
                    break;
                case 2:
                    ToggleUserStatus();
                    break;
                case 3:
                    ShowUserDetails();
                    break;
                case 4:
                    ResetUserPassword();
                    break;
                case 5:
                case -1:
                    return; // Quay l·∫°i menu ch√≠nh
            }
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
    /// </summary>
    private void ShowAllUsers()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...");
            
            var users = _adminController.GetAllUsersAsync().GetAwaiter().GetResult();
            
            Console.Clear();
            ConsoleRenderingService.DrawBorder("DANH S√ÅCH NG∆Ø·ªúI D√ôNG", 100, 20);
            
            if (users.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong h·ªá th·ªëng.", false, 2000);
                return;
            }            // Display users in a table format
            Console.WriteLine($"{"ID",-5} {"Username",-20} {"Email",-30} {"Role",-10} {"Status",-10}");
            Console.WriteLine(new string('=', 80));
            
            foreach (var user in users)
            {
                string status = "Active"; // TODO: Get actual status
                Console.WriteLine($"{user.Id,-5} {user.Username,-20} {user.Email,-30} {user.Role,-10} {status,-10}");
            }
            
            ConsoleRenderingService.PauseWithMessage("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// T√¨m ki·∫øm ng∆∞·ªùi d√πng
    /// </summary>
    private void SearchUsers()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T√åM KI·∫æM NG∆Ø·ªúI D√ôNG", 80, 10);
            
            Console.Write("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm (username ho·∫∑c email): ");
            string searchTerm = Console.ReadLine() ?? "";
            
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                ConsoleRenderingService.ShowMessageBox("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c r·ªóng!", true, 2000);
                return;
            }

            ConsoleRenderingService.ShowLoadingMessage("ƒêang t√¨m ki·∫øm...");
            
            var results = _adminController.SearchUsersAsync(searchTerm).GetAwaiter().GetResult();
            
            Console.Clear();
            if (results.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox($"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o v·ªõi t·ª´ kh√≥a: {searchTerm}", false, 2000);
            }
            else
            {                ConsoleRenderingService.DrawBorder($"K·∫æT QU·∫¢ T√åM KI·∫æM: {searchTerm}", 100, 15);
                // Display search results similar to ShowAllUsers
                foreach (var user in results)
                {
                    Console.WriteLine($"ID: {user.Id}, Username: {user.Username}, Email: {user.Email}, Role: {user.Role}");
                }
                ConsoleRenderingService.PauseWithMessage("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói t√¨m ki·∫øm: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng
    /// </summary>
    private void ToggleUserStatus()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("THAY ƒê·ªîI TR·∫†NG TH√ÅI NG∆Ø·ªúI D√ôNG", 80, 10);
            
            Console.Write("Nh·∫≠p User ID: ");
            if (int.TryParse(Console.ReadLine(), out int userId))
            {
                ConsoleRenderingService.ShowLoadingMessage("ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i...");
                
                bool success = _adminController.ToggleUserStatusAsync(userId).GetAwaiter().GetResult();
                
                if (success)
                {
                    ConsoleRenderingService.ShowMessageBox("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!", false, 2000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i!", true, 2000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("User ID kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng
    /// </summary>
    private void ResetUserPassword()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("RESET M·∫¨T KH·∫®U NG∆Ø·ªúI D√ôNG", 80, 10);
            
            Console.Write("Nh·∫≠p User ID: ");
            if (int.TryParse(Console.ReadLine(), out int userId))
            {
                ConsoleRenderingService.ShowLoadingMessage("ƒêang reset m·∫≠t kh·∫©u...");
                
                string newPassword = _adminController.ResetUserPasswordAsync(userId).GetAwaiter().GetResult();
                
                ConsoleRenderingService.ShowMessageBox($"Reset th√†nh c√¥ng! M·∫≠t kh·∫©u m·ªõi: {newPassword}", false, 5000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("User ID kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng
    /// </summary>
    private void ShowUserDetails()
    {
        ConsoleRenderingService.ShowMessageBox("Ch·ª©c nƒÉng xem chi ti·∫øt ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn", false, 2000);
    }

    /// <summary>
    /// Menu qu·∫£n l√Ω gi·∫£i ƒë·∫•u
    /// </summary>
    private void ShowTournamentManagementMenu()
    {
        ConsoleRenderingService.ShowMessageBox("Menu qu·∫£n l√Ω gi·∫£i ƒë·∫•u ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn", false, 2000);
    }

    /// <summary>
    /// Menu th·ªëng k√™ h·ªá th·ªëng
    /// </summary>
    private void ShowSystemStatsMenu()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i th·ªëng k√™ h·ªá th·ªëng...");
            
            var stats = _adminController.GetSystemStatsAsync().GetAwaiter().GetResult();
            
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä H·ªÜ TH·ªêNG", 80, 15);
            
            Console.WriteLine($"üìä T·ªïng s·ªë ng∆∞·ªùi d√πng: {stats.TotalUsers}");
            Console.WriteLine($"‚úÖ S·ªë ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông: {stats.ActiveUsers}");
            Console.WriteLine($"üèÜ T·ªïng s·ªë gi·∫£i ƒë·∫•u: {stats.TotalTournaments}");
            Console.WriteLine($"üî• S·ªë gi·∫£i ƒë·∫•u ƒëang di·ªÖn ra: {stats.ActiveTournaments}");
            Console.WriteLine($"üë• T·ªïng s·ªë team: {stats.TotalTeams}");
            Console.WriteLine($"üí∞ T·ªïng doanh thu: {stats.TotalRevenue:N0} VND");
            
            ConsoleRenderingService.PauseWithMessage("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i th·ªëng k√™: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Menu b√°o c√°o donation
    /// </summary>
    private void ShowDonationReportsMenu()
    {
        ConsoleRenderingService.ShowMessageBox("Ch·ª©c nƒÉng b√°o c√°o donation ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn", false, 2000);
    }

    /// <summary>
    /// Menu k·∫øt qu·∫£ voting
    /// </summary>
    private void ShowVotingResultsMenu()
    {
        ConsoleRenderingService.ShowMessageBox("Ch·ª©c nƒÉng xem k·∫øt qu·∫£ voting ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn", false, 2000);
    }

    /// <summary>
    /// Menu qu·∫£n l√Ω feedback
    /// </summary>
    private void ShowFeedbackManagementMenu()
    {
        ConsoleRenderingService.ShowMessageBox("Ch·ª©c nƒÉng qu·∫£n l√Ω feedback ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn", false, 2000);
    }

    /// <summary>
    /// Menu c√†i ƒë·∫∑t h·ªá th·ªëng
    /// </summary>
    private void ShowSystemSettingsMenu()
    {
        ConsoleRenderingService.ShowMessageBox("Ch·ª©c nƒÉng c√†i ƒë·∫∑t h·ªá th·ªëng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn", false, 2000);
    }

    /// <summary>
    /// Menu x√≥a ng∆∞·ªùi d√πng
    /// </summary>
    private void ShowUserDeletionMenu()
    {
        ConsoleRenderingService.ShowMessageBox("Ch·ª©c nƒÉng x√≥a ng∆∞·ªùi d√πng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn", false, 2000);
    }
}
