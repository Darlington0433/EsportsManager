using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EsportsManager.BL.Controllers;
using EsportsManager.BL.DTOs;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.MenuServices;

/// <summary>
/// AdminMenuService - X·ª≠ l√Ω UI menu cho Admin, delegate business logic cho AdminController
/// T√°ch bi·ªát UI concerns kh·ªèi business logic v·ªõi t·ªëi ∆∞u hi·ªáu su·∫•t
/// </summary>
public class AdminMenuService
{
    private readonly AdminController _adminController;
    
    // Caching ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
    private List<UserProfileDto>? _cachedUsers;
    private DateTime _lastUsersCacheTime = DateTime.MinValue;
    private readonly TimeSpan _cacheExpiration = TimeSpan.FromMinutes(5);

    public AdminMenuService(AdminController adminController)    {
        _adminController = adminController ?? throw new ArgumentNullException(nameof(adminController));
    }

    /// <summary>
    /// Hi·ªÉn th·ªã menu ch√≠nh c·ªßa Admin (synchronous wrapper for compatibility)
    /// </summary>
    public void ShowAdminMenu()
    {
        ShowAdminMenuAsync().GetAwaiter().GetResult();
    }

    /// <summary>
    /// Hi·ªÉn th·ªã menu ch√≠nh c·ªßa Admin
    /// </summary>
    public async Task ShowAdminMenuAsync()
    {
        await ShowMainMenuAsync();
    }

    /// <summary>
    /// Hi·ªÉn th·ªã menu ch√≠nh c·ªßa Admin
    /// </summary>
    public async Task ShowMainMenuAsync()
    {
        while (true)
        {
            var menuOptions = new[]
            {
                "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
                "üèÜ Qu·∫£n l√Ω gi·∫£i ƒë·∫•u/tr·∫≠n ƒë·∫•u", 
                "üìä Xem th·ªëng k√™ h·ªá th·ªëng",
                "üí∞ Xem b√°o c√°o donation",
                "üó≥Ô∏è Xem k·∫øt qu·∫£ voting",
                "üìù Qu·∫£n l√Ω feedback",
                "‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng",
                "üóëÔ∏è X√≥a ng∆∞·ªùi d√πng",
                "üö™ ƒêƒÉng xu·∫•t"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("ADMIN CONTROL PANEL", menuOptions);

            switch (selection)
            {
                case 0:
                    await ShowUserManagementMenuAsync();
                    break;
                case 1:
                    ShowTournamentManagementMenu();
                    break;
                case 2:
                    await ShowSystemStatsMenuAsync();
                    break;
                case 3:
                    ShowDonationReportsMenu();
                    break;
                case 4:
                    ShowVotingResultsMenu();
                    break;
                case 5:
                    ShowFeedbackManagementMenu();
                    break;
                case 6:
                    ShowSystemSettingsMenu();
                    break;
                case 7:
                    ShowUserDeletionMenu();
                    break;
                case 8:
                case -1:
                    return; // ƒêƒÉng xu·∫•t
            }
        }
    }/// <summary>
    /// Menu qu·∫£n l√Ω ng∆∞·ªùi d√πng
    /// </summary>
    private async Task ShowUserManagementMenuAsync()
    {
        var userOptions = new[]
        {
            "üìã Xem danh s√°ch ng∆∞·ªùi d√πng",
            "üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng",
            "‚ö° Thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng",
            "üë§ Xem th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng",
            "üîë Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng",
            "‚¨ÖÔ∏è Quay l·∫°i"
        };

        while (true)
        {
            int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG", userOptions);
            
            switch (selection)
            {
                case 0:
                    await ShowAllUsersAsync();
                    break;
                case 1:
                    await SearchUsersAsync();
                    break;
                case 2:
                    await ToggleUserStatusAsync();
                    break;
                case 3:
                    await ShowUserDetailsAsync();
                    break;
                case 4:
                    await ResetUserPasswordAsync();
                    break;
                case 5:
                case -1:
                    return; // Quay l·∫°i menu ch√≠nh
            }
        }
    }/// <summary>
    /// Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng v·ªõi ph√¢n trang
    /// </summary>
    private async Task ShowAllUsersAsync()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...");
            
            var users = await GetUsersWithCacheAsync();
            
            if (users.Count == 0)
            {
                Console.Clear();
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong h·ªá th·ªëng.", false, 2000);
                return;
            }

            await ShowUsersWithPaginationAsync(users);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }    /// <summary>
    /// Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang v√† khung bao quanh
    /// </summary>
    private async Task ShowUsersWithPaginationAsync(List<UserProfileDto> users)
    {
        const int usersPerPage = 8;  // S·ªë ng∆∞·ªùi d√πng m·ªói trang
        const int frameWidth = 100;  // Thu nh·ªè khung cho v·ª´a m√†n h√¨nh
        const int frameHeight = 16;  // Chi·ªÅu cao v·ª´a ph·∫£i
        
        int currentPage = 0;
        int totalPages = (int)Math.Ceiling((double)users.Count / usersPerPage);

        while (true)
        {
            Console.Clear();
            
            // T√≠nh v·ªã tr√≠ ƒë·ªÉ center khung
            int frameLeft = Math.Max(0, (Console.WindowWidth - frameWidth) / 2);
            int frameTop = Math.Max(0, (Console.WindowHeight - frameHeight) / 2);
            
            // V·∫Ω khung
            string title = $"DANH S√ÅCH NG∆Ø·ªúI D√ôNG - QU·∫¢N L√ù H·ªÜ TH·ªêNG";
            ConsoleRenderingService.DrawBorder(title, frameWidth, frameHeight);
              
            // V·ªã tr√≠ n·ªôi dung b√™n trong khung
            int contentLeft = frameLeft + 2;  // Margin nh·ªè h∆°n
            int contentTop = frameTop + 2;    // Margin nh·ªè h∆°n
            int contentWidth = frameWidth - 4;
            
            // Table Header ti·∫øng Vi·ªát - ESPORTS THEME (thu g·ªçn)
            Console.SetCursorPosition(contentLeft, contentTop);
            Console.ForegroundColor = ConsoleColor.Yellow; // Highlight header
            Console.Write($"{"ID",-4} {"T√™n Ng∆∞·ªùi D√πng",-16} {"Email",-22} {"Vai Tr√≤",-10} {"Tr·∫°ng Th√°i",-10} {"ƒê·ªôi",-12} {"Ng√†y TG",-10}");
            Console.ResetColor();
              
            // Separator line
            Console.SetCursorPosition(contentLeft, contentTop + 1);
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.Write(new string('‚îÄ', contentWidth - 5)); // Thu g·ªçn separator
            Console.ResetColor();
            
            // Data rows - ESPORTS DATA
            var pageUsers = users.Skip(currentPage * usersPerPage).Take(usersPerPage);
            int rowIndex = 0;
            
            foreach (var user in pageUsers)
            {
                Console.SetCursorPosition(contentLeft, contentTop + 2 + rowIndex);
                
                // D·ªØ li·ªáu Esports ti·∫øng Vi·ªát (thu g·ªçn)
                string trangThai = "Ho·∫°t ƒë·ªông";
                string doi = user.Role == "Admin" ? "N/A" : 
                            user.Role == "Player" ? $"Team{user.Id % 5 + 1}" : "Kh√°n gi·∫£";
                string ngayThamGia = DateTime.Now.AddDays(-(user.Id * 30)).ToString("dd/MM/yy"); // Format ng·∫Øn
                
                // Format text v·ª´a v·ªõi c·ªôt (thu g·ªçn)
                string tenNguoiDung = user.Username?.Length > 14 ? user.Username.Substring(0, 13) + "‚Ä¶" : user.Username ?? "";
                string emailRutGon = user.Email?.Length > 20 ? user.Email.Substring(0, 19) + "‚Ä¶" : user.Email ?? "";
                string vaiTro = user.Role == "Admin" ? "Qu·∫£n tr·ªã" : user.Role == "Player" ? "Tuy·ªÉn th·ªß" : "Kh√°n gi·∫£";
                
                // M√†u s·∫Øc theo vai tr√≤
                if (user.Role == "Admin")
                    Console.ForegroundColor = ConsoleColor.Red;
                else if (user.Role == "Player")
                    Console.ForegroundColor = ConsoleColor.Green;
                else
                    Console.ForegroundColor = ConsoleColor.White;
                
                Console.Write($"{user.Id,-4} {tenNguoiDung,-16} {emailRutGon,-22} {vaiTro,-10} {trangThai,-10} {doi,-12} {ngayThamGia,-10}");
                Console.ResetColor();
                rowIndex++;
            }
            
            // Pagination info ·ªü cu·ªëi gi·ªëng m·∫´u
            Console.SetCursorPosition(contentLeft + contentWidth/2 - 10, frameTop + frameHeight - 5);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write($"‚óè [{currentPage + 1}/{totalPages}] ‚óè");
            Console.ResetColor();
            
            // Instructions ti·∫øng Vi·ªát - ESPORTS THEME (thu g·ªçn)
            Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write("‚óè Nh·∫•n 'M≈®I T√äN TR√ÅI/PH·∫¢I' ƒë·ªÉ chuy·ªÉn trang");
            Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
            Console.Write("‚óè 'F' t√¨m ki·∫øm, 'D' chi ti·∫øt, 'T' qu·∫£n l√Ω ƒê·ªôi, 'ESC' tho√°t");
            Console.ResetColor();
            
            // X·ª≠ l√Ω input gi·ªëng m·∫´u
            var key = Console.ReadKey(true);
            
            switch (key.Key)
            {
                case ConsoleKey.LeftArrow:
                    if (currentPage > 0) currentPage--;
                    break;
                    
                case ConsoleKey.RightArrow:
                    if (currentPage < totalPages - 1) currentPage++;
                    break;
                    
                case ConsoleKey.F:
                    await SearchUsersAsync();
                    return;
                    
                case ConsoleKey.D:
                    await ShowUserDetailsAsync();
                    break;
                
                case ConsoleKey.T:
                    // Qu·∫£n l√Ω Team - Esports context
                    await ShowTeamManagementMenuAsync();
                    break;
                    
                case ConsoleKey.R:
                    // Refresh data
                    try
                    {
                        ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i l·∫°i d·ªØ li·ªáu...");
                        users = await GetUsersWithCacheAsync(true);
                        totalPages = (int)Math.Ceiling((double)users.Count / usersPerPage);
                        if (currentPage >= totalPages) currentPage = Math.Max(0, totalPages - 1);
                    }
                    catch (Exception ex)
                    {
                        ConsoleRenderingService.ShowMessageBox($"L·ªói refresh: {ex.Message}", true, 2000);
                    }
                    break;
                    
                case ConsoleKey.Escape:
                    return;
            }
        }
    }    /// <summary>
    /// T√¨m ki·∫øm ng∆∞·ªùi d√πng v·ªõi giao di·ªán c·∫£i ti·∫øn
    /// </summary>
    private async Task SearchUsersAsync()
    {
        try
        {
            Console.Clear();
            
            const int frameWidth = 60;
            const int frameHeight = 8;
            
            // T√≠nh v·ªã tr√≠ khung TR∆Ø·ªöC KHI v·∫Ω
            int frameLeft = (Console.WindowWidth - frameWidth) / 2;
            int frameTop = (Console.WindowHeight - frameHeight) / 2;
            
            // T√≠nh v·ªã tr√≠ n·ªôi dung TR∆Ø·ªöC
            int contentLeft = frameLeft + 2;
            int contentTop = frameTop + 2;
            
            // V·∫Ω khung SAU KHI t√≠nh to√°n v·ªã tr√≠
            ConsoleRenderingService.DrawBorder("T√åM KI·∫æM NG∆Ø·ªúI D√ôNG", frameWidth, frameHeight);
              
            Console.SetCursorPosition(contentLeft, contentTop);
            Console.Write("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm (t√™n ng∆∞·ªùi d√πng ho·∫∑c email):");
            
            Console.SetCursorPosition(contentLeft, contentTop + 2);
            Console.Write("T·ª´ kh√≥a: ");
            string searchTerm = Console.ReadLine() ?? "";
            
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                ConsoleRenderingService.ShowMessageBox("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c r·ªóng!", true, 2000);
                return;
            }

            ConsoleRenderingService.ShowLoadingMessage("ƒêang t√¨m ki·∫øm...");
            
            var results = await _adminController.SearchUsersAsync(searchTerm);
            
            if (results.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox($"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o v·ªõi t·ª´ kh√≥a: '{searchTerm}'", false, 3000);
            }
            else
            {
                // S·ª≠ d·ª•ng l·∫°i h·ªá th·ªëng ph√¢n trang cho k·∫øt qu·∫£ t√¨m ki·∫øm
                await ShowSearchResultsWithPaginationAsync(results, searchTerm);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói t√¨m ki·∫øm: {ex.Message}", true, 3000);
        }
    }    /// <summary>
    /// Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm v·ªõi ph√¢n trang
    /// </summary>
    private async Task ShowSearchResultsWithPaginationAsync(List<UserProfileDto> searchResults, string searchTerm)
    {
        const int usersPerPage = 8;
        const int frameWidth = 100;  // C√πng k√≠ch th∆∞·ªõc v·ªõi main table
        const int frameHeight = 16;
        
        int currentPage = 0;
        int totalPages = (int)Math.Ceiling((double)searchResults.Count / usersPerPage);
        
        while (true)
        {
            Console.Clear();
            
            // T√≠nh v·ªã tr√≠ khung TR∆Ø·ªöC KHI v·∫Ω
            int frameLeft = (Console.WindowWidth - frameWidth) / 2;
            int frameTop = (Console.WindowHeight - frameHeight) / 2;
            
            // T√≠nh v·ªã tr√≠ n·ªôi dung b√™n trong khung TR∆Ø·ªöC
            int contentLeft = frameLeft + 2;
            int contentTop = frameTop + 2;
            int contentWidth = frameWidth - 4;
            
            // V·∫Ω khung v·ªõi ti√™u ƒë·ªÅ t√¨m ki·∫øm SAU KHI t√≠nh to√°n
            string shortSearchTerm = searchTerm.Length > 15 ? searchTerm.Substring(0, 12) + "..." : searchTerm;
            string title = $"K·∫æT QU·∫¢ T√åM KI·∫æM: '{shortSearchTerm}' - Trang {currentPage + 1}/{totalPages} ({searchResults.Count} k·∫øt qu·∫£)";
            ConsoleRenderingService.DrawBorder(title, frameWidth, frameHeight);
            
            // Header b·∫£ng t√¨m ki·∫øm ti·∫øng Vi·ªát (thu g·ªçn)
            Console.SetCursorPosition(contentLeft, contentTop);
            Console.Write($"{"ID",-4} {"T√™n Ng∆∞·ªùi D√πng",-16} {"Email",-22} {"Vai Tr√≤",-10} {"Tr·∫°ng Th√°i",-10} {"Kh·ªõp",-8}");
            
            Console.SetCursorPosition(contentLeft, contentTop + 1);
            Console.Write(new string('‚îÄ', contentWidth - 5));
            
            // L·∫•y users cho trang hi·ªán t·∫°i
            var pageResults = searchResults.Skip(currentPage * usersPerPage).Take(usersPerPage);
            
            int rowIndex = 0;
            foreach (var user in pageResults)
            {
                Console.SetCursorPosition(contentLeft, contentTop + 2 + rowIndex);
                
                string trangThai = "Ho·∫°t ƒë·ªông";
                
                // Lo·∫°i kh·ªõp ti·∫øng Vi·ªát
                string loaiKhop = "";
                if (user.Username?.ToLower().Contains(searchTerm.ToLower()) == true)
                    loaiKhop = "T√™n ng∆∞·ªùi d√πng";
                else if (user.Email?.ToLower().Contains(searchTerm.ToLower()) == true)
                    loaiKhop = "Email";
                else
                    loaiKhop = "Kh√°c";
                  
                // Format text (thu g·ªçn)
                string tenNguoiDung = user.Username?.Length > 14 ? user.Username.Substring(0, 13) + "‚Ä¶" : user.Username ?? "";
                string emailRutGon = user.Email?.Length > 20 ? user.Email.Substring(0, 19) + "‚Ä¶" : user.Email ?? "";
                string vaiTro = user.Role == "Admin" ? "Qu·∫£n tr·ªã" : user.Role == "Player" ? "Tuy·ªÉn th·ªß" : "Kh√°n gi·∫£";
                
                Console.Write($"{user.Id,-4} {tenNguoiDung,-16} {emailRutGon,-22} {vaiTro,-10} {trangThai,-10} {loaiKhop,-8}");
                rowIndex++;
            }
              
            // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ƒëi·ªÅu h∆∞·ªõng (thu g·ªçn)
            Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 4);
            Console.Write(new string('‚îÄ', contentWidth - 5));
            
            Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
            string navigation = "";
            if (totalPages > 1)
            {
                if (currentPage > 0) navigation += "[‚Üê Tr∆∞·ªõc] ";
                if (currentPage < totalPages - 1) navigation += "[Sau ‚Üí] ";
            }
            navigation += "[T]√¨m ki·∫øm m·ªõi [ESC] Quay l·∫°i";
            Console.Write(navigation);
            
            // X·ª≠ l√Ω input
            var key = Console.ReadKey(true);
            
            switch (key.Key)
            {
                case ConsoleKey.LeftArrow:
                case ConsoleKey.P:
                    if (currentPage > 0) currentPage--;
                    break;
                    
                case ConsoleKey.RightArrow:
                case ConsoleKey.PageDown:
                    if (currentPage < totalPages - 1) currentPage++;
                    break;
                      
                case ConsoleKey.T:
                    await SearchUsersAsync(); // T√¨m ki·∫øm m·ªõi
                    return;
                    
                case ConsoleKey.Escape:
                    return;
            }
        }
    }    /// <summary>
    /// Thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng
    /// </summary>
    private async Task ToggleUserStatusAsync()
    {
        try
        {
            Console.Clear();
            
            const int frameWidth = 70;
            const int frameHeight = 10;
            
            // T√≠nh v·ªã tr√≠ khung
            int frameLeft = (Console.WindowWidth - frameWidth) / 2;
            int frameTop = (Console.WindowHeight - frameHeight) / 2;
            
            // T√≠nh v·ªã tr√≠ n·ªôi dung
            int contentLeft = frameLeft + 3;
            int contentTop = frameTop + 3;
            
            // V·∫Ω khung
            ConsoleRenderingService.DrawBorder("THAY ƒê·ªîI TR·∫†NG TH√ÅI NG∆Ø·ªúI D√ôNG", frameWidth, frameHeight);
            
            Console.SetCursorPosition(contentLeft, contentTop);
            Console.Write("Nh·∫≠p User ID c·∫ßn thay ƒë·ªïi tr·∫°ng th√°i: ");
            
            Console.SetCursorPosition(contentLeft, contentTop + 2);
            Console.Write("User ID: ");
              string input = Console.ReadLine() ?? "";
            
            if (TryGetValidUserId(input, out int userId, out string errorMessage))
            {                try
                {
                    var result = await ExecuteWithTimeoutAsync(
                        _adminController.ToggleUserStatusAsync(userId),
                        "ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i...");
                    
                    if (result.Success)
                    {
                        ConsoleRenderingService.ShowMessageBox("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!", false, 2000);
                        
                        // Invalidate cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
                        InvalidateUserCache();
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i! C√≥ th·ªÉ user kh√¥ng t·ªìn t·∫°i.", true, 2000);
                    }
                }
                catch (TimeoutException ex)
                {
                    ConsoleRenderingService.ShowMessageBox($"Timeout: {ex.Message}", true, 3000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox(errorMessage, true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng
    /// </summary>
    private async Task ResetUserPasswordAsync()
    {
        try
        {
            Console.Clear();
            
            const int frameWidth = 70;
            const int frameHeight = 10;
            
            // T√≠nh v·ªã tr√≠ khung
            int frameLeft = (Console.WindowWidth - frameWidth) / 2;
            int frameTop = (Console.WindowHeight - frameHeight) / 2;
            
            // T√≠nh v·ªã tr√≠ n·ªôi dung
            int contentLeft = frameLeft + 3;
            int contentTop = frameTop + 3;
            
            // V·∫Ω khung
            ConsoleRenderingService.DrawBorder("RESET M·∫¨T KH·∫®U NG∆Ø·ªúI D√ôNG", frameWidth, frameHeight);
            
            Console.SetCursorPosition(contentLeft, contentTop);
            Console.Write("Nh·∫≠p User ID c·∫ßn reset m·∫≠t kh·∫©u: ");
            
            Console.SetCursorPosition(contentLeft, contentTop + 2);
            Console.Write("User ID: ");
              string input = Console.ReadLine() ?? "";
            
            if (TryGetValidUserId(input, out int userId, out string errorMessage))
            {                try
                {
                    var result = await ExecuteWithTimeoutAsync(
                        _adminController.ResetUserPasswordAsync(userId),
                        "ƒêang reset m·∫≠t kh·∫©u...");
                    
                    // Invalidate cache sau khi reset password
                    InvalidateUserCache();
                    
                    ConsoleRenderingService.ShowMessageBox($"Reset th√†nh c√¥ng! M·∫≠t kh·∫©u m·ªõi: {result.NewPassword}", false, 5000);
                }
                catch (TimeoutException ex)
                {
                    ConsoleRenderingService.ShowMessageBox($"Timeout: {ex.Message}", true, 3000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox(errorMessage, true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }/// <summary>
    /// Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng
    /// </summary>
    private async Task ShowUserDetailsAsync()
    {
        try
        {
            Console.Clear();
            
            const int frameWidth = 80;
            const int frameHeight = 12;
            
            // T√≠nh v·ªã tr√≠ khung
            int frameLeft = (Console.WindowWidth - frameWidth) / 2;
            int frameTop = (Console.WindowHeight - frameHeight) / 2;
            
            // T√≠nh v·ªã tr√≠ n·ªôi dung
            int contentLeft = frameLeft + 3;
            int contentTop = frameTop + 3;
            
            // V·∫Ω khung
            ConsoleRenderingService.DrawBorder("TH√îNG TIN CHI TI·∫æT NG∆Ø·ªúI D√ôNG", frameWidth, frameHeight);
            
            Console.SetCursorPosition(contentLeft, contentTop);
            Console.Write("Nh·∫≠p User ID c·∫ßn xem chi ti·∫øt: ");
            
            Console.SetCursorPosition(contentLeft, contentTop + 2);
            Console.Write("User ID: ");
              string input = Console.ReadLine() ?? "";
              if (TryGetValidUserId(input, out int userId, out string errorMessage))
            {
                try
                {                    // S·ª≠ d·ª•ng GetAllUsersAsync v√† t√¨m theo ID v√¨ GetUserByIdAsync ch∆∞a c√≥
                    var allUsersResult = await ExecuteWithTimeoutAsync(
                        _adminController.GetAllUsersAsync(),
                        "üîç ƒêang t·∫£i th√¥ng tin chi ti·∫øt...");
                    
                    var userDetails = allUsersResult.Items.FirstOrDefault(u => u.Id == userId);
                    
                    if (userDetails != null)
                    {
                        DisplayUserDetails(userDetails, contentLeft, contentTop);
                    }
                    else
                    {
                        Console.SetCursorPosition(contentLeft, contentTop + 4);
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID n√†y");
                        Console.ResetColor();
                    }
                }
                catch (TimeoutException ex)
                {
                    Console.SetCursorPosition(contentLeft, contentTop + 4);
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.Write($"‚è∞ Timeout: {ex.Message}");
                    Console.ResetColor();
                }
                catch (Exception ex)
                {
                    Console.SetCursorPosition(contentLeft, contentTop + 4);
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.Write($"‚ùå L·ªói: {ex.Message}");
                    Console.ResetColor();
                }
                
                Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
                Console.ForegroundColor = ConsoleColor.DarkGray;
                Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
                Console.ResetColor();
                
                Console.ReadKey(true);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox(errorMessage, true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }/// <summary>
    /// Menu qu·∫£n l√Ω gi·∫£i ƒë·∫•u
    /// </summary>
    private void ShowTournamentManagementMenu()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 10;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("QU·∫¢N L√ù GI·∫¢I ƒê·∫§U/TR·∫¨N ƒê·∫§U", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("üèÜ TOURNAMENT MANAGEMENT SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("C√°c t√≠nh nƒÉng s·∫Ω c√≥:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ T·∫°o v√† qu·∫£n l√Ω gi·∫£i ƒë·∫•u");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ L·∫≠p l·ªãch tr·∫≠n ƒë·∫•u");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ Qu·∫£n l√Ω k·∫øt qu·∫£");
        
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
        Console.ForegroundColor = ConsoleColor.DarkGray;
        Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
        Console.ResetColor();
        
        Console.ReadKey(true);
    }    /// <summary>
    /// Menu th·ªëng k√™ h·ªá th·ªëng
    /// </summary>
    private async Task ShowSystemStatsMenuAsync()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i th·ªëng k√™ h·ªá th·ªëng...");
            
            var stats = await _adminController.GetSystemStatsAsync();
            
            Console.Clear();
            
            const int frameWidth = 80;
            const int frameHeight = 15;
            
            // T√≠nh v·ªã tr√≠ khung
            int frameLeft = (Console.WindowWidth - frameWidth) / 2;
            int frameTop = (Console.WindowHeight - frameHeight) / 2;
            
            // T√≠nh v·ªã tr√≠ n·ªôi dung
            int contentLeft = frameLeft + 3;
            int contentTop = frameTop + 3;
            
            // V·∫Ω khung
            ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä H·ªÜ TH·ªêNG", frameWidth, frameHeight);
            
            // Hi·ªÉn th·ªã th·ªëng k√™ b√™n trong khung
            Console.SetCursorPosition(contentLeft, contentTop);
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write("üìä TH·ªêNG K√ä T·ªîNG QUAN H·ªÜ TH·ªêNG ESPORTS");
            Console.ResetColor();
            
            Console.SetCursorPosition(contentLeft, contentTop + 2);
            Console.Write($"ÔøΩ T·ªïng s·ªë ng∆∞·ªùi d√πng: ");
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write($"{stats.TotalUsers}");
            Console.ResetColor();
            
            Console.SetCursorPosition(contentLeft, contentTop + 3);
            Console.Write($"‚úÖ S·ªë ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông: ");
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write($"{stats.ActiveUsers}");
            Console.ResetColor();
            
            Console.SetCursorPosition(contentLeft, contentTop + 4);
            Console.Write($"üèÜ T·ªïng s·ªë gi·∫£i ƒë·∫•u: ");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write($"{stats.TotalTournaments}");
            Console.ResetColor();
            
            Console.SetCursorPosition(contentLeft, contentTop + 5);
            Console.Write($"üî• S·ªë gi·∫£i ƒë·∫•u ƒëang di·ªÖn ra: ");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write($"{stats.ActiveTournaments}");
            Console.ResetColor();
            
            Console.SetCursorPosition(contentLeft, contentTop + 6);
            Console.Write($"üë• T·ªïng s·ªë team: ");
            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.Write($"{stats.TotalTeams}");
            Console.ResetColor();
            
            Console.SetCursorPosition(contentLeft, contentTop + 7);
            Console.Write($"üí∞ T·ªïng doanh thu: ");
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write($"{stats.TotalRevenue:N0} VND");
            Console.ResetColor();
            
            // Instructions
            Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
            Console.ResetColor();
            
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i th·ªëng k√™: {ex.Message}", true, 3000);
        }
    }    /// <summary>
    /// Menu b√°o c√°o donation
    /// </summary>
    private void ShowDonationReportsMenu()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 10;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("B√ÅO C√ÅO DONATION", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("üí∞ DONATION REPORT SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("C√°c t√≠nh nƒÉng s·∫Ω c√≥:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ Theo d√µi donation cho Player/Team");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ B√°o c√°o doanh thu");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ Th·ªëng k√™ donation theo th·ªùi gian");
        
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
        Console.ForegroundColor = ConsoleColor.DarkGray;
        Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
        Console.ResetColor();
        
        Console.ReadKey(true);
    }    /// <summary>
    /// Menu k·∫øt qu·∫£ voting
    /// </summary>
    private void ShowVotingResultsMenu()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 10;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("K·∫æT QU·∫¢ VOTING", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("üó≥Ô∏è VOTING RESULTS SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("C√°c t√≠nh nƒÉng s·∫Ω c√≥:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ Xem k·∫øt qu·∫£ vote cho Team/Player");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ Th·ªëng k√™ popularity ranking");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ Qu·∫£n l√Ω polls v√† surveys");
        
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
        Console.ForegroundColor = ConsoleColor.DarkGray;
        Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
        Console.ResetColor();
        
        Console.ReadKey(true);
    }    /// <summary>
    /// Menu qu·∫£n l√Ω feedback
    /// </summary>
    private void ShowFeedbackManagementMenu()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 10;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("QU·∫¢N L√ù FEEDBACK", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("üìù FEEDBACK MANAGEMENT SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("C√°c t√≠nh nƒÉng s·∫Ω c√≥:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ Xem v√† tr·∫£ l·ªùi feedback t·ª´ ng∆∞·ªùi d√πng");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ Ph√¢n lo·∫°i feedback theo m·ª©c ƒë·ªô ∆∞u ti√™n");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ Th·ªëng k√™ satisfaction rating");
        
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 3);
        Console.ForegroundColor = ConsoleColor.DarkGray;
        Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
        Console.ResetColor();
        
        Console.ReadKey(true);
    }    /// <summary>
    /// Menu c√†i ƒë·∫∑t h·ªá th·ªëng
    /// </summary>
    private void ShowSystemSettingsMenu()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 12;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("‚öôÔ∏è SYSTEM SETTINGS PANEL");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("C√°c t√≠nh nƒÉng s·∫Ω c√≥:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ C·∫•u h√¨nh m√°y ch·ªß game");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ Thi·∫øt l·∫≠p th√¥ng s·ªë esports");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ Qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu");
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.Write("‚Ä¢ Backup v√† restore");
        
        // Hi·ªÉn th·ªã ph√≠m ƒëi·ªÅu h∆∞·ªõng ·ªü cu·ªëi khung
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("ESC: Quay l·∫°i   üéÆ Gaming Settings Dashboard");
        Console.ResetColor();
        
        // Ch·ªù ph√≠m ESC
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
        }        while (key.Key != ConsoleKey.Escape);
    }

    /// <summary>
    /// Menu x√≥a ng∆∞·ªùi d√πng
    /// </summary>
    private void ShowUserDeletionMenu()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 12;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("X√ìA NG∆Ø·ªúI D√ôNG", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("üóëÔ∏è USER DELETION SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("T√≠nh nƒÉng s·∫Ω bao g·ªìm:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ X√°c nh·∫≠n x√≥a t√†i kho·∫£n");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ Backup d·ªØ li·ªáu ng∆∞·ªùi d√πng");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ X√≥a vƒ©nh vi·ªÖn/t·∫°m ng∆∞ng");
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.Write("‚Ä¢ B·∫£o m·∫≠t cao c·∫•p");
        
        // Hi·ªÉn th·ªã ph√≠m ƒëi·ªÅu h∆∞·ªõng ·ªü cu·ªëi khung
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("ESC: Quay l·∫°i   ‚ö° Safety First Policy");
        Console.ResetColor();
        
        // Ch·ªù ph√≠m ESC
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
        }
        while (key.Key != ConsoleKey.Escape);
    }    /// <summary>
    /// Menu qu·∫£n l√Ω ƒë·ªôi (Team Management)
    /// </summary>
    private async Task ShowTeamManagementMenuAsync()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 12;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("QU·∫¢N L√ù ƒê·ªòI/TEAM", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Green;
        Console.Write("üë• TEAM MANAGEMENT SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("T√≠nh nƒÉng s·∫Ω bao g·ªìm:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ T·∫°o v√† qu·∫£n l√Ω team esports");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ Th√™m/x√≥a th√†nh vi√™n team");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ Ph√¢n c√¥ng vai tr√≤ (Captain, Support...)");
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.Write("‚Ä¢ Th·ªëng k√™ th√†nh t√≠ch team");
        
        // Hi·ªÉn th·ªã ph√≠m ƒëi·ªÅu h∆∞·ªõng ·ªü cu·ªëi khung
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("ESC: Quay l·∫°i   üèÜ Team Management Portal");
        Console.ResetColor();
        
        // Ch·ªù ph√≠m ESC
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
        }
        while (key.Key != ConsoleKey.Escape);
        
        await Task.CompletedTask; // Async compliance
    }
    
    /// <summary>
    /// L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi caching ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
    /// </summary>
    private async Task<List<UserProfileDto>> GetUsersWithCacheAsync(bool forceRefresh = false)
    {        if (forceRefresh || _cachedUsers == null || DateTime.Now - _lastUsersCacheTime > _cacheExpiration)
        {
            try
            {
                var result = await _adminController.GetAllUsersAsync();
                _cachedUsers = result.Items.ToList();
                _lastUsersCacheTime = DateTime.Now;
            }
            catch (Exception ex)
            {
                // N·∫øu c√≥ l·ªói v√† c√≥ cache c≈©, d√πng cache c≈©
                if (_cachedUsers != null)
                {
                    ConsoleRenderingService.ShowMessageBox($"S·ª≠ d·ª•ng d·ªØ li·ªáu cache do l·ªói: {ex.Message}", true, 2000);
                    return _cachedUsers;
                }
                throw; // Re-throw n·∫øu kh√¥ng c√≥ cache
            }
        }
        
        return _cachedUsers ?? new List<UserProfileDto>();
    }
    
    /// <summary>
    /// Invalidate cache khi c√≥ thay ƒë·ªïi d·ªØ li·ªáu
    /// </summary>
    private void InvalidateUserCache()
    {
        _cachedUsers = null;
        _lastUsersCacheTime = DateTime.MinValue;
    }
      /// <summary>
    /// Hi·ªÉn th·ªã loading v·ªõi timeout ƒë·ªÉ tr√°nh treo ·ª©ng d·ª•ng
    /// </summary>
    private async Task<T> ExecuteWithTimeoutAsync<T>(Task<T> task, string loadingMessage, int timeoutMs = 30000)
    {
        ConsoleRenderingService.ShowLoadingMessage(loadingMessage);
        
        try
        {
            using var cts = new System.Threading.CancellationTokenSource(timeoutMs);
            var completedTask = await Task.WhenAny(task, Task.Delay(timeoutMs, cts.Token));
            
            if (completedTask == task)
            {
                return await task; // Task ho√†n th√†nh th√†nh c√¥ng
            }
            else
            {
                throw new TimeoutException($"Thao t√°c qu√° th·ªùi gian ch·ªù ({timeoutMs/1000}s)");
            }
        }
        catch (OperationCanceledException)
        {
            throw new TimeoutException($"Thao t√°c qu√° th·ªùi gian ch·ªù ({timeoutMs/1000}s)");
        }
    }
    
    /// <summary>
    /// Validate User ID input v·ªõi error handling t·ªët h∆°n
    /// </summary>
    private bool TryGetValidUserId(string input, out int userId, out string errorMessage)
    {
        userId = 0;
        errorMessage = "";
        
        if (string.IsNullOrWhiteSpace(input))
        {
            errorMessage = "User ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!";
            return false;
        }
        
        if (!int.TryParse(input.Trim(), out userId))
        {
            errorMessage = "User ID ph·∫£i l√† s·ªë nguy√™n!";
            return false;
        }
        
        if (userId <= 0)
        {
            errorMessage = "User ID ph·∫£i l·ªõn h∆°n 0!";
            return false;
        }
        
        return true;
    }
    
    /// <summary>
    /// Helper method ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin user m·ªôt c√°ch ƒë·∫πp m·∫Øt
    /// </summary>
    private void DisplayUserDetails(UserProfileDto user, int contentLeft, int contentTop)
    {
        // Clear loading message
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write(new string(' ', 60));
        
        // Display user info with Vietnamese esports context
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.ForegroundColor = ConsoleColor.Green;
        Console.Write($"üë§ T√™n: {user.Username}");
        
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write($"üìß Email: {user.Email}");
        
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        var joinDate = DateTime.Now.AddDays(-(user.Id * 30));
        Console.Write($"üìÖ Ng√†y tham gia: {joinDate:dd/MM/yyyy}");
        
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        string roleVietnamese = user.Role switch
        {
            "Admin" => "Qu·∫£n tr·ªã vi√™n",
            "Player" => "Tuy·ªÉn th·ªß Esports",
            "Viewer" => "Kh√°n gi·∫£",
            _ => "Kh√¥ng x√°c ƒë·ªãnh"
        };
        Console.Write($"üéÆ Vai tr√≤: {roleVietnamese}");
        
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.ForegroundColor = ConsoleColor.Green; // Mock active status
        Console.Write($"üîÑ Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông");
          // Additional esports info for players
        if (user.Role == "Player")
        {
            Console.SetCursorPosition(contentLeft, contentTop + 9);
            Console.ForegroundColor = ConsoleColor.Cyan;
            string team = $"Team{user.Id % 5 + 1}";
            Console.Write($"üèÜ Team: {team}");
        }
        
        Console.ResetColor();
    }
}
