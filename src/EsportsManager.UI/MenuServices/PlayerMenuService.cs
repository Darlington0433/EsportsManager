using System;
using EsportsManager.UI.Controllers;
using EsportsManager.BL.DTOs;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.MenuServices;

/// <summary>
/// PlayerMenuService - X·ª≠ l√Ω UI menu cho Player
/// </summary>
public class PlayerMenuService
{
    private readonly PlayerController _playerController;

    public PlayerMenuService(PlayerController playerController)
    {
        _playerController = playerController ?? throw new ArgumentNullException(nameof(playerController));
    }    /// <summary>
         /// Hi·ªÉn th·ªã menu Player
         /// </summary>
    public void ShowPlayerMenu()
    {
        ShowMainMenu();
    }

    /// <summary>
    /// Hi·ªÉn th·ªã menu ch√≠nh c·ªßa Player
    /// </summary>
    public void ShowMainMenu()
    {
        while (true)
        {
            var menuOptions = new[]
            {
                "üèÜ ƒêƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u",
                "üë• Qu·∫£n l√Ω team",
                "üë§ Xem th√¥ng tin c√° nh√¢n",
                "‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n",
                "üîë Thay ƒë·ªïi m·∫≠t kh·∫©u",
                "üìã Xem danh s√°ch gi·∫£i ƒë·∫•u",
                "üìù G·ª≠i feedback gi·∫£i ƒë·∫•u",
                "üö™ ƒêƒÉng xu·∫•t"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("PLAYER CONTROL PANEL", menuOptions); switch (selection)
            {
                case 0:
                    ShowTournamentRegistration();
                    break;
                case 1:
                    ShowTeamManagement();
                    break;
                case 2:
                    ShowPersonalInfo();
                    break;
                case 3:
                    ShowUpdatePersonalInfo();
                    break;
                case 4:
                    ShowChangePassword();
                    break;
                case 5:
                    ShowTournamentList();
                    break;
                case 6:
                    ShowSendFeedback();
                    break;
                case 7:
                case -1:
                    return; // ƒêƒÉng xu·∫•t
                default:
                    Console.WriteLine("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                    break;
            }
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n
    /// </summary>
    private void ShowPersonalInfo()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i th√¥ng tin c√° nh√¢n...");

            var userInfo = _playerController.GetPersonalInfoAsync().GetAwaiter().GetResult();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH√îNG TIN C√Å NH√ÇN", 80, 15);

            Console.WriteLine($"üë§ ID: {userInfo.Id}");
            Console.WriteLine($"üìß Username: {userInfo.Username}");
            Console.WriteLine($"‚úâÔ∏è Email: {userInfo.Email ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.WriteLine($"üé≠ Role: {userInfo.Role}");
            Console.WriteLine($"üìÖ Ng√†y t·∫°o: {userInfo.CreatedAt:dd/MM/yyyy HH:mm}");
            Console.WriteLine($"üïê L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi: {userInfo.LastLoginAt?.ToString("dd/MM/yyyy HH:mm") ?? "Ch∆∞a c√≥"}");
            Console.WriteLine($"üî¢ T·ªïng s·ªë l·∫ßn ƒëƒÉng nh·∫≠p: {userInfo.TotalLogins}");
            Console.WriteLine($"‚è±Ô∏è T·ªïng th·ªùi gian online: {userInfo.TotalTimeOnline.TotalHours:F1} gi·ªù");

            ConsoleRenderingService.PauseWithMessage();
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// ƒêƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u
    /// </summary>
    private void ShowTournamentRegistration()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i danh s√°ch gi·∫£i ƒë·∫•u...");

            var tournaments = _playerController.GetAvailableTournamentsAsync().GetAwaiter().GetResult();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("ƒêƒÇNG K√ù THAM GIA GI·∫¢I ƒê·∫§U", 100, 20);

            if (tournaments.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox("Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o m·ªü ƒëƒÉng k√Ω", false, 2000);
                return;
            }

            Console.WriteLine("Danh s√°ch gi·∫£i ƒë·∫•u c√≥ th·ªÉ tham gia:");
            Console.WriteLine(new string('=', 90));

            for (int i = 0; i < tournaments.Count; i++)
            {
                var tournament = tournaments[i];
                Console.WriteLine($"{i + 1}. {tournament.Name}");
                Console.WriteLine($"   üìù {tournament.Description}");
                Console.WriteLine($"   üìÖ Ng√†y b·∫Øt ƒë·∫ßu: {tournament.StartDate:dd/MM/yyyy}");
                Console.WriteLine($"   üí∞ Ph√≠ tham gia: {tournament.EntryFee:N0} VND");
                Console.WriteLine($"   üë• ƒê√£ ƒëƒÉng k√Ω: {tournament.CurrentParticipants}/{tournament.MaxParticipants}");
                Console.WriteLine();
            }

            Console.Write("Nh·∫≠p s·ªë th·ª© t·ª± gi·∫£i ƒë·∫•u mu·ªën ƒëƒÉng k√Ω (0 ƒë·ªÉ h·ªßy): ");
            if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= tournaments.Count)
            {
                var selectedTournament = tournaments[choice - 1];
                ConsoleRenderingService.ShowLoadingMessage("ƒêang ƒëƒÉng k√Ω...");

                bool success = _playerController.RegisterForTournamentAsync(selectedTournament.Id).GetAwaiter().GetResult();

                if (success)
                {
                    ConsoleRenderingService.ShowMessageBox($"ƒêƒÉng k√Ω th√†nh c√¥ng gi·∫£i ƒë·∫•u: {selectedTournament.Name}", false, 3000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("ƒêƒÉng k√Ω th·∫•t b·∫°i!", true, 2000);
                }
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Qu·∫£n l√Ω team
    /// </summary>
    private void ShowTeamManagement()
    {
        try
        {
            var myTeam = _playerController.GetMyTeamAsync().GetAwaiter().GetResult();

            if (myTeam == null)
            {
                // Player ch∆∞a c√≥ team - hi·ªÉn th·ªã option t·∫°o team
                ShowCreateTeam();
            }
            else
            {
                // Player ƒë√£ c√≥ team - hi·ªÉn th·ªã th√¥ng tin team
                ShowTeamInfo(myTeam);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// T·∫°o team m·ªõi
    /// </summary>
    private void ShowCreateTeam()
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("T·∫†O TEAM M·ªöI", 80, 12);

        Console.Write("T√™n team: ");
        string teamName = Console.ReadLine() ?? "";

        Console.Write("M√¥ t·∫£ team: ");
        string description = Console.ReadLine() ?? "";

        if (string.IsNullOrWhiteSpace(teamName))
        {
            ConsoleRenderingService.ShowMessageBox("T√™n team kh√¥ng ƒë∆∞·ª£c r·ªóng!", true, 2000);
            return;
        }

        try
        {
            var teamDto = new TeamCreateDto
            {
                Name = teamName,
                Description = description
            };

            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫°o team...");
            var team = _playerController.CreateTeamAsync(teamDto).GetAwaiter().GetResult();

            if (team != null)
            {
                ConsoleRenderingService.ShowMessageBox($"T·∫°o team '{teamName}' th√†nh c√¥ng!", false, 3000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("T·∫°o team th·∫•t b·∫°i!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng tin team
    /// </summary>
    private void ShowTeamInfo(TeamInfoDto team)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder($"TEAM: {team.Name}", 100, 20);
        Console.WriteLine($"üìù M√¥ t·∫£: {team.Description}");
        Console.WriteLine($"üìÖ Ng√†y t·∫°o: {team.CreatedAt:dd/MM/yyyy}");
        Console.WriteLine($"üë• S·ªë th√†nh vi√™n: {team.MemberCount}/{team.MaxMembers}");

        // Note: To show team members, we would need to get the members separately
        // as the TeamInfoDto doesn't contain the members list

        Console.WriteLine("\nPress any key to continue...");
        Console.ReadKey(true);
    }    /// <summary>
         /// C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
         /// </summary>
    private void ShowUpdatePersonalInfo()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("C·∫¨P NH·∫¨T TH√îNG TIN C√Å NH√ÇN", 80, 15);

            var currentInfo = _playerController.GetPersonalInfoAsync().GetAwaiter().GetResult();

            Console.WriteLine("Th√¥ng tin hi·ªán t·∫°i:");
            Console.WriteLine($"Email: {currentInfo.Email ?? "Ch∆∞a c√≥"}");
            Console.WriteLine($"H·ªç t√™n: {currentInfo.FullName ?? "Ch∆∞a c√≥"}");
            Console.WriteLine();

            Console.Write("Email m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
            string newEmail = Console.ReadLine()?.Trim();

            Console.Write("H·ªç t√™n m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
            string newFullName = Console.ReadLine()?.Trim();

            if (!string.IsNullOrEmpty(newEmail) || !string.IsNullOrEmpty(newFullName))
            {
                var updateDto = new UpdateUserDto
                {
                    Email = !string.IsNullOrEmpty(newEmail) ? newEmail : currentInfo.Email,
                    FullName = !string.IsNullOrEmpty(newFullName) ? newFullName : currentInfo.FullName
                };

                ConsoleRenderingService.ShowLoadingMessage("ƒêang c·∫≠p nh·∫≠t...");
                bool success = _playerController.UpdatePersonalInfoAsync(updateDto).GetAwaiter().GetResult();

                if (success)
                {
                    ConsoleRenderingService.ShowMessageBox("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", false, 3000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("C·∫≠p nh·∫≠t th·∫•t b·∫°i!", true, 2000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c thay ƒë·ªïi!", false, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }    /// <summary>
         /// Thay ƒë·ªïi m·∫≠t kh·∫©u
         /// </summary>
    private void ShowChangePassword()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("THAY ƒê·ªîI M·∫¨T KH·∫®U", 80, 12);

            Console.Write("M·∫≠t kh·∫©u hi·ªán t·∫°i: ");
            string oldPassword = ReadPassword();

            Console.Write("\nM·∫≠t kh·∫©u m·ªõi: ");
            string newPassword = ReadPassword();

            Console.Write("\nX√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi: ");
            string confirmPassword = ReadPassword();

            if (newPassword != confirmPassword)
            {
                ConsoleRenderingService.ShowMessageBox("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!", true, 2000);
                return;
            }

            if (newPassword.Length < 6)
            {
                ConsoleRenderingService.ShowMessageBox("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!", true, 2000);
                return;
            }

            var changePasswordDto = new UpdatePasswordDto
            {
                CurrentPassword = oldPassword,
                NewPassword = newPassword
            };

            ConsoleRenderingService.ShowLoadingMessage("ƒêang thay ƒë·ªïi m·∫≠t kh·∫©u...");
            bool success = _playerController.ChangePasswordAsync(changePasswordDto).GetAwaiter().GetResult();

            if (success)
            {
                ConsoleRenderingService.ShowMessageBox("Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", false, 3000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("Thay ƒë·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i m·∫≠t kh·∫©u hi·ªán t·∫°i.", true, 3000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// ƒê·ªçc m·∫≠t kh·∫©u ·∫©n
    /// </summary>
    private string ReadPassword()
    {
        string password = "";
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
            if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter)
            {
                password += key.KeyChar;
                Console.Write("*");
            }
            else
            {
                if (key.Key == ConsoleKey.Backspace && password.Length > 0)
                {
                    password = password.Substring(0, (password.Length - 1));
                    Console.Write("\b \b");
                }
            }
        }
        while (key.Key != ConsoleKey.Enter);
        return password;
    }    /// <summary>
         /// Xem danh s√°ch gi·∫£i ƒë·∫•u
         /// </summary>
    private void ShowTournamentList()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i danh s√°ch gi·∫£i ƒë·∫•u...");

            var tournaments = _playerController.GetAllTournamentsAsync().GetAwaiter().GetResult();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("DANH S√ÅCH GI·∫¢I ƒê·∫§U", 100, 20);

            if (tournaments.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox("Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o", false, 2000);
                return;
            }

            Console.WriteLine($"{"STT",-5} {"T√™n gi·∫£i ƒë·∫•u",-30} {"Tr·∫°ng th√°i",-15} {"Ng√†y b·∫Øt ƒë·∫ßu",-15} {"Ph√≠ tham gia",-15}");
            Console.WriteLine(new string('=', 90));

            for (int i = 0; i < tournaments.Count; i++)
            {
                var tournament = tournaments[i];
                Console.WriteLine($"{i + 1,-5} {tournament.Name,-30} {tournament.Status,-15} {tournament.StartDate:dd/MM/yyyy,-15} {tournament.EntryFee:N0,-15}");
            }

            Console.WriteLine(new string('=', 90));
            Console.Write("\nNh·∫≠p s·ªë th·ª© t·ª± ƒë·ªÉ xem chi ti·∫øt (0 ƒë·ªÉ quay l·∫°i): ");

            if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= tournaments.Count)
            {
                var selectedTournament = tournaments[choice - 1];
                ShowTournamentDetail(selectedTournament);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã chi ti·∫øt gi·∫£i ƒë·∫•u
    /// </summary>
    private void ShowTournamentDetail(TournamentInfoDto tournament)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder($"CHI TI·∫æT GI·∫¢I ƒê·∫§U: {tournament.Name}", 100, 20);

        Console.WriteLine($"üìù M√¥ t·∫£: {tournament.Description}");
        Console.WriteLine($"üìÖ Ng√†y b·∫Øt ƒë·∫ßu: {tournament.StartDate:dd/MM/yyyy HH:mm}");
        Console.WriteLine($"üìÖ Ng√†y k·∫øt th√∫c: {tournament.EndDate:dd/MM/yyyy HH:mm}");
        Console.WriteLine($"üéØ Tr·∫°ng th√°i: {tournament.Status}");
        Console.WriteLine($"üí∞ Ph√≠ tham gia: {tournament.EntryFee:N0} VND");
        Console.WriteLine($"üèÜ T·ªïng gi·∫£i th∆∞·ªüng: {tournament.PrizePool:N0} VND");
        Console.WriteLine($"üë• S·ªë ng∆∞·ªùi tham gia: {tournament.CurrentParticipants}/{tournament.MaxParticipants}");
        Console.WriteLine($"üìç ƒê·ªãa ƒëi·ªÉm: {tournament.Location}");

        if (!string.IsNullOrEmpty(tournament.Rules))
        {
            Console.WriteLine($"\nüìã Lu·∫≠t thi ƒë·∫•u:\n{tournament.Rules}");
        }

        Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        Console.ReadKey(true);
    }    /// <summary>
         /// G·ª≠i feedback
         /// </summary>
    private void ShowSendFeedback()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("G·ª¨I FEEDBACK", 80, 15);

            Console.WriteLine("Lo·∫°i feedback:");
            Console.WriteLine("1. Feedback v·ªÅ gi·∫£i ƒë·∫•u");
            Console.WriteLine("2. Feedback v·ªÅ h·ªá th·ªëng");
            Console.WriteLine("3. Feedback chung");
            Console.Write("\nCh·ªçn lo·∫°i feedback (1-3): ");

            if (!int.TryParse(Console.ReadLine(), out int feedbackType) || feedbackType < 1 || feedbackType > 3)
            {
                ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
                return;
            }

            Console.Write("\nTi√™u ƒë·ªÅ feedback: ");
            string title = Console.ReadLine()?.Trim();

            if (string.IsNullOrEmpty(title))
            {
                ConsoleRenderingService.ShowMessageBox("Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", true, 2000);
                return;
            }

            Console.WriteLine("\nN·ªôi dung feedback (nh·∫≠p 'END' tr√™n d√≤ng m·ªõi ƒë·ªÉ k·∫øt th√∫c):");
            string content = "";
            string line;
            while ((line = Console.ReadLine()) != "END")
            {
                content += line + "\n";
            }

            if (string.IsNullOrEmpty(content.Trim()))
            {
                ConsoleRenderingService.ShowMessageBox("N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", true, 2000);
                return;
            }
            var feedbackDto = new FeedbackDto();
            // TODO: Assign properties when FeedbackDto is fully compiled
            // feedbackDto.Title = title;
            // feedbackDto.Content = content.Trim();
            // feedbackDto.FeedbackType = feedbackType switch
            // {
            //     1 => "Tournament",
            //     2 => "System", 
            //     3 => "General",
            //     _ => "General"
            // };

            Console.WriteLine($"üìù G·ª≠i feedback: {title} - {content.Trim()}");

            ConsoleRenderingService.ShowLoadingMessage("ƒêang g·ª≠i feedback...");
            bool success = _playerController.SubmitFeedbackAsync(feedbackDto).GetAwaiter().GetResult();

            if (success)
            {
                ConsoleRenderingService.ShowMessageBox("G·ª≠i feedback th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p √Ω ki·∫øn.", false, 3000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("G·ª≠i feedback th·∫•t b·∫°i!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }
}
