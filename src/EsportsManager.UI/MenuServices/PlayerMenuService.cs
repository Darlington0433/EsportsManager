using System;
using EsportsManager.BL.Controllers;
using EsportsManager.BL.DTOs;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.MenuServices;

/// <summary>
/// PlayerMenuService - X·ª≠ l√Ω UI menu cho Player
/// </summary>
public class PlayerMenuService
{
    private readonly PlayerController _playerController;

    public PlayerMenuService(PlayerController playerController)
    {
        _playerController = playerController ?? throw new ArgumentNullException(nameof(playerController));
    }    /// <summary>
    /// Hi·ªÉn th·ªã menu Player
    /// </summary>
    public void ShowPlayerMenu()
    {
        ShowMainMenu();
    }

    /// <summary>
    /// Hi·ªÉn th·ªã menu ch√≠nh c·ªßa Player
    /// </summary>
    public void ShowMainMenu()
    {
        while (true)
        {
            var menuOptions = new[]
            {
                "üèÜ ƒêƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u",
                "üë• Qu·∫£n l√Ω team",
                "üë§ Xem th√¥ng tin c√° nh√¢n",
                "‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n",
                "üîë Thay ƒë·ªïi m·∫≠t kh·∫©u", 
                "üìã Xem danh s√°ch gi·∫£i ƒë·∫•u",
                "üìù G·ª≠i feedback gi·∫£i ƒë·∫•u",
                "üö™ ƒêƒÉng xu·∫•t"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("PLAYER CONTROL PANEL", menuOptions);

            switch (selection)
            {
                case 0:
                    ShowTournamentRegistration();
                    break;
                case 1:
                    ShowTeamManagement();
                    break;
                case 2:
                    ShowPersonalInfo();
                    break;
                case 3:
                    ShowUpdatePersonalInfo();
                    break;
                case 4:
                    ShowChangePassword();
                    break;
                case 5:
                    ShowTournamentList();
                    break;
                case 6:
                    ShowSendFeedback();
                    break;
                case 7:
                case -1:
                    return; // ƒêƒÉng xu·∫•t
            }
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n
    /// </summary>
    private void ShowPersonalInfo()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i th√¥ng tin c√° nh√¢n...");
            
            var userInfo = _playerController.GetPersonalInfoAsync().GetAwaiter().GetResult();
            
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH√îNG TIN C√Å NH√ÇN", 80, 15);
            
            Console.WriteLine($"üë§ ID: {userInfo.Id}");
            Console.WriteLine($"üìß Username: {userInfo.Username}");
            Console.WriteLine($"‚úâÔ∏è Email: {userInfo.Email ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.WriteLine($"üé≠ Role: {userInfo.Role}");
            Console.WriteLine($"üìÖ Ng√†y t·∫°o: {userInfo.CreatedAt:dd/MM/yyyy HH:mm}");
            Console.WriteLine($"üïê L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi: {userInfo.LastLoginAt?.ToString("dd/MM/yyyy HH:mm") ?? "Ch∆∞a c√≥"}");
            Console.WriteLine($"üî¢ T·ªïng s·ªë l·∫ßn ƒëƒÉng nh·∫≠p: {userInfo.TotalLogins}");
            Console.WriteLine($"‚è±Ô∏è T·ªïng th·ªùi gian online: {userInfo.TotalTimeOnline.TotalHours:F1} gi·ªù");
            
            ConsoleRenderingService.PauseWithMessage();
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// ƒêƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u
    /// </summary>
    private void ShowTournamentRegistration()
    {
        try
        {
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫£i danh s√°ch gi·∫£i ƒë·∫•u...");
            
            var tournaments = _playerController.GetAvailableTournamentsAsync().GetAwaiter().GetResult();
            
            Console.Clear();
            ConsoleRenderingService.DrawBorder("ƒêƒÇNG K√ù THAM GIA GI·∫¢I ƒê·∫§U", 100, 20);
            
            if (tournaments.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox("Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o m·ªü ƒëƒÉng k√Ω", false, 2000);
                return;
            }

            Console.WriteLine("Danh s√°ch gi·∫£i ƒë·∫•u c√≥ th·ªÉ tham gia:");
            Console.WriteLine(new string('=', 90));
            
            for (int i = 0; i < tournaments.Count; i++)
            {
                var tournament = tournaments[i];
                Console.WriteLine($"{i + 1}. {tournament.Name}");
                Console.WriteLine($"   üìù {tournament.Description}");
                Console.WriteLine($"   üìÖ Ng√†y b·∫Øt ƒë·∫ßu: {tournament.StartDate:dd/MM/yyyy}");
                Console.WriteLine($"   üí∞ Ph√≠ tham gia: {tournament.EntryFee:N0} VND");
                Console.WriteLine($"   üë• ƒê√£ ƒëƒÉng k√Ω: {tournament.CurrentParticipants}/{tournament.MaxParticipants}");
                Console.WriteLine();
            }
            
            Console.Write("Nh·∫≠p s·ªë th·ª© t·ª± gi·∫£i ƒë·∫•u mu·ªën ƒëƒÉng k√Ω (0 ƒë·ªÉ h·ªßy): ");
            if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= tournaments.Count)
            {
                var selectedTournament = tournaments[choice - 1];
                ConsoleRenderingService.ShowLoadingMessage("ƒêang ƒëƒÉng k√Ω...");
                
                bool success = _playerController.RegisterForTournamentAsync(selectedTournament.Id).GetAwaiter().GetResult();
                
                if (success)
                {
                    ConsoleRenderingService.ShowMessageBox($"ƒêƒÉng k√Ω th√†nh c√¥ng gi·∫£i ƒë·∫•u: {selectedTournament.Name}", false, 3000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("ƒêƒÉng k√Ω th·∫•t b·∫°i!", true, 2000);
                }
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Qu·∫£n l√Ω team
    /// </summary>
    private void ShowTeamManagement()
    {
        try
        {
            var myTeam = _playerController.GetMyTeamAsync().GetAwaiter().GetResult();
            
            if (myTeam == null)
            {
                // Player ch∆∞a c√≥ team - hi·ªÉn th·ªã option t·∫°o team
                ShowCreateTeam();
            }
            else
            {
                // Player ƒë√£ c√≥ team - hi·ªÉn th·ªã th√¥ng tin team
                ShowTeamInfo(myTeam);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// T·∫°o team m·ªõi
    /// </summary>
    private void ShowCreateTeam()
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("T·∫†O TEAM M·ªöI", 80, 12);
        
        Console.Write("T√™n team: ");
        string teamName = Console.ReadLine() ?? "";
        
        Console.Write("M√¥ t·∫£ team: ");
        string description = Console.ReadLine() ?? "";
        
        if (string.IsNullOrWhiteSpace(teamName))
        {
            ConsoleRenderingService.ShowMessageBox("T√™n team kh√¥ng ƒë∆∞·ª£c r·ªóng!", true, 2000);
            return;
        }

        try
        {
            var teamDto = new TeamCreateDto
            {
                Name = teamName,
                Description = description
            };
            
            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫°o team...");
            
            bool success = _playerController.CreateTeamAsync(teamDto).GetAwaiter().GetResult();
            
            if (success)
            {
                ConsoleRenderingService.ShowMessageBox($"T·∫°o team '{teamName}' th√†nh c√¥ng!", false, 3000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("T·∫°o team th·∫•t b·∫°i!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng tin team
    /// </summary>
    private void ShowTeamInfo(TeamInfoDto team)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder($"TEAM: {team.Name}", 100, 20);
        
        Console.WriteLine($"üìù M√¥ t·∫£: {team.Description}");
        Console.WriteLine($"üìÖ Ng√†y t·∫°o: {team.CreatedAt:dd/MM/yyyy}");
        Console.WriteLine($"üë• S·ªë th√†nh vi√™n: {team.Members.Count}");
        
        if (team.Members.Count > 0)
        {
            Console.WriteLine("\nDanh s√°ch th√†nh vi√™n:");
            Console.WriteLine(new string('-', 50));
            foreach (var member in team.Members)
            {
                Console.WriteLine($"‚Ä¢ {member.Username} ({member.Role}) - Tham gia: {member.JoinedAt:dd/MM/yyyy}");
            }
        }
        
        ConsoleRenderingService.PauseWithMessage();
    }    /// <summary>
    /// C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
    /// </summary>
    private void ShowUpdatePersonalInfo()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 12;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("C·∫¨P NH·∫¨T TH√îNG TIN C√Å NH√ÇN", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("üë§ PLAYER PROFILE UPDATE");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("T√≠nh nƒÉng s·∫Ω bao g·ªìm:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ C·∫≠p nh·∫≠t th√¥ng tin game ID");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ C·∫≠p nh·∫≠t game preferences");
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.Write("‚Ä¢ Thi·∫øt l·∫≠p th√¥ng tin li√™n h·ªá");
        
        // Hi·ªÉn th·ªã ph√≠m ƒëi·ªÅu h∆∞·ªõng ·ªü cu·ªëi khung
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("ESC: Quay l·∫°i   üéÆ Gaming Profile Manager");
        Console.ResetColor();
        
        // Ch·ªù ph√≠m ESC
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
        }
        while (key.Key != ConsoleKey.Escape);
    }

    /// <summary>
    /// Thay ƒë·ªïi m·∫≠t kh·∫©u
    /// </summary>
    private void ShowChangePassword()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 12;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("THAY ƒê·ªîI M·∫¨T KH·∫®U", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("üîê PASSWORD CHANGE SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("T√≠nh nƒÉng s·∫Ω bao g·ªìm:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ X√°c th·ª±c m·∫≠t kh·∫©u hi·ªán t·∫°i");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u m·ªõi");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ B·∫£o m·∫≠t 2FA (n·∫øu c√≥)");
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.Write("‚Ä¢ G·ª≠i email x√°c nh·∫≠n");
        
        // Hi·ªÉn th·ªã ph√≠m ƒëi·ªÅu h∆∞·ªõng ·ªü cu·ªëi khung
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("ESC: Quay l·∫°i   üõ°Ô∏è Security Center");
        Console.ResetColor();
        
        // Ch·ªù ph√≠m ESC
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
        }
        while (key.Key != ConsoleKey.Escape);
    }

    /// <summary>
    /// Xem danh s√°ch gi·∫£i ƒë·∫•u
    /// </summary>
    private void ShowTournamentList()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 12;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("DANH S√ÅCH GI·∫¢I ƒê·∫§U", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Green;
        Console.Write("üèÜ TOURNAMENT DIRECTORY");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("T√≠nh nƒÉng s·∫Ω bao g·ªìm:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ Xem gi·∫£i ƒë·∫•u ƒëang di·ªÖn ra");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ ƒêƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ L·ªãch tr√¨nh tr·∫≠n ƒë·∫•u");
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.Write("‚Ä¢ B·∫£ng x·∫øp h·∫°ng v√† ph·∫ßn th∆∞·ªüng");
        
        // Hi·ªÉn th·ªã ph√≠m ƒëi·ªÅu h∆∞·ªõng ·ªü cu·ªëi khung
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("ESC: Quay l·∫°i   ‚öîÔ∏è Tournament Hub");
        Console.ResetColor();
        
        // Ch·ªù ph√≠m ESC
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
        }
        while (key.Key != ConsoleKey.Escape);
    }

    /// <summary>
    /// G·ª≠i feedback
    /// </summary>
    private void ShowSendFeedback()
    {
        Console.Clear();
        
        const int frameWidth = 80;
        const int frameHeight = 12;
        
        // T√≠nh v·ªã tr√≠ khung
        int frameLeft = (Console.WindowWidth - frameWidth) / 2;
        int frameTop = (Console.WindowHeight - frameHeight) / 2;
        
        // T√≠nh v·ªã tr√≠ n·ªôi dung
        int contentLeft = frameLeft + 3;
        int contentTop = frameTop + 3;
        
        // V·∫Ω khung
        ConsoleRenderingService.DrawBorder("G·ª¨I FEEDBACK", frameWidth, frameHeight);
        
        Console.SetCursorPosition(contentLeft, contentTop);
        Console.ForegroundColor = ConsoleColor.Magenta;
        Console.Write("üí¨ FEEDBACK SYSTEM");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 2);
        Console.ForegroundColor = ConsoleColor.Red;
        Console.Write("‚ö†Ô∏è Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        Console.ResetColor();
        
        Console.SetCursorPosition(contentLeft, contentTop + 4);
        Console.Write("T√≠nh nƒÉng s·∫Ω bao g·ªìm:");
        Console.SetCursorPosition(contentLeft, contentTop + 5);
        Console.Write("‚Ä¢ G·ª≠i √Ω ki·∫øn v·ªÅ h·ªá th·ªëng");
        Console.SetCursorPosition(contentLeft, contentTop + 6);
        Console.Write("‚Ä¢ B√°o l·ªói v√† bug");
        Console.SetCursorPosition(contentLeft, contentTop + 7);
        Console.Write("‚Ä¢ ƒê·ªÅ xu·∫•t t√≠nh nƒÉng m·ªõi");
        Console.SetCursorPosition(contentLeft, contentTop + 8);
        Console.Write("‚Ä¢ ƒê√°nh gi√° tr·∫£i nghi·ªám gaming");
        
        // Hi·ªÉn th·ªã ph√≠m ƒëi·ªÅu h∆∞·ªõng ·ªü cu·ªëi khung
        Console.SetCursorPosition(contentLeft, frameTop + frameHeight - 2);
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.Write("ESC: Quay l·∫°i   üìù Community Voice");
        Console.ResetColor();
        
        // Ch·ªù ph√≠m ESC
        ConsoleKeyInfo key;
        do
        {
            key = Console.ReadKey(true);
        }
        while (key.Key != ConsoleKey.Escape);
    }
}
