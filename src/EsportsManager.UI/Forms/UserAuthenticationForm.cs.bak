// Form Ä‘Äƒng nháº­p

using System;
using EsportsManager.UI.Utilities;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Services;
using EsportsManager.BL.Interfaces;
using EsportsManager.BL.DTOs;
using Models = EsportsManager.BL.Models;

name                    // Lưu profile thực tế của người dùng (không còn dùng demo)                    
                    UserSessionManager.CurrentUser = new UserProfileDto 
                    { 
                        Id = result.UserId ?? 0, 
                        Username = result.Username ?? string.Empty, 
                        Role = result.Role ?? "Viewer", 
                        Status = "Active",
                        CreatedAt = DateTime.Now
                    };pace EsportsManager.UI.Forms
{
    /// <summary>
    /// UserAuthenticationForm - Form Ä‘Äƒng nháº­p vá»›i giao diá»‡n giá»‘ng há»‡t áº£nh máº«u
    /// Bao gá»“m: border xanh lĂ¡, label cÄƒn trĂ¡i, input field highlight, hÆ°á»›ng dáº«n phĂ­m
    /// </summary>
    public class UserAuthenticationForm
    {
        #region Private Fields

        private readonly IUserService _userService;

        // CĂ¡c field cáº§n nháº­p trong form Ä‘Äƒng nháº­p
        private readonly string[] _fieldLabels = {
            "TĂªn Ä‘Äƒng nháº­p",
            "Máº­t kháº©u"
        };

        // GiĂ¡ trá»‹ Ä‘Ă£ nháº­p cho má»—i field
        private readonly string[] _fieldValues = new string[2];

        // Index cá»§a field Ä‘ang Ä‘Æ°á»£c chá»n
        private int _selectedFieldIndex = 0;

        // LÆ°u trá»¯ káº¿t quáº£ Ä‘Äƒng nháº­p
        private Models.AuthenticationResult? _authResult;

        #endregion

        #region Constructor

        public UserAuthenticationForm(IUserService userService)
        {
            _userService = userService ?? throw new ArgumentNullException(nameof(userService));
        }

        #endregion

        #region Public Methods
        /// <summary>
        /// Hiá»ƒn thá»‹ form Ä‘Äƒng nháº­p vá»›i giao diá»‡n giá»‘ng há»‡t áº£nh máº«u
        /// </summary>        /// <returns>true náº¿u user hoĂ n thĂ nh form, false náº¿u há»§y bá» (ESC)</returns>
        public bool Show()
        {
            // Khá»Ÿi táº¡o giĂ¡ trá»‹ rá»—ng cho táº¥t cáº£ fields
            for (int i = 0; i < _fieldValues.Length; i++)
            {
                _fieldValues[i] = "";
            }

            // VĂ²ng láº·p chĂ­nh xá»­ lĂ½ form
            while (true)
            {
                DrawForm();

                // Xá»­ lĂ½ input tá»« user
                var key = Console.ReadKey(true);

                switch (key.Key)
                {
                    case ConsoleKey.UpArrow:
                        _selectedFieldIndex = (_selectedFieldIndex > 0) ? _selectedFieldIndex - 1 : _fieldLabels.Length - 1;
                        break;

                    case ConsoleKey.DownArrow:
                        _selectedFieldIndex = (_selectedFieldIndex < _fieldLabels.Length - 1) ? _selectedFieldIndex + 1 : 0;
                        break;

                    case ConsoleKey.Tab:
                        _selectedFieldIndex = (_selectedFieldIndex < _fieldLabels.Length - 1) ? _selectedFieldIndex + 1 : 0;
                        break;

                    case ConsoleKey.Enter:
                        HandleFieldInput();
                        break;
                    case ConsoleKey.Escape:
                        return false; // User há»§y bá»

                    case ConsoleKey.F1:
                        // Xá»­ lĂ½ submit form (giáº£ láº­p)
                        if (ValidateForm())
                        {
                            HandleSubmit();
                            return true; // User hoĂ n thĂ nh thĂ nh cĂ´ng
                        }
                        break;
                }
            }
        }

        /// <summary>
        /// Láº¥y káº¿t quáº£ Ä‘Äƒng nháº­p
        /// </summary>
        public Models.AuthenticationResult? GetAuthResult()
        {
            return _authResult;
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Váº½ toĂ n bá»™ form vá»›i layout giá»‘ng há»‡t áº£nh máº«u
        /// </summary>
        private void DrawForm()
        {
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.Black;
            // KĂ­ch thÆ°á»›c vĂ  vá»‹ trĂ­ an toĂ n, khĂ´ng bao giá» lĂ²i ra ngoĂ i mĂ n hĂ¬nh
            int windowWidth = Console.WindowWidth;
            int windowHeight = Console.WindowHeight;
            int formWidth = Math.Min(60, windowWidth - 6);  // Tá»‘i Ä‘a 60, margin 6
            int formHeight = Math.Min(12, windowHeight - 4); // Tá»‘i Ä‘a 12, margin 4

            // CÄƒn giá»¯a mĂ n hĂ¬nh vá»›i vá»‹ trĂ­ an toĂ n
            int left = Math.Max(1, (windowWidth - formWidth) / 2);
            int top = Math.Max(1, (windowHeight - formHeight) / 2);

            // Váº½ border xanh lĂ¡
            ConsoleRenderingService.DrawBorder(left, top, formWidth, formHeight, "[ÄÄ‚NG NHáº¬P]", true);

            // Váº½ cĂ¡c input fields
            for (int i = 0; i < _fieldLabels.Length; i++)
            {
                int fieldY = top + 3 + (i * 3);
                // Váº½ label field
                SafeConsole.SetCursorPosition(left + 2, fieldY);
                Console.ForegroundColor = ConsoleColor.White;
                Console.Write($"{_fieldLabels[i]}:");

                // Váº½ input field vá»›i highlight náº¿u Ä‘Æ°á»£c chá»n
                SafeConsole.SetCursorPosition(left + 18, fieldY);

                if (i == _selectedFieldIndex)
                {
                    // Field Ä‘Æ°á»£c chá»n: background xanh
                    Console.BackgroundColor = ConsoleColor.Green;
                    Console.ForegroundColor = ConsoleColor.Black;
                }
                else
                {
                    // Field khĂ´ng Ä‘Æ°á»£c chá»n: background Ä‘en
                    Console.BackgroundColor = ConsoleColor.DarkGray;
                    Console.ForegroundColor = ConsoleColor.White;
                }
                // Hiá»ƒn thá»‹ value (password thĂ¬ hiá»ƒn thá»‹ *)
                string displayValue = "";
                if (!string.IsNullOrEmpty(_fieldValues[i]))
                {
                    if (_fieldLabels[i].Contains("Máº­t kháº©u"))
                    {
                        displayValue = new string('*', _fieldValues[i].Length);
                    }
                    else
                    {
                        displayValue = _fieldValues[i];
                    }
                }

                // TĂ­nh chiá»u rá»™ng field thĂ­ch á»©ng vá»›i kĂ­ch thÆ°á»›c form
                int fieldWidth = Math.Min(25, formWidth - 25); // Tá»‘i Ä‘a 25, nhÆ°ng khĂ´ng vÆ°á»£t khung

                // Pad Ä‘á»ƒ Ä‘á»§ chiá»u rá»™ng field
                displayValue = displayValue.PadRight(fieldWidth);
                Console.Write(displayValue);
                Console.ResetColor();
                Console.BackgroundColor = ConsoleColor.Black;
            }
            // Váº½ hÆ°á»›ng dáº«n phĂ­m á»Ÿ cuá»‘i form - cÄƒn giá»¯a vĂ  cáº¯t náº¿u quĂ¡ dĂ i
            string helpText = "â†‘â†“/Tab: Chá»n   Enter: Nháº­p   F1: ÄÄƒng nháº­p   Esc: ThoĂ¡t";
            int maxHelpWidth = formWidth - 4; // Äá»ƒ trong khung border

            // Cáº¯t text náº¿u quĂ¡ dĂ i
            if (helpText.Length > maxHelpWidth)
            {
                helpText = "â†‘â†“: Chá»n   Enter: Nháº­p   F1: OK   Esc: ThoĂ¡t";
            }
            // TĂ­nh vá»‹ trĂ­ cÄƒn giá»¯a
            int helpX = left + ((formWidth - helpText.Length) / 2);
            SafeConsole.SetCursorPosition(helpX, top + formHeight - 2);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(helpText);
            Console.ResetColor();
        }

        /// <summary>
        /// Xá»­ lĂ½ nháº­p dá»¯ liá»‡u cho field Ä‘ang Ä‘Æ°á»£c chá»n
        /// </summary>
        private void HandleFieldInput()
        {
            // TĂ­nh vá»‹ trĂ­ input
            int windowWidth = Console.WindowWidth;
            int windowHeight = Console.WindowHeight;
            int formWidth = 60;
            int formHeight = 12;
            int left = Math.Max(0, (windowWidth - formWidth) / 2);
            int top = Math.Max(0, (windowHeight - formHeight) / 2);
            int fieldY = top + 3 + (_selectedFieldIndex * 3);
            // Äáº·t cursor vĂ o vá»‹ trĂ­ input
            SafeConsole.SetCursorPosition(left + 18, fieldY);
            Console.BackgroundColor = ConsoleColor.Green;
            Console.ForegroundColor = ConsoleColor.Black;
            // Clear field hiá»‡n táº¡i
            int fieldWidth = Math.Min(25, formWidth - 25);
            Console.Write(new string(' ', fieldWidth));
            SafeConsole.SetCursorPosition(left + 18, fieldY);

            // Äá»c input dá»±a trĂªn loáº¡i field
            if (_fieldLabels[_selectedFieldIndex].Contains("Máº­t kháº©u"))
            {
                _fieldValues[_selectedFieldIndex] = ReadPasswordInput();
            }
            else
            {
                _fieldValues[_selectedFieldIndex] = ReadTextInput();
            }

            Console.ResetColor();
            Console.BackgroundColor = ConsoleColor.Black;
        }
        /// <summary>
        /// Äá»c password input (hiá»ƒn thá»‹ dáº¥u *)
        /// </summary>
        private string ReadPasswordInput()
        {
            return UnifiedInputService.ReadPassword() ?? "";
        }
        /// <summary>
        /// Äá»c text input thĂ´ng thÆ°á»ng
        /// </summary>
        private string ReadTextInput()
        {
            return UnifiedInputService.ReadUsername() ?? "";
        }
        /// <summary>
        /// Validate form trÆ°á»›c khi submit
        /// </summary>
        private bool ValidateForm()
        {
            return ValidationService.ValidateRequiredFields(_fieldValues, _fieldLabels, ShowMessage);
        }        /// <summary>
                 /// Xá»­ lĂ½ submit form Ä‘Äƒng nháº­p vá»›i UserService
                 /// </summary>
        private async void HandleSubmit()
        {
            try
            {
                // Táº¡o LoginDto tá»« input
                var loginDto = new LoginDto
                {
                    Username = _fieldValues[0],
                    Password = _fieldValues[1]
                };

                // Gá»i UserService Ä‘á»ƒ authenticate (sá»­ dá»¥ng authentication thá»±c táº¿)
                var result = await _userService.AuthenticateAsync(loginDto);

                if (result.IsAuthenticated)
                {
                    // ÄÄƒng nháº­p thĂ nh cĂ´ng, hiá»ƒn thá»‹ thĂ´ng bĂ¡o
                    ShowMessage($"ÄÄƒng nháº­p thĂ nh cĂ´ng! ChĂ o má»«ng {result.Username}", false);

                    // LÆ°u profile thá»±c táº¿ cá»§a ngÆ°á»i dĂ¹ng (khĂ´ng cĂ²n dĂ¹ng demo)                    UserSessionManager.CurrentUser = new UserProfileDto { Id = result.UserId ?? 0, Username = result.Username ?? string.Empty, Role = result.Role ?? "Viewer", Status = "Active" };

                    UserSessionManager.IsLoggedIn = true;
                }
                else
                {
                    ShowMessage(result.ErrorMessage ?? "TĂªn Ä‘Äƒng nháº­p hoáº·c máº­t kháº©u khĂ´ng Ä‘Ăºng!", true);
                    UserSessionManager.IsLoggedIn = false;
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Lá»—i Ä‘Äƒng nháº­p: {ex.Message}", true);
                UserSessionManager.IsLoggedIn = false;
            }
        }

        /// <summary>
        /// Hiá»ƒn thá»‹ thĂ´ng bĂ¡o
        /// </summary>
        private void ShowMessage(string message, bool isError)
        {
            ConsoleRenderingService.ShowMessageBox(message, isError, 2000);
        }

        #endregion
    }
}

