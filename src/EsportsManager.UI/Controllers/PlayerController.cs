// Controller x·ª≠ l√Ω ch·ª©c nƒÉng Player

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Utilities;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;

namespace EsportsManager.UI.Controllers;

public class PlayerController
{
    private readonly UserProfileDto _currentUser;
    private readonly IUserService _userService;
    private readonly ITournamentService _tournamentService;
    private readonly ITeamService _teamService;

    public PlayerController(UserProfileDto currentUser, IUserService userService, ITournamentService tournamentService, ITeamService teamService)
    {
        _currentUser = currentUser;
        _userService = userService;
        _tournamentService = tournamentService;
        _teamService = teamService;
    }

    public void ShowPlayerMenu()
    {
        while (true)
        {
            var menuOptions = new[]
            {
                "ƒêƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u",
                "Qu·∫£n l√Ω team",
                "Xem th√¥ng tin c√° nh√¢n",
                "C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n",
                "Xem danh s√°ch gi·∫£i ƒë·∫•u",
                "G·ª≠i feedback gi·∫£i ƒë·∫•u",
                "Qu·∫£n l√Ω v√≠ ƒëi·ªán t·ª≠",
                "Th√†nh t√≠ch c√° nh√¢n",
                "ƒêƒÉng xu·∫•t"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu($"MENU PLAYER - {_currentUser.Username}", menuOptions); switch (selection)
            {
                case 0:
                    RegisterForTournamentAsync().GetAwaiter().GetResult();
                    break;
                case 1:
                    ManageTeamAsync().GetAwaiter().GetResult();
                    break;
                case 2:
                    ViewPersonalInfoAsync().GetAwaiter().GetResult();
                    break;
                case 3:
                    UpdatePersonalInfoAsync().GetAwaiter().GetResult();
                    break;
                case 4:
                    ViewTournamentListAsync().GetAwaiter().GetResult();
                    break;
                case 5:
                    SubmitTournamentFeedbackAsync().GetAwaiter().GetResult();
                    break;
                case 6:
                    ManageWalletAsync().GetAwaiter().GetResult();
                    break;
                case 7:
                    ViewPlayerAchievementsAsync().GetAwaiter().GetResult();
                    break;
                case 8:
                case -1:
                    return; // ƒêƒÉng xu·∫•t
                default:
                    Console.WriteLine("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                    break;
            }
        }
    }    // UI Methods calling BL Services
    private async Task RegisterForTournamentAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("ƒêƒÇNG K√ù THAM GIA GI·∫¢I ƒê·∫§U", 80, 15);

            var tournaments = await GetAvailableTournamentsAsync();

            if (tournaments.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox("Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o m·ªü ƒëƒÉng k√Ω", false, 2000);
                return;
            }

            Console.WriteLine("üèÜ Danh s√°ch gi·∫£i ƒë·∫•u c√≥ s·∫µn:");
            for (int i = 0; i < tournaments.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {tournaments[i].Name} - Ph√≠: {tournaments[i].EntryFee:N0} VND");
            }

            Console.Write($"\nNh·∫≠p s·ªë th·ª© t·ª± gi·∫£i ƒë·∫•u mu·ªën tham gia (1-{tournaments.Count}): ");
            if (int.TryParse(Console.ReadLine(), out int choice) && choice >= 1 && choice <= tournaments.Count)
            {
                var selectedTournament = tournaments[choice - 1];
                bool success = await RegisterForTournamentAsync(selectedTournament.Id);

                if (success)
                {
                    ConsoleRenderingService.ShowMessageBox($"ƒê√£ ƒëƒÉng k√Ω tham gia '{selectedTournament.Name}' th√†nh c√¥ng!", false, 3000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("ƒêƒÉng k√Ω th·∫•t b·∫°i! B·∫°n c·∫ßn tham gia team tr∆∞·ªõc.", true, 3000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task ManageTeamAsync()
    {
        try
        {
            var myTeam = await GetMyTeamAsync();

            if (myTeam == null)
            {
                // Player ch∆∞a c√≥ team - hi·ªÉn th·ªã option t·∫°o team
                await CreateTeamInteractiveAsync();
            }
            else
            {
                // Player ƒë√£ c√≥ team - hi·ªÉn th·ªã th√¥ng tin team
                ShowTeamInfo(myTeam);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task CreateTeamInteractiveAsync()
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("T·∫†O TEAM M·ªöI", 80, 12);

        Console.Write("T√™n team: ");
        string teamName = Console.ReadLine() ?? "";

        Console.Write("M√¥ t·∫£ team: ");
        string description = Console.ReadLine() ?? "";

        if (string.IsNullOrWhiteSpace(teamName))
        {
            ConsoleRenderingService.ShowMessageBox("T√™n team kh√¥ng ƒë∆∞·ª£c r·ªóng!", true, 2000);
            return;
        }

        try
        {
            var teamDto = new TeamCreateDto
            {
                Name = teamName,
                Description = description
            };

            ConsoleRenderingService.ShowLoadingMessage("ƒêang t·∫°o team...");
            var team = await CreateTeamAsync(teamDto);

            if (team != null)
            {
                ConsoleRenderingService.ShowMessageBox($"T·∫°o team '{teamName}' th√†nh c√¥ng!", false, 3000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("T·∫°o team th·∫•t b·∫°i!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private void ShowTeamInfo(TeamInfoDto team)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder($"TEAM: {team.Name}", 100, 20);
        Console.WriteLine($"üìù M√¥ t·∫£: {team.Description}");
        Console.WriteLine($"üìÖ Ng√†y t·∫°o: {team.CreatedAt:dd/MM/yyyy}");
        Console.WriteLine($"üë• S·ªë th√†nh vi√™n: {team.MemberCount}/{team.MaxMembers}");

        Console.WriteLine("\nPress any key to continue...");
        Console.ReadKey(true);
    }

    private async Task ViewPersonalInfoAsync()
    {
        try
        {
            var userInfo = await GetPersonalInfoAsync();

            if (userInfo == null)
            {
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√° nh√¢n!", true, 2000);
                return;
            }

            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH√îNG TIN C√Å NH√ÇN", 80, 15);

            Console.WriteLine($"üë§ ID: {userInfo.Id}");
            Console.WriteLine($"üìß Username: {userInfo.Username}");
            Console.WriteLine($"‚úâÔ∏è Email: {userInfo.Email ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.WriteLine($"üé≠ Role: {userInfo.Role}");
            Console.WriteLine($"üìÖ Ng√†y t·∫°o: {userInfo.CreatedAt:dd/MM/yyyy HH:mm}");
            Console.WriteLine($"üïê L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi: {userInfo.LastLoginAt?.ToString("dd/MM/yyyy HH:mm") ?? "Ch∆∞a c√≥"}");

            ConsoleRenderingService.PauseWithMessage();
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task UpdatePersonalInfoAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("C·∫¨P NH·∫¨T TH√îNG TIN C√Å NH√ÇN", 80, 15);

            var currentInfo = await GetPersonalInfoAsync();
            if (currentInfo == null)
            {
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin hi·ªán t·∫°i!", true, 2000);
                return;
            }

            Console.WriteLine("Th√¥ng tin hi·ªán t·∫°i:");
            Console.WriteLine($"Email: {currentInfo.Email ?? "Ch∆∞a c√≥"}");
            Console.WriteLine($"H·ªç t√™n: {currentInfo.FullName ?? "Ch∆∞a c√≥"}");
            Console.WriteLine();

            Console.Write("Email m·ªõi (Enter ƒë·ªÉ b·ªè qua): "); string newEmail = Console.ReadLine()?.Trim();

            Console.Write("H·ªç t√™n m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
            string newFullName = Console.ReadLine()?.Trim();

            if (!string.IsNullOrEmpty(newEmail) || !string.IsNullOrEmpty(newFullName))
            {
                var updateDto = new UpdateUserDto
                {
                    Email = !string.IsNullOrEmpty(newEmail) ? newEmail : currentInfo?.Email,
                    FullName = !string.IsNullOrEmpty(newFullName) ? newFullName : currentInfo?.FullName
                };

                ConsoleRenderingService.ShowLoadingMessage("ƒêang c·∫≠p nh·∫≠t...");
                bool success = await UpdatePersonalInfoAsync(updateDto);

                if (success)
                {
                    ConsoleRenderingService.ShowMessageBox("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", false, 3000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("C·∫≠p nh·∫≠t th·∫•t b·∫°i!", true, 2000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c thay ƒë·ªïi!", false, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task ViewTournamentListAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("DANH S√ÅCH GI·∫¢I ƒê·∫§U", 100, 20);

            var tournaments = await GetAllTournamentsAsync();

            if (tournaments.Count == 0)
            {
                ConsoleRenderingService.ShowMessageBox("Hi·ªán t·∫°i kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o", false, 2000);
                return;
            }

            Console.WriteLine($"{"STT",-5} {"T√™n gi·∫£i ƒë·∫•u",-35} {"Tr·∫°ng th√°i",-15} {"Ph√≠ tham gia",-15}");
            Console.WriteLine(new string('=', 70));

            for (int i = 0; i < tournaments.Count; i++)
            {
                var tournament = tournaments[i];
                Console.WriteLine($"{i + 1,-5} {tournament.Name,-35} {tournament.Status,-15} {tournament.EntryFee:N0,-15}");
            }

            Console.WriteLine(new string('=', 70));
            ConsoleRenderingService.PauseWithMessage();
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task SubmitTournamentFeedbackAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("G·ª¨I FEEDBACK GI·∫¢I ƒê·∫§U", 80, 20);

            Console.WriteLine("üìù LO·∫†I FEEDBACK:");
            Console.WriteLine("1. B√°o c√°o l·ªói k·ªπ thu·∫≠t");
            Console.WriteLine("2. G√≥p √Ω c·∫£i thi·ªán");
            Console.WriteLine("3. Khi·∫øu n·∫°i v·ªÅ k·∫øt qu·∫£");

            Console.Write("\nCh·ªçn lo·∫°i feedback (1-3): ");
            if (int.TryParse(Console.ReadLine(), out int type) && type >= 1 && type <= 3)
            {
                Console.Write("Ti√™u ƒë·ªÅ feedback: ");
                string title = Console.ReadLine() ?? "";

                Console.Write("N·ªôi dung chi ti·∫øt: ");
                string content = Console.ReadLine() ?? "";

                if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(content))
                {
                    var feedbackDto = new FeedbackDto
                    {
                        UserId = _currentUser.Id,
                        Content = content,
                        CreatedAt = DateTime.Now
                    };

                    ConsoleRenderingService.ShowLoadingMessage("ƒêang g·ª≠i feedback...");
                    bool success = await SubmitFeedbackAsync(feedbackDto);

                    if (success)
                    {
                        ConsoleRenderingService.ShowMessageBox("Feedback ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!", false, 3000);
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("G·ª≠i feedback th·∫•t b·∫°i!", true, 2000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", true, 2000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task ManageWalletAsync()
    {
        // TODO: Implement wallet management calling BL Wallet Service
        ConsoleRenderingService.ShowMessageBox("üè¶ Ch·ª©c nƒÉng v√≠ ƒëi·ªán t·ª≠ s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi BL WalletService", false, 2000);
    }

    private async Task ViewPlayerAchievementsAsync()
    {
        // TODO: Implement achievements calling BL Achievement Service
        ConsoleRenderingService.ShowMessageBox("üèÜ Ch·ª©c nƒÉng th√†nh t√≠ch s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi BL Achievement Service", false, 2000);
    }
    private void UpdatePersonalInfo()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("C·∫¨P NH·∫¨T TH√îNG TIN C√Å NH√ÇN", 80, 20);

            Console.WriteLine("Th√¥ng tin hi·ªán t·∫°i:");
            Console.WriteLine($"üìß Email: {_currentUser.Email ?? "Ch∆∞a c√≥"}");
            Console.WriteLine($"üë§ H·ªç t√™n: {_currentUser.FullName ?? "Ch∆∞a c√≥"}");
            Console.WriteLine($"üì± S·ªë ƒëi·ªán tho·∫°i: {_currentUser.PhoneNumber ?? "Ch∆∞a c√≥"}");
            Console.WriteLine($"üìù Bio: {_currentUser.Bio ?? "Ch∆∞a c√≥"}");
            Console.WriteLine();

            Console.Write("Email m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
            string newEmail = Console.ReadLine() ?? "";

            Console.Write("H·ªç t√™n m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
            string newFullName = Console.ReadLine() ?? "";

            Console.Write("S·ªë ƒëi·ªán tho·∫°i m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
            string newPhone = Console.ReadLine() ?? "";

            Console.Write("Bio m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
            string newBio = Console.ReadLine() ?? "";

            if (!string.IsNullOrWhiteSpace(newEmail) || !string.IsNullOrWhiteSpace(newFullName) ||
                !string.IsNullOrWhiteSpace(newPhone) || !string.IsNullOrWhiteSpace(newBio))
            {
                ConsoleRenderingService.ShowLoadingMessage("ƒêang c·∫≠p nh·∫≠t th√¥ng tin...");

                // Simulate update process
                System.Threading.Thread.Sleep(2000);

                ConsoleRenderingService.ShowMessageBox("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!\nüí° Ch·ª©c nƒÉng s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi database trong phi√™n b·∫£n ti·∫øp theo", false, 3000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c thay ƒë·ªïi", false, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }
    private void ViewTournamentList()
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("DANH S√ÅCH GI·∫¢I ƒê·∫§U", 100, 20);

        Console.WriteLine($"{"STT",-5} {"T√™n gi·∫£i ƒë·∫•u",-35} {"Tr·∫°ng th√°i",-15} {"Ph√≠ tham gia",-15} {"Gi·∫£i th∆∞·ªüng",-15}");
        Console.WriteLine(new string('=', 90));

        // D·ªØ li·ªáu m·∫´u
        var tournaments = new[]
        {
            ("League of Legends Championship 2025", "ƒêang m·ªü", "50,000", "1,000,000"),
            ("CS:GO Masters Tournament", "S·∫Øp di·ªÖn ra", "30,000", "500,000"),
            ("PUBG Mobile Vietnam Cup", "ƒêang di·ªÖn ra", "25,000", "750,000"),
            ("FIFA Online 4 League", "ƒêang m·ªü", "20,000", "400,000"),
            ("Valorant Premier Series", "S·∫Øp di·ªÖn ra", "40,000", "800,000")
        };

        for (int i = 0; i < tournaments.Length; i++)
        {
            var (name, status, fee, prize) = tournaments[i];
            Console.WriteLine($"{i + 1,-5} {name,-35} {status,-15} {fee,-15} {prize,-15}");
        }

        Console.WriteLine(new string('=', 90));
        Console.WriteLine("\nüí° D·ªØ li·ªáu th·ª±c t·∫ø s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi t·ª´ database trong phi√™n b·∫£n ti·∫øp theo");

        ConsoleRenderingService.PauseWithMessage();
    }
    private void SubmitTournamentFeedback()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("G·ª¨I FEEDBACK GI·∫¢I ƒê·∫§U", 80, 20);

            Console.WriteLine("üìù LO·∫†I FEEDBACK:");
            Console.WriteLine("1. B√°o c√°o l·ªói k·ªπ thu·∫≠t");
            Console.WriteLine("2. G√≥p √Ω c·∫£i thi·ªán");
            Console.WriteLine("3. Khi·∫øu n·∫°i v·ªÅ k·∫øt qu·∫£");
            Console.WriteLine("4. ƒê·ªÅ xu·∫•t t√≠nh nƒÉng m·ªõi");
            Console.WriteLine("5. Ph·∫£n h·ªìi chung");

            Console.Write("\nCh·ªçn lo·∫°i feedback (1-5): ");
            if (int.TryParse(Console.ReadLine(), out int type) && type >= 1 && type <= 5)
            {
                string[] types = { "", "B√°o c√°o l·ªói k·ªπ thu·∫≠t", "G√≥p √Ω c·∫£i thi·ªán", "Khi·∫øu n·∫°i v·ªÅ k·∫øt qu·∫£", "ƒê·ªÅ xu·∫•t t√≠nh nƒÉng m·ªõi", "Ph·∫£n h·ªìi chung" };

                Console.WriteLine($"\nLo·∫°i feedback: {types[type]}");
                Console.Write("Ti√™u ƒë·ªÅ feedback: ");
                string title = Console.ReadLine() ?? "";

                Console.Write("N·ªôi dung chi ti·∫øt: ");
                string content = Console.ReadLine() ?? "";

                if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(content))
                {
                    ConsoleRenderingService.ShowLoadingMessage("ƒêang g·ª≠i feedback...");

                    // Simulate sending process
                    System.Threading.Thread.Sleep(2000);

                    Console.Clear();
                    ConsoleRenderingService.DrawBorder("FEEDBACK ƒê√É G·ª¨I TH√ÄNH C√îNG", 80, 12);
                    Console.WriteLine($"üìã M√£ feedback: FB{DateTime.Now:yyyyMMddHHmm}");
                    Console.WriteLine($"üìÇ Lo·∫°i: {types[type]}");
                    Console.WriteLine($"üìù Ti√™u ƒë·ªÅ: {title}");
                    Console.WriteLine($"‚è∞ Th·ªùi gian: {DateTime.Now:dd/MM/yyyy HH:mm}");
                    Console.WriteLine("\n‚úÖ Feedback c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n!");
                    Console.WriteLine("üí° Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24-48 gi·ªù");

                    ConsoleRenderingService.PauseWithMessage();
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", true, 2000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }
    private void ManageWallet()
    {
        // Mock data cho wallet
        decimal currentBalance = 250000; // Mock s·ªë d∆∞ hi·ªán t·∫°i

        while (true)
        {
            var walletOptions = new[]
            {
                $"Xem s·ªë d∆∞ v√≠ (Hi·ªán t·∫°i: {currentBalance:N0} VND)",
                "N·∫°p ti·ªÅn v√†o v√≠",
                "R√∫t ti·ªÅn t·ª´ v√≠",
                "L·ªãch s·ª≠ giao d·ªãch",
                "Donate cho player kh√°c",
                "Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù V√ç ƒêI·ªÜN T·ª¨", walletOptions);
            switch (selection)
            {
                case 0:
                    ViewWalletBalance(currentBalance);
                    break;
                case 1:
                    currentBalance = DepositMoney(currentBalance);
                    break;
                case 2:
                    currentBalance = WithdrawMoney(currentBalance);
                    break;
                case 3:
                    ViewTransactionHistory();
                    break;
                case 4:
                    DonateMoney(currentBalance);
                    break;
                case 5:
                case -1:
                    return;
                default:
                    Console.WriteLine("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                    break;
            }
        }
    }

    private void ViewWalletBalance(decimal balance)
    {
        Console.Clear();
        int windowWidth = Console.WindowWidth;
        int windowHeight = Console.WindowHeight;
        int boxWidth = Math.Min(50, windowWidth - 6);
        int boxHeight = Math.Min(10, windowHeight - 4);
        int left = Math.Max(1, (windowWidth - boxWidth) / 2);
        int top = Math.Max(1, (windowHeight - boxHeight) / 2);

        ConsoleRenderingService.DrawBorder(left, top, boxWidth, boxHeight, "[S·ªê D∆Ø V√ç]", true);

        Console.SetCursorPosition(left + 3, top + 3);
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine($"S·ªë d∆∞ hi·ªán t·∫°i: {balance:N0} VND");

        Console.SetCursorPosition(left + 3, top + 6);
        Console.ForegroundColor = ConsoleColor.Gray;
        Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");

        Console.ResetColor();
        Console.ReadKey(true);
    }

    private decimal DepositMoney(decimal currentBalance)
    {
        Console.Clear();
        int windowWidth = Console.WindowWidth;
        int windowHeight = Console.WindowHeight;
        int boxWidth = Math.Min(60, windowWidth - 6);
        int boxHeight = Math.Min(12, windowHeight - 4);
        int left = Math.Max(1, (windowWidth - boxWidth) / 2);
        int top = Math.Max(1, (windowHeight - boxHeight) / 2);

        ConsoleRenderingService.DrawBorder(left, top, boxWidth, boxHeight, "[N·∫†P TI·ªÄN V√ÄO V√ç]", true);

        Console.SetCursorPosition(left + 3, top + 3);
        Console.Write($"S·ªë d∆∞ hi·ªán t·∫°i: {currentBalance:N0} VND");

        Console.SetCursorPosition(left + 3, top + 5);
        Console.Write("Nh·∫≠p s·ªë ti·ªÅn mu·ªën n·∫°p (VND): ");

        Console.SetCursorPosition(left + 32, top + 5);
        string? amountStr = UnifiedInputService.ReadText(20, c => char.IsDigit(c));

        if (decimal.TryParse(amountStr, out decimal amount) && amount > 0)
        {
            decimal newBalance = currentBalance + amount;
            ConsoleRenderingService.ShowMessageBox($"N·∫°p ti·ªÅn th√†nh c√¥ng! S·ªë d∆∞ m·ªõi: {newBalance:N0} VND", false, 2000);
            return newBalance;
        }
        else
        {
            ConsoleRenderingService.ShowMessageBox("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", true, 2000);
            return currentBalance;
        }
    }

    private decimal WithdrawMoney(decimal currentBalance)
    {
        Console.Clear();
        int windowWidth = Console.WindowWidth;
        int windowHeight = Console.WindowHeight;
        int boxWidth = Math.Min(60, windowWidth - 6);
        int boxHeight = Math.Min(12, windowHeight - 4);
        int left = Math.Max(1, (windowWidth - boxWidth) / 2);
        int top = Math.Max(1, (windowHeight - boxHeight) / 2);

        ConsoleRenderingService.DrawBorder(left, top, boxWidth, boxHeight, "[R√öT TI·ªÄN T·ª™ V√ç]", true);

        Console.SetCursorPosition(left + 3, top + 3);
        Console.Write($"S·ªë d∆∞ hi·ªán t·∫°i: {currentBalance:N0} VND");

        Console.SetCursorPosition(left + 3, top + 5);
        Console.Write("Nh·∫≠p s·ªë ti·ªÅn mu·ªën r√∫t (VND): ");

        Console.SetCursorPosition(left + 32, top + 5);
        string? amountStr = UnifiedInputService.ReadText(20, c => char.IsDigit(c));

        if (decimal.TryParse(amountStr, out decimal amount) && amount > 0)
        {
            if (amount <= currentBalance)
            {
                decimal newBalance = currentBalance - amount;
                ConsoleRenderingService.ShowMessageBox($"R√∫t ti·ªÅn th√†nh c√¥ng! S·ªë d∆∞ c√≤n l·∫°i: {newBalance:N0} VND", false, 2000);
                return newBalance;
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t!", true, 2000);
                return currentBalance;
            }
        }
        else
        {
            ConsoleRenderingService.ShowMessageBox("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", true, 2000);
            return currentBalance;
        }
    }

    private void ViewTransactionHistory()
    {
        // Mock data cho l·ªãch s·ª≠ giao d·ªãch
        var transactions = new[]
        {
            "15/06/2024 09:30 - N·∫°p ti·ªÅn: +100,000 VND",
            "12/06/2024 14:15 - R√∫t ti·ªÅn: -50,000 VND",
            "10/06/2024 11:20 - Donate: -25,000 VND (‚Üí PlayerXYZ)",
            "08/06/2024 16:45 - N·∫°p ti·ªÅn: +200,000 VND",
            "05/06/2024 13:30 - Ph√≠ gi·∫£i ƒë·∫•u: -30,000 VND"
        };

        Console.Clear();
        int windowWidth = Console.WindowWidth;
        int windowHeight = Console.WindowHeight;
        int boxWidth = Math.Min(70, windowWidth - 6);
        int boxHeight = Math.Min(15, windowHeight - 4);
        int left = Math.Max(1, (windowWidth - boxWidth) / 2);
        int top = Math.Max(1, (windowHeight - boxHeight) / 2);

        ConsoleRenderingService.DrawBorder(left, top, boxWidth, boxHeight, "[L·ªäCH S·ª¨ GIAO D·ªäCH]", true);

        Console.SetCursorPosition(left + 3, top + 3);
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.Write("5 giao d·ªãch g·∫ßn nh·∫•t:");

        for (int i = 0; i < transactions.Length; i++)
        {
            Console.SetCursorPosition(left + 3, top + 5 + i);
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write($"{i + 1}. {transactions[i]}");
        }

        Console.SetCursorPosition(left + 3, top + boxHeight - 3);
        Console.ForegroundColor = ConsoleColor.Gray;
        Console.Write("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");

        Console.ResetColor();
        Console.ReadKey(true);
    }
    private void DonateMoney(decimal currentBalance)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("DONATE TI·ªÄN", 80, 10);
        Console.WriteLine($"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {currentBalance:N0} VND");
        Console.WriteLine("üìä Ch·ª©c nƒÉng donate s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi database");
        Console.WriteLine("üí° Ch·ªçn player/team ƒë·ªÉ donate v√† nh·∫≠p s·ªë ti·ªÅn");
        Console.WriteLine("üîÑ X·ª≠ l√Ω transaction v√† update wallet balance");
        ConsoleRenderingService.PauseWithMessage();
    }
    private void ViewPlayerAchievements()
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("TH√ÄNH T√çCH C√Å NH√ÇN", 80, 20);

        Console.WriteLine($"üèÜ Th√†nh t√≠ch c·ªßa {_currentUser.Username}:");
        Console.WriteLine();

        // D·ªØ li·ªáu m·∫´u th√†nh t√≠ch
        Console.WriteLine("üìä TH·ªêNG K√ä T·ªîNG QUAN:");
        Console.WriteLine($"‚Ä¢ T·ªïng s·ªë gi·∫£i ƒë·∫•u tham gia: 12");
        Console.WriteLine($"‚Ä¢ S·ªë gi·∫£i th·∫Øng: 3");
        Console.WriteLine($"‚Ä¢ T·ª∑ l·ªá th·∫Øng: 25%");
        Console.WriteLine($"‚Ä¢ T·ªïng ti·ªÅn th∆∞·ªüng: 2,500,000 VND");
        Console.WriteLine();

        Console.WriteLine("üèÖ GI·∫¢I TH∆Ø·ªûNG:");
        Console.WriteLine("‚Ä¢ ü•á V√¥ ƒë·ªãch League of Legends Spring 2024");
        Console.WriteLine("‚Ä¢ ü•à √Å qu√¢n CS:GO Summer Championship 2024");
        Console.WriteLine("‚Ä¢ ü•â H·∫°ng 3 PUBG Mobile Winter Cup 2024");
        Console.WriteLine();

        Console.WriteLine("üìà X·∫æP H·∫†NG:");
        Console.WriteLine($"‚Ä¢ H·∫°ng hi·ªán t·∫°i: Diamond III");
        Console.WriteLine($"‚Ä¢ ƒêi·ªÉm ƒë√°nh gi√°: 1,847 points");
        Console.WriteLine($"‚Ä¢ V·ªã tr√≠ trong b·∫£ng x·∫øp h·∫°ng: #127 to√†n qu·ªëc");
        Console.WriteLine();

        Console.WriteLine("üí° D·ªØ li·ªáu th·ª±c t·∫ø s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi t·ª´ database trong phi√™n b·∫£n ti·∫øp theo");
        ConsoleRenderingService.PauseWithMessage();
    }    // Async methods needed by PlayerMenuService - calling BL Services
    public async Task<UserDto?> GetPersonalInfoAsync()
    {
        var result = await _userService.GetUserByIdAsync(_currentUser.Id);
        return result.IsSuccess ? result.Data : null;
    }

    public async Task<bool> UpdatePersonalInfoAsync(UpdateUserDto updateDto)
    {
        // Convert UpdateUserDto to UserDto for the service call
        var userDto = new UserDto
        {
            Id = _currentUser.Id,
            Username = _currentUser.Username,
            Email = updateDto.Email ?? _currentUser.Email,
            FullName = updateDto.FullName,
            Role = _currentUser.Role
        };

        var result = await _userService.UpdateUserProfileAsync(_currentUser.Id, userDto);
        return result.IsSuccess;
    }

    public async Task<bool> ChangePasswordAsync(UpdatePasswordDto passwordDto)
    {
        passwordDto.UserId = _currentUser.Id;
        var result = await _userService.UpdatePasswordAsync(passwordDto);
        return result.IsSuccess;
    }

    public async Task<List<TournamentInfoDto>> GetAllTournamentsAsync()
    {
        return await _tournamentService.GetAllTournamentsAsync();
    }

    public async Task<List<TournamentInfoDto>> GetAvailableTournamentsAsync()
    {
        return await _tournamentService.GetAvailableTournamentsAsync();
    }

    public async Task<bool> RegisterForTournamentAsync(int tournamentId)
    {
        // Get player's team first
        var team = await _teamService.GetPlayerTeamAsync(_currentUser.Id);
        if (team == null)
        {
            return false; // Player needs to be in a team to register
        }

        return await _tournamentService.RegisterTeamForTournamentAsync(tournamentId, team.Id);
    }

    public async Task<TeamInfoDto?> GetMyTeamAsync()
    {
        return await _teamService.GetPlayerTeamAsync(_currentUser.Id);
    }

    public async Task<TeamInfoDto?> CreateTeamAsync(TeamCreateDto teamInfo)
    {
        return await _teamService.CreateTeamAsync(teamInfo, _currentUser.Id);
    }

    public async Task<bool> SubmitFeedbackAsync(FeedbackDto feedback)
    {
        return await _tournamentService.SubmitFeedbackAsync(_currentUser.Id, feedback);
    }
}
