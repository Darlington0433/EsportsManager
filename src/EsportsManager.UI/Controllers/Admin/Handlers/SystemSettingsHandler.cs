using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.Admin.Interfaces;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public class SystemSettingsHandler
{
    private readonly IUserService _userService;
    private readonly ITournamentService _tournamentService;

    public SystemSettingsHandler(IUserService userService, ITournamentService tournamentService)
    {
        _userService = userService;
        _tournamentService = tournamentService;
    }

    public Task SystemSettingsAsync()
    {
        while (true)
        {
            var options = new[]
            {
                "C√†i ƒë·∫∑t h·ªá th·ªëng",
                "Qu·∫£n l√Ω games",
                "C√†i ƒë·∫∑t tournament",
                "C√†i ƒë·∫∑t wallet",
                "Backup & Restore",
                "Xem system logs",
                "Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng",
                "‚¨ÖÔ∏è Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG", options);

            switch (selection)
            {
                case 0:
                    ShowSystemSettingsAsync().GetAwaiter().GetResult();
                    break;
                case 1:
                    ManageGamesAsync().GetAwaiter().GetResult();
                    break;
                case 2:
                    ConfigureTournamentSettingsAsync().GetAwaiter().GetResult();
                    break;
                case 3:
                    ConfigureWalletSettingsAsync().GetAwaiter().GetResult();
                    break;
                case 4:
                    BackupRestoreAsync().GetAwaiter().GetResult();
                    break;
                case 5:
                    ViewSystemLogsAsync().GetAwaiter().GetResult();
                    break;
                case 6:
                    CheckSystemHealthAsync().GetAwaiter().GetResult();
                    break;
                case -1:
                case 7:
                    return Task.CompletedTask;
            }
        }
    }

    public Task ShowSystemSettingsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG", 80, 20);
            
            Console.WriteLine("‚öôÔ∏è C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i c√†i ƒë·∫∑t: {ex.Message}", true, 3000);
        }
        return Task.CompletedTask;
    }

    public Task ManageGamesAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("QU·∫¢N L√ù GAMES", 80, 20);
            
            Console.WriteLine("üéÆ QU·∫¢N L√ù GAMES:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi qu·∫£n l√Ω games: {ex.Message}", true, 3000);
        }
        return Task.CompletedTask;
    }

    public Task ConfigureTournamentSettingsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("C√ÄI ƒê·∫∂T TOURNAMENT", 80, 20);
            
            Console.WriteLine("üèÜ C√ÄI ƒê·∫∂T TOURNAMENT:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi c√†i ƒë·∫∑t tournament: {ex.Message}", true, 3000);
        }
        return Task.CompletedTask;
    }

    public Task ConfigureWalletSettingsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("C√ÄI ƒê·∫∂T WALLET", 80, 20);
            
            Console.WriteLine("üí∞ C√ÄI ƒê·∫∂T WALLET:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi c√†i ƒë·∫∑t wallet: {ex.Message}", true, 3000);
        }
        return Task.CompletedTask;
    }

    public Task BackupRestoreAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("BACKUP & RESTORE", 80, 20);
            
            Console.WriteLine("üíæ BACKUP & RESTORE:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói backup/restore: {ex.Message}", true, 3000);
        }
        return Task.CompletedTask;
    }

    public Task ViewSystemLogsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("SYSTEM LOGS", 80, 20);
            
            Console.WriteLine("üìã SYSTEM LOGS:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi xem logs: {ex.Message}", true, 3000);
        }
        return Task.CompletedTask;
    }

    public Task CheckSystemHealthAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("KI·ªÇM TRA S·ª®C KH·ªéE H·ªÜ TH·ªêNG", 80, 20);
            
            Console.WriteLine("üè• KI·ªÇM TRA S·ª®C KH·ªéE H·ªÜ TH·ªêNG:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi ki·ªÉm tra h·ªá th·ªëng: {ex.Message}", true, 3000);
        }
        return Task.CompletedTask;
    }
}
