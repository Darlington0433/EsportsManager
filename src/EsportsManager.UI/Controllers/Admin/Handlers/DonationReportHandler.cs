using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.Admin.Interfaces;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public interface IDonationReportHandler
{
    Task ViewDonationReportsAsync();
    Task ShowDonationOverviewAsync();
    Task ShowTopDonationReceiversAsync();
    Task ShowTopDonatorsAsync();
    Task ShowDonationHistoryAsync();
    Task SearchDonationsAsync();
}

public class DonationReportHandler : IDonationReportHandler
{
    private readonly IWalletService _walletService;
    private readonly IUserService _userService;

    public DonationReportHandler(IWalletService walletService, IUserService userService)
    {
        _walletService = walletService;
        _userService = userService;
    }

    public async Task ViewDonationReportsAsync()
    {
        while (true)
        {
            var options = new[]
            {
                "T·ªïng quan donation",
                "Top ng∆∞·ªùi nh·∫≠n donation nhi·ªÅu nh·∫•t",
                "Top ng∆∞·ªùi donation nhi·ªÅu nh·∫•t",
                "L·ªãch s·ª≠ donation",
                "T√¨m ki·∫øm donation",
                "‚¨ÖÔ∏è Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("B√ÅO C√ÅO DONATION", options);

            switch (selection)
            {
                case 0:
                    await ShowDonationOverviewAsync();
                    break;
                case 1:
                    await ShowTopDonationReceiversAsync();
                    break;
                case 2:
                    await ShowTopDonatorsAsync();
                    break;
                case 3:
                    await ShowDonationHistoryAsync();
                    break;
                case 4:
                    await SearchDonationsAsync();
                    break;
                case -1:
                case 5:
                    return;
            }
        }
    }

    public async Task ShowDonationOverviewAsync()
    {
        try
        {
            int borderWidth = 80;
            int borderHeight = 20;
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T·ªîNG QUAN DONATION", borderWidth, borderHeight);
            var (left, top, width) = ConsoleRenderingService.GetBorderContentPosition(borderWidth, borderHeight);
            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            Console.SetCursorPosition(left, top);
            Console.WriteLine("ƒêang t·∫£i d·ªØ li·ªáu...".PadRight(width));
            // L·∫•y d·ªØ li·ªáu t·ª´ service
            var overview = await _walletService.GetDonationOverviewAsync();
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T·ªîNG QUAN DONATION", borderWidth, borderHeight);
            (left, top, width) = ConsoleRenderingService.GetBorderContentPosition(borderWidth, borderHeight);
            // Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
            string[] lines = {
                "üìä TH·ªêNG K√ä DONATION:",
                new string('‚îÄ', Math.Min(50, width)),
                $"üí∞ T·ªïng s·ªë donation: {overview.TotalDonations:N0} l∆∞·ª£t",
                $"üéØ S·ªë ng∆∞·ªùi nh·∫≠n donation: {overview.TotalReceivers:N0}",
                $"üë• S·ªë ng∆∞·ªùi donation: {overview.TotalDonators:N0}",
                $"üìà T·ªïng gi√° tr·ªã: {overview.TotalDonationAmount:N0} VND",
                $"‚è±Ô∏è C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {overview.LastUpdated:dd/MM/yyyy HH:mm:ss}",
                "",
                "üìä TH·ªêNG K√ä THEO LO·∫†I:",
                new string('‚îÄ', Math.Min(50, width))
            };
            for (int i = 0; i < lines.Length; i++)
            {
                Console.SetCursorPosition(left, top + i);
                Console.WriteLine(lines[i].Length > width ? lines[i].Substring(0, width) : lines[i].PadRight(width));
            }
            int row = top + lines.Length;
            foreach (var item in overview.DonationByType)
            {
                string type = item.Key == "Tournament" ? "Gi·∫£i ƒë·∫•u" : item.Key == "Team" ? "ƒê·ªôi" : item.Key;
                string line = $"- {type}: {item.Value:N0} VND";
                Console.SetCursorPosition(left, row++);
                Console.WriteLine(line.Length > width ? line.Substring(0, width) : line.PadRight(width));
            }
            Console.SetCursorPosition(left, row + 1);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...".PadRight(width));
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
            string errorMessage = ex.Message;
            string suggestion = "";

            if (ex.Message.Contains("doesn't exist") || ex.Message.Contains("does not exist"))
            {
                suggestion = "\n\nüí° H∆Ø·ªöNG D·∫™N S·ª¨A L·ªñI:\n" +
                           "1. M·ªü MySQL Workbench\n" +
                           "2. Ch·∫°y file: database/DONATION_QUICK_FIX.sql\n" +
                           "3. Ho·∫∑c xem h∆∞·ªõng d·∫´n trong: S·ª¨A_L·ªñI_DONATION_NHANH.md";
            }
            else if (ex.Message.Contains("connection") || ex.Message.Contains("database"))
            {
                suggestion = "\n\nüí° KI·ªÇM TRA:\n" +
                           "1. MySQL server ƒëang ch·∫°y?\n" +
                           "2. Database 'EsportsManager' ƒë√£ t·ªìn t·∫°i?\n" +
                           "3. Th√¥ng tin k·∫øt n·ªëi ƒë√∫ng?";
            }

            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i t·ªïng quan donation: {ex.Message}{suggestion}", true, 5000);
        }
    }

    public async Task ShowTopDonationReceiversAsync()
    {
        try
        {
            int borderWidth = 80;
            int borderHeight = 20;
            int maxRows = 10;
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI NH·∫¨N DONATION", borderWidth, borderHeight);
            var (left, top, width) = ConsoleRenderingService.GetBorderContentPosition(borderWidth, borderHeight);
            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            Console.SetCursorPosition(left, top);
            Console.WriteLine("ƒêang t·∫£i d·ªØ li·ªáu...".PadRight(width));
            // L·∫•y data t·ª´ service (m·∫∑c ƒë·ªãnh l√† 10 ng∆∞·ªùi)
            var topReceivers = await _walletService.GetTopDonationReceiversAsync();
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI NH·∫¨N DONATION", borderWidth, borderHeight);
            (left, top, width) = ConsoleRenderingService.GetBorderContentPosition(borderWidth, borderHeight);
            // Header
            var header = string.Format("{0,5} {1,-15} {2,-10} {3,12} {4,15} {5,20}",
                "H·∫°ng", "T√™n", "Lo·∫°i", "S·ªë donation", "T·ªïng ti·ªÅn", "Donation g·∫ßn nh·∫•t");
            Console.SetCursorPosition(left, top);
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(header.Length > width ? header.Substring(0, width) : header.PadRight(width));
            Console.SetCursorPosition(left, top + 1);
            Console.WriteLine(new string('‚îÄ', header.Length));
            int rank = 1;
            int row = top + 2;
            foreach (var receiver in topReceivers.Take(maxRows))
            {
                string formattedName = receiver.Username.Length > 15 ? receiver.Username.Substring(0, 12) + "..." : receiver.Username;
                string formattedType = receiver.UserType == "Tournament" ? "Gi·∫£i ƒë·∫•u" : receiver.UserType == "Team" ? "ƒê·ªôi" : receiver.UserType;
                var line = string.Format("{0,5} {1,-15} {2,-10} {3,12} {4,15:N0} {5,20:dd/MM/yyyy HH:mm}",
                    rank, formattedName, formattedType, receiver.DonationCount, receiver.TotalAmount, receiver.LastDonation);
                Console.SetCursorPosition(left, row++);
                Console.WriteLine(line.Length > width ? line.Substring(0, width) : line.PadRight(width));
                rank++;
            }
            Console.ResetColor();
            Console.SetCursorPosition(left, row + 1);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...".PadRight(width));
            Console.SetCursorPosition(0, row + borderHeight + 2);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            string suggestion = ex.Message.Contains("doesn't exist") || ex.Message.Contains("does not exist")
                ? "\n\nüí° Ch·∫°y file: database/DONATION_FIX_COMPLETE.sql ƒë·ªÉ s·ª≠a l·ªói"
                : "";
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i top ng∆∞·ªùi nh·∫≠n: {ex.Message}{suggestion}", true, 4000);
        }
    }

    public async Task ShowTopDonatorsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI DONATION", 80, 20);

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            Console.WriteLine("ƒêang t·∫£i d·ªØ li·ªáu...");

            // L·∫•y data t·ª´ service (m·∫∑c ƒë·ªãnh l√† 10 ng∆∞·ªùi)
            var topDonators = await _walletService.GetTopDonatorsAsync();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI DONATION", 80, 20);

            Console.WriteLine("üéñÔ∏è TOP NG∆Ø·ªúI DONATION NHI·ªÄU NH·∫§T:");
            Console.WriteLine(new string('‚ïê', 70));
            Console.WriteLine($"{"H·∫°ng",5} {"Username",15} {"S·ªë donation",12} {"T·ªïng ti·ªÅn",15} {"Donation g·∫ßn nh·∫•t",20}");
            Console.WriteLine(new string('‚ïê', 70));

            int rank = 1;
            foreach (var donator in topDonators)
            {
                string formattedName = donator.Username.Length > 15
                    ? donator.Username.Substring(0, 12) + "..."
                    : donator.Username;

                Console.WriteLine($"{rank,5} {formattedName,-15} {donator.DonationCount,12} " +
                                 $"{donator.TotalAmount,15:N0} {donator.LastDonation,20:dd/MM/yyyy HH:mm}");
                rank++;
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.SetCursorPosition(0, 22);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            string suggestion = ex.Message.Contains("doesn't exist") || ex.Message.Contains("does not exist")
                ? "\n\nüí° Ch·∫°y file: database/DONATION_FIX_COMPLETE.sql ƒë·ªÉ s·ª≠a l·ªói"
                : "";
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i top ng∆∞·ªùi donation: {ex.Message}{suggestion}", true, 4000);
        }
    }

    public async Task ShowDonationHistoryAsync()
    {
        try
        {
            int currentPage = 1;
            int pageSize = 10; // TƒÉng s·ªë l∆∞·ª£ng record ƒë·ªÉ hi·ªÉn th·ªã nhi·ªÅu h∆°n
            bool viewingHistory = true;
            var filter = new DonationSearchFilterDto
            {
                PageNumber = currentPage,
                PageSize = pageSize
            };

            while (viewingHistory)
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("L·ªäCH S·ª¨ DONATION", 100, 30);

                Console.WriteLine("üîÑ ƒêang t·∫£i d·ªØ li·ªáu...");

                // L·∫•y l·ªãch s·ª≠ donation
                var donations = await _walletService.GetDonationHistoryAsync(filter);

                Console.Clear();
                ConsoleRenderingService.DrawBorder("L·ªäCH S·ª¨ DONATION", 100, 30);

                // Hi·ªÉn th·ªã th√¥ng tin filter hi·ªán t·∫°i (n·∫øu c√≥)
                string filterInfo = GetFilterInfoString(filter);
                if (!string.IsNullOrEmpty(filterInfo))
                {
                    Console.WriteLine($"ÔøΩ B·ªô l·ªçc hi·ªán t·∫°i: {filterInfo}");
                    Console.WriteLine();
                }

                Console.WriteLine("üìö DANH S√ÅCH DONATION:");
                Console.WriteLine(new string('‚ïê', 95));
                Console.WriteLine($"{"ID",5} {"Ng∆∞·ªùi d√πng",15} {"S·ªë ti·ªÅn",12} {"ƒê·ªëi t∆∞·ª£ng",18} {"Th·ªùi gian",18} {"Ghi ch√∫",25}");
                Console.WriteLine(new string('‚îÄ', 95));

                if (!donations.Any())
                {
                    Console.WriteLine("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu donation n√†o ƒë·ªÉ hi·ªÉn th·ªã.");
                    Console.WriteLine("\nC√≥ th·ªÉ do:");
                    Console.WriteLine("- Ch∆∞a c√≥ donation n√†o trong h·ªá th·ªëng");
                    Console.WriteLine("- B·ªô l·ªçc qu√° nghi√™m ng·∫∑t");
                    Console.WriteLine("- Database ch∆∞a c√≥ d·ªØ li·ªáu m·∫´u");
                }
                else
                {
                    foreach (var donation in donations)
                    {
                        // Hi·ªÉn th·ªã th√¥ng tin donation v·ªõi format ƒë·∫πp h∆°n
                        string formattedUser = donation.Username.Length > 15
                            ? donation.Username.Substring(0, 12) + "..."
                            : donation.Username;

                        string targetType = donation.RelatedEntityType switch
                        {
                            "Tournament" => "üèÜ",
                            "Team" => "üë•",
                            "Player" => "üéÆ",
                            _ => "‚ùì"
                        };

                        string target = $"{targetType}{donation.RelatedEntityType} #{donation.RelatedEntityId}";
                        if (target.Length > 18)
                            target = target.Substring(0, 15) + "...";

                        string note = donation.Note?.Length > 25
                            ? donation.Note.Substring(0, 22) + "..."
                            : donation.Note ?? "Kh√¥ng c√≥ ghi ch√∫";

                        // M√†u s·∫Øc cho s·ªë ti·ªÅn (d√πng emoji)
                        string amountDisplay = donation.Amount >= 500 ? $"üí∞{Math.Abs(donation.Amount):N0}" : $"{Math.Abs(donation.Amount):N0}";

                        Console.WriteLine($"{donation.Id,5} {formattedUser,-15} {amountDisplay,12} " +
                                         $"{target,-18} {donation.CreatedAt,18:dd/MM HH:mm} {note,-25}");
                    }
                }

                Console.WriteLine(new string('‚ïê', 95));
                
                // Th√¥ng tin ph√¢n trang v√† l·ª±a ch·ªçn
                Console.WriteLine($"üìÑ Trang {currentPage} | Hi·ªÉn th·ªã {donations.Count} donation");
                Console.WriteLine();
                Console.WriteLine("üéÆ ƒêI·ªÄU KHI·ªÇN:");
                Console.WriteLine("- [‚óÄ P] Trang tr∆∞·ªõc    [N ‚ñ∂] Trang ti·∫øp theo    [D] Chi ti·∫øt donation");
                Console.WriteLine("- [F] Th√™m b·ªô l·ªçc      [C] X√≥a b·ªô l·ªçc          [R] L√†m m·ªõi d·ªØ li·ªáu");
                Console.WriteLine("- [S] Th·ªëng k√™         [Q] Quay l·∫°i menu ch√≠nh");

                // X·ª≠ l√Ω c√°c l·ª±a ch·ªçn ƒëi·ªÅu h∆∞·ªõng
                var key = Console.ReadKey(true);
                switch (key.Key)
                {
                    case ConsoleKey.P: // Previous page
                        if (currentPage > 1)
                        {
                            currentPage--;
                            filter.PageNumber = currentPage;
                        }
                        else
                        {
                            ConsoleRenderingService.ShowMessageBox("ƒê√£ ·ªü trang ƒë·∫ßu ti√™n!", false, 1000);
                        }
                        break;

                    case ConsoleKey.N: // Next page
                        if (donations.Count == pageSize) // N·∫øu ƒë·ªß items, kh·∫£ nƒÉng c√≥ trang ti·∫øp theo
                        {
                            currentPage++;
                            filter.PageNumber = currentPage;
                        }
                        else
                        {
                            ConsoleRenderingService.ShowMessageBox("ƒê√£ ·ªü trang cu·ªëi c√πng!", false, 1000);
                        }
                        break;

                    case ConsoleKey.D: // View details
                        if (donations.Any())
                        {
                            await PromptForDonationDetails(donations);
                        }
                        else
                        {
                            ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ donation n√†o ƒë·ªÉ xem chi ti·∫øt!", true, 2000);
                        }
                        break;

                    case ConsoleKey.F: // Add filter
                        SetupFilters(filter);
                        currentPage = 1; // Reset v·ªÅ trang 1 khi thay ƒë·ªïi filter
                        filter.PageNumber = currentPage;
                        break;

                    case ConsoleKey.C: // Clear filters
                        filter = new DonationSearchFilterDto
                        {
                            PageNumber = 1,
                            PageSize = pageSize
                        };
                        currentPage = 1;
                        ConsoleRenderingService.ShowMessageBox("ƒê√£ x√≥a t·∫•t c·∫£ b·ªô l·ªçc!", false, 1500);
                        break;

                    case ConsoleKey.R: // Refresh
                        ConsoleRenderingService.ShowMessageBox("ƒêang l√†m m·ªõi d·ªØ li·ªáu...", false, 1000);
                        break;

                    case ConsoleKey.S: // Statistics
                        ShowQuickStats(donations);
                        break;

                    case ConsoleKey.Q: // Quit
                        viewingHistory = false;
                        break;

                    default:
                        ConsoleRenderingService.ShowMessageBox("Ph√≠m kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i!", true, 1000);
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            string errorSuggestion = ex.Message.Contains("doesn't exist") || ex.Message.Contains("does not exist")
                ? "\n\nüí° GI·∫¢I PH√ÅP:\n1. Ch·∫°y file: database/DONATION_HISTORY_FIX.sql\n2. Ki·ªÉm tra stored procedure sp_GetDonationHistory"
                : ex.Message.Contains("connection")
                ? "\n\nüí° KI·ªÇM TRA:\n1. MySQL server ƒëang ch·∫°y?\n2. Th√¥ng tin k·∫øt n·ªëi ƒë√∫ng?"
                : "";

            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i l·ªãch s·ª≠ donation: {ex.Message}{errorSuggestion}", true, 5000);
        }
    }

    // Helper method ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin filter
    private string GetFilterInfoString(DonationSearchFilterDto filter)
    {
        var filterParts = new List<string>();

        if (!string.IsNullOrEmpty(filter.Username))
            filterParts.Add($"User: {filter.Username}");
        if (filter.TeamId.HasValue)
            filterParts.Add($"Team ID: {filter.TeamId}");
        if (filter.TournamentId.HasValue)
            filterParts.Add($"Tournament ID: {filter.TournamentId}");
        if (!string.IsNullOrEmpty(filter.DonationType))
            filterParts.Add($"Type: {filter.DonationType}");
        if (filter.MinAmount.HasValue)
            filterParts.Add($"Min: {filter.MinAmount:N0}");
        if (filter.MaxAmount.HasValue)
            filterParts.Add($"Max: {filter.MaxAmount:N0}");
        if (filter.FromDate.HasValue)
            filterParts.Add($"T·ª´: {filter.FromDate:dd/MM/yyyy}");
        if (filter.ToDate.HasValue)
            filterParts.Add($"ƒê·∫øn: {filter.ToDate:dd/MM/yyyy}");

        return filterParts.Any() ? string.Join(" | ", filterParts) : "";
    }

    // Helper method ƒë·ªÉ prompt cho vi·ªác xem chi ti·∫øt donation
    private async Task PromptForDonationDetails(List<TransactionDto> donations)
    {
        Console.WriteLine("\nüîç Nh·∫≠p ID donation ƒë·ªÉ xem chi ti·∫øt:");
        Console.WriteLine($"   (C√≥ th·ªÉ ch·ªçn t·ª´: {string.Join(", ", donations.Take(5).Select(d => d.Id))})");
        Console.Write("   ID: ");
        
        string input = Console.ReadLine() ?? "";

        if (!string.IsNullOrEmpty(input) && int.TryParse(input, out int donationId))
        {
            if (donations.Any(d => d.Id == donationId))
            {
                await ShowDonationDetailsAsync(donationId);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox($"ID {donationId} kh√¥ng c√≥ trong trang hi·ªán t·∫°i!", true, 2000);
            }
        }
        else if (!string.IsNullOrEmpty(input))
        {
            ConsoleRenderingService.ShowMessageBox("ID kh√¥ng h·ª£p l·ªá!", true, 1500);
        }
    }

    // Helper method ƒë·ªÉ setup filters
    private void SetupFilters(DonationSearchFilterDto filter)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("THI·∫æT L·∫¨P B·ªò L·ªåC", 70, 20);

        Console.WriteLine("üîç Thi·∫øt l·∫≠p b·ªô l·ªçc cho l·ªãch s·ª≠ donation:");
        Console.WriteLine("(Nh·∫•n Enter ƒë·ªÉ gi·ªØ gi√° tr·ªã hi·ªán t·∫°i ho·∫∑c b·ªè qua)");
        Console.WriteLine();

        // Username filter
        Console.WriteLine($"üë§ T√™n ng∆∞·ªùi d√πng hi·ªán t·∫°i: {filter.Username ?? "T·∫•t c·∫£"}");
        Console.Write("   Nh·∫≠p t√™n m·ªõi: ");
        var username = Console.ReadLine() ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(username))
            filter.Username = username;

        // Amount range
        Console.WriteLine($"üí∞ Kho·∫£ng s·ªë ti·ªÅn hi·ªán t·∫°i: {filter.MinAmount:N0} - {filter.MaxAmount:N0}");
        Console.Write("   S·ªë ti·ªÅn t·ªëi thi·ªÉu: ");
        var minAmount = Console.ReadLine() ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(minAmount) && decimal.TryParse(minAmount, out decimal min))
            filter.MinAmount = min;

        Console.Write("   S·ªë ti·ªÅn t·ªëi ƒëa: ");
        var maxAmount = Console.ReadLine() ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(maxAmount) && decimal.TryParse(maxAmount, out decimal max))
            filter.MaxAmount = max;

        // Date range
        Console.WriteLine($"üìÖ Kho·∫£ng th·ªùi gian hi·ªán t·∫°i: {filter.FromDate:dd/MM/yyyy} - {filter.ToDate:dd/MM/yyyy}");
        Console.Write("   T·ª´ ng√†y (dd/MM/yyyy): ");
        var fromDate = Console.ReadLine() ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(fromDate) && DateTime.TryParse(fromDate, out DateTime from))
            filter.FromDate = from;

        Console.Write("   ƒê·∫øn ng√†y (dd/MM/yyyy): ");
        var toDate = Console.ReadLine() ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(toDate) && DateTime.TryParse(toDate, out DateTime to))
            filter.ToDate = to;

        ConsoleRenderingService.ShowMessageBox("ƒê√£ √°p d·ª•ng b·ªô l·ªçc m·ªõi!", false, 1500);
    }

    // Helper method ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™ nhanh
    private void ShowQuickStats(List<TransactionDto> donations)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä NHANH", 60, 15);

        if (!donations.Any())
        {
            Console.WriteLine("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™.");
            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
            return;
        }

        Console.WriteLine("üìä TH·ªêNG K√ä TRANG HI·ªÜN T·∫†I:");
        Console.WriteLine(new string('‚îÄ', 50));
        Console.WriteLine($"üí∞ T·ªïng s·ªë donation    : {donations.Count}");
        Console.WriteLine($"üìà T·ªïng s·ªë ti·ªÅn        : {donations.Sum(d => Math.Abs(d.Amount)):N0} VND");
        Console.WriteLine($"üìä S·ªë ti·ªÅn trung b√¨nh  : {donations.Average(d => Math.Abs(d.Amount)):N0} VND");
        Console.WriteLine($"üèÜ Donation cao nh·∫•t   : {donations.Max(d => Math.Abs(d.Amount)):N0} VND");
        Console.WriteLine($"üíé Donation th·∫•p nh·∫•t  : {donations.Min(d => Math.Abs(d.Amount)):N0} VND");

        // Th·ªëng k√™ theo lo·∫°i
        var byType = donations.GroupBy(d => d.RelatedEntityType ?? "Unknown");
        Console.WriteLine("\nüéØ THEO LO·∫†I ƒê·ªêI T∆Ø·ª¢NG:");
        foreach (var group in byType)
        {
            string typeName = group.Key switch
            {
                "Tournament" => "üèÜ Gi·∫£i ƒë·∫•u",
                "Team" => "üë• ƒê·ªôi",
                "Player" => "üéÆ Ng∆∞·ªùi ch∆°i",
                _ => "‚ùì Kh√°c"
            };
            Console.WriteLine($"   {typeName}: {group.Count()} donation ({group.Sum(d => Math.Abs(d.Amount)):N0} VND)");
        }

        Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        Console.ReadKey(true);
    }

    // Helper method ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt m·ªôt donation
    private async Task ShowDonationDetailsAsync(int donationId)
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder($"CHI TI·∫æT DONATION #{donationId}", 80, 20);

            Console.WriteLine("ƒêang t·∫£i th√¥ng tin chi ti·∫øt...");

            // T√¨m donation theo ID hi·ªáu qu·∫£ h∆°n
            var filter = new DonationSearchFilterDto
            {
                PageNumber = 1,
                PageSize = 1000 // L·∫•y nhi·ªÅu ƒë·ªÉ t√¨m
            };
            var allDonations = await _walletService.GetDonationHistoryAsync(filter);
            var donation = allDonations.FirstOrDefault(d => d.Id == donationId);

            Console.Clear();
            ConsoleRenderingService.DrawBorder($"CHI TI·∫æT DONATION #{donationId}", 80, 25);

            if (donation == null)
            {
                Console.WriteLine($"‚ùå Kh√¥ng t√¨m th·∫•y donation v·ªõi ID {donationId}");
                Console.WriteLine("\nC√≥ th·ªÉ donation n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
                Console.ReadKey(true);
                return;
            }

            // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt ƒë·∫πp h∆°n
            Console.WriteLine("üí∞ TH√îNG TIN CHI TI·∫æT DONATION:");
            Console.WriteLine(new string('‚îÄ', 60));
            Console.WriteLine($"üìã ID giao d·ªãch      : {donation.Id}");
            Console.WriteLine($"üîó M√£ tham chi·∫øu     : {donation.ReferenceCode ?? "N/A"}");
            Console.WriteLine($"üë§ Ng∆∞·ªùi donation    : {donation.Username} (ID: {donation.UserId})");
            Console.WriteLine($"üíµ S·ªë ti·ªÅn           : {Math.Abs(donation.Amount):N0} VND");
            Console.WriteLine($"üìÖ Th·ªùi gian         : {donation.CreatedAt:dd/MM/yyyy HH:mm:ss}");
            Console.WriteLine($"üìä Tr·∫°ng th√°i        : {donation.Status}");

            string targetType = donation.RelatedEntityType switch
            {
                "Tournament" => "üèÜ Gi·∫£i ƒë·∫•u",
                "Team" => "üë• ƒê·ªôi",
                "Player" => "üéÆ Ng∆∞·ªùi ch∆°i",
                _ => "‚ùì Kh√¥ng x√°c ƒë·ªãnh"
            };

            Console.WriteLine($"üéØ ƒê·ªëi t∆∞·ª£ng         : {targetType} (ID: {donation.RelatedEntityId})");
            Console.WriteLine($"üìù Ghi ch√∫           : {donation.Note ?? "Kh√¥ng c√≥ ghi ch√∫"}");

            Console.WriteLine(new string('‚îÄ', 60));
            
            // Th√™m th√¥ng tin ph√¢n t√≠ch
            Console.WriteLine("\nüìà PH√ÇN T√çCH:");
            var donationTime = donation.CreatedAt;
            var timeAgo = DateTime.Now - donationTime;
            
            string timeAgoText = timeAgo.TotalDays >= 1 
                ? $"{(int)timeAgo.TotalDays} ng√†y tr∆∞·ªõc"
                : timeAgo.TotalHours >= 1 
                    ? $"{(int)timeAgo.TotalHours} gi·ªù tr∆∞·ªõc"
                    : $"{(int)timeAgo.TotalMinutes} ph√∫t tr∆∞·ªõc";
                    
            Console.WriteLine($"‚è±Ô∏è Th·ªùi gian t·ª´ khi donation: {timeAgoText}");
            
            // Ph√¢n lo·∫°i s·ªë ti·ªÅn
            string amountCategory = donation.Amount switch
            {
                <= 50 => "üíé Donation nh·ªè",
                <= 200 => "üí∞ Donation trung b√¨nh",
                <= 500 => "üèÜ Donation l·ªõn",
                _ => "üëë Donation kh·ªßng"
            };
            Console.WriteLine($"üí∏ M·ª©c ƒë·ªô: {amountCategory}");

            Console.WriteLine("\nüìã L·ª∞A CH·ªåN:");
            Console.WriteLine("- [R] Xem donation li√™n quan c·ªßa user n√†y");
            Console.WriteLine("- [H] Xem l·ªãch s·ª≠ donation c·ªßa ƒë·ªëi t∆∞·ª£ng n√†y");
            Console.WriteLine("- [Enter] Quay l·∫°i danh s√°ch");

            var key = Console.ReadKey(true);
            switch (key.Key)
            {
                case ConsoleKey.R:
                    await ShowUserRelatedDonationsAsync(donation.UserId, donation.Username);
                    break;
                case ConsoleKey.H:
                    await ShowTargetDonationHistoryAsync(donation.RelatedEntityType, donation.RelatedEntityId);
                    break;
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi hi·ªÉn th·ªã chi ti·∫øt donation: {ex.Message}", true, 3000);
        }
    }

    // Helper method ƒë·ªÉ hi·ªÉn th·ªã donation li√™n quan c·ªßa user
    private async Task ShowUserRelatedDonationsAsync(int userId, string username)
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder($"DONATION C·ª¶A {username.ToUpper()}", 80, 20);

            var filter = new DonationSearchFilterDto
            {
                UserId = userId,
                PageNumber = 1,
                PageSize = 10
            };

            var userDonations = await _walletService.GetDonationHistoryAsync(filter);

            Console.WriteLine($"üìä L·ªäCH S·ª¨ DONATION C·ª¶A {username}:");
            Console.WriteLine(new string('‚îÄ', 70));
            Console.WriteLine($"{"ID",5} {"S·ªë ti·ªÅn",12} {"ƒê·ªëi t∆∞·ª£ng",20} {"Th·ªùi gian",20}");
            Console.WriteLine(new string('‚îÄ', 70));

            foreach (var donation in userDonations)
            {
                string target = $"{donation.RelatedEntityType} #{donation.RelatedEntityId}";
                Console.WriteLine($"{donation.Id,5} {Math.Abs(donation.Amount),12:N0} {target,-20} {donation.CreatedAt,20:dd/MM/yyyy HH:mm}");
            }

            Console.WriteLine($"\nT·ªïng {userDonations.Count} donation ƒë∆∞·ª£c hi·ªÉn th·ªã.");
            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi hi·ªÉn th·ªã donation c·ªßa user: {ex.Message}", true, 3000);
        }
    }

    // Helper method ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ donation c·ªßa ƒë·ªëi t∆∞·ª£ng
    private async Task ShowTargetDonationHistoryAsync(string? entityType, int? entityId)
    {
        try
        {
            if (string.IsNullOrEmpty(entityType) || !entityId.HasValue)
            {
                ConsoleRenderingService.ShowMessageBox("Th√¥ng tin ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá", true, 2000);
                return;
            }

            Console.Clear();
            ConsoleRenderingService.DrawBorder($"DONATION CHO {entityType.ToUpper()} #{entityId}", 80, 20);

            var filter = new DonationSearchFilterDto
            {
                DonationType = entityType,
                PageNumber = 1,
                PageSize = 10
            };

            if (entityType == "Team")
                filter.TeamId = entityId.Value;
            else if (entityType == "Tournament")
                filter.TournamentId = entityId.Value;

            var targetDonations = await _walletService.GetDonationHistoryAsync(filter);

            Console.WriteLine($"üéØ DONATION CHO {entityType} #{entityId}:");
            Console.WriteLine(new string('‚îÄ', 70));
            Console.WriteLine($"{"ID",5} {"Ng∆∞·ªùi donation",15} {"S·ªë ti·ªÅn",12} {"Th·ªùi gian",20}");
            Console.WriteLine(new string('‚îÄ', 70));

            decimal totalAmount = 0;
            foreach (var donation in targetDonations.Where(d => d.RelatedEntityId == entityId))
            {
                Console.WriteLine($"{donation.Id,5} {donation.Username,-15} {Math.Abs(donation.Amount),12:N0} {donation.CreatedAt,20:dd/MM/yyyy HH:mm}");
                totalAmount += Math.Abs(donation.Amount);
            }

            Console.WriteLine(new string('‚îÄ', 70));
            Console.WriteLine($"üìä T·ªïng s·ªë donation: {targetDonations.Count(d => d.RelatedEntityId == entityId)}");
            Console.WriteLine($"üí∞ T·ªïng s·ªë ti·ªÅn: {totalAmount:N0} VND");
            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi hi·ªÉn th·ªã donation c·ªßa ƒë·ªëi t∆∞·ª£ng: {ex.Message}", true, 3000);
        }
    }

    public async Task SearchDonationsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T√åM KI·∫æM DONATION", 80, 20);

            // T·∫°o filter m·ªõi ƒë·ªÉ t√¨m ki·∫øm
            var filter = new DonationSearchFilterDto
            {
                PageNumber = 1,
                PageSize = 10
            };

            Console.WriteLine("üîç T√åM KI·∫æM DONATION:");
            Console.WriteLine("(Nh·∫•n Enter ƒë·ªÉ b·ªè qua tr∆∞·ªùng kh√¥ng c·∫ßn t√¨m ki·∫øm)");
            Console.WriteLine();

            // Thu th·∫≠p th√¥ng tin t√¨m ki·∫øm t·ª´ ng∆∞·ªùi d√πng
            Console.Write("T√™n ng∆∞·ªùi d√πng: ");
            string username = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(username))
                filter.Username = username;

            Console.Write("ID ƒë·ªôi (n·∫øu c√≥): ");
            string teamIdInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(teamIdInput) && int.TryParse(teamIdInput, out int teamId))
                filter.TeamId = teamId;

            Console.Write("ID gi·∫£i ƒë·∫•u (n·∫øu c√≥): ");
            string tournamentIdInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(tournamentIdInput) && int.TryParse(tournamentIdInput, out int tournamentId))
                filter.TournamentId = tournamentId;

            Console.Write("Lo·∫°i donation (Team/Tournament): ");
            string typeInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(typeInput))
            {
                if (typeInput.Equals("team", StringComparison.OrdinalIgnoreCase))
                    filter.DonationType = "Team";
                else if (typeInput.Equals("tournament", StringComparison.OrdinalIgnoreCase))
                    filter.DonationType = "Tournament";
            }

            Console.Write("S·ªë ti·ªÅn t·ªëi thi·ªÉu: ");
            string minAmountInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(minAmountInput) && decimal.TryParse(minAmountInput, out decimal minAmount))
                filter.MinAmount = minAmount;

            Console.Write("S·ªë ti·ªÅn t·ªëi ƒëa: ");
            string maxAmountInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(maxAmountInput) && decimal.TryParse(maxAmountInput, out decimal maxAmount))
                filter.MaxAmount = maxAmount;

            Console.Write("T·ª´ ng√†y (dd/MM/yyyy): ");
            string fromDateInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(fromDateInput) && DateTime.TryParse(fromDateInput, out DateTime fromDate))
                filter.FromDate = fromDate;

            Console.Write("ƒê·∫øn ng√†y (dd/MM/yyyy): ");
            string toDateInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(toDateInput) && DateTime.TryParse(toDateInput, out DateTime toDate))
                filter.ToDate = toDate;

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t√¨m ki·∫øm
            Console.WriteLine("\nƒêang t√¨m ki·∫øm...");

            // Th·ª±c hi·ªán t√¨m ki·∫øm
            var results = await _walletService.SearchDonationsAsync(filter);

            Console.Clear();
            ConsoleRenderingService.DrawBorder("K·∫æT QU·∫¢ T√åM KI·∫æM DONATION", 90, 25);

            if (!results.Any())
            {
                Console.WriteLine("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm.");
            }
            else
            {
                Console.WriteLine($"ƒê√£ t√¨m th·∫•y {results.Count} k·∫øt qu·∫£:");
                Console.WriteLine(new string('‚îÄ', 80));
                Console.WriteLine($"{"ID",5} {"Ng∆∞·ªùi d√πng",15} {"S·ªë ti·ªÅn",12} {"ƒê·ªëi t∆∞·ª£ng",15} {"Th·ªùi gian",20} {"Ghi ch√∫",20}");
                Console.WriteLine(new string('‚îÄ', 80));

                foreach (var donation in results)
                {
                    string formattedUser = donation.Username.Length > 15
                        ? donation.Username.Substring(0, 12) + "..."
                        : donation.Username;

                    string target = (donation.RelatedEntityType ?? "Unknown") + " #" +
                                   (donation.RelatedEntityId?.ToString() ?? "?");

                    string note = donation.Note?.Length > 20
                        ? donation.Note.Substring(0, 17) + "..."
                        : donation.Note ?? "";

                    Console.WriteLine($"{donation.Id,5} {formattedUser,-15} {Math.Abs(donation.Amount),12:N0} " +
                                     $"{target,-15} {donation.CreatedAt,20:dd/MM/yyyy HH:mm} {note,-20}");
                }
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.SetCursorPosition(0, 25);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t√¨m ki·∫øm donation: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã prompt "Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c..." ·ªü d√≤ng cu·ªëi c√πng ngo√†i border, an to√†n cho m·ªçi k√≠ch th∆∞·ªõc console.
    /// </summary>
    private static void ShowContinuePromptOutsideBorder()
    {
        int lastLine = Math.Max(Console.WindowTop + Console.WindowHeight - 2, 0);
        Console.SetCursorPosition(0, lastLine);
        Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        Console.ReadKey(true);
    }
}
