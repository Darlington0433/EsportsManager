using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.Admin.Interfaces;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public interface IDonationReportHandler
{
    Task ViewDonationReportsAsync();
    Task ShowDonationOverviewAsync();
    Task ShowTopDonationReceiversAsync();
    Task ShowTopDonatorsAsync();
    Task ShowDonationHistoryAsync();
    Task SearchDonationsAsync();
}

public class DonationReportHandler : IDonationReportHandler
{
    private readonly IWalletService _walletService;
    private readonly IUserService _userService;

    public DonationReportHandler(IWalletService walletService, IUserService userService)
    {
        _walletService = walletService;
        _userService = userService;
    }

    public async Task ViewDonationReportsAsync()
    {
        while (true)
        {
            var options = new[]
            {
                "T·ªïng quan donation",
                "Top ng∆∞·ªùi nh·∫≠n donation nhi·ªÅu nh·∫•t",
                "Top ng∆∞·ªùi donation nhi·ªÅu nh·∫•t",
                "L·ªãch s·ª≠ donation",
                "T√¨m ki·∫øm donation",
                "‚¨ÖÔ∏è Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("B√ÅO C√ÅO DONATION", options);

            switch (selection)
            {
                case 0:
                    await ShowDonationOverviewAsync();
                    break;
                case 1:
                    await ShowTopDonationReceiversAsync();
                    break;
                case 2:
                    await ShowTopDonatorsAsync();
                    break;
                case 3:
                    await ShowDonationHistoryAsync();
                    break;
                case 4:
                    await SearchDonationsAsync();
                    break;
                case -1:
                case 5:
                    return;
            }
        }
    }

    public async Task ShowDonationOverviewAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T·ªîNG QUAN DONATION", 80, 20);

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            Console.WriteLine("ƒêang t·∫£i d·ªØ li·ªáu...");

            // L·∫•y d·ªØ li·ªáu t·ª´ service
            var overview = await _walletService.GetDonationOverviewAsync();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("T·ªîNG QUAN DONATION", 80, 20);

            // Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
            Console.WriteLine("üìä TH·ªêNG K√ä DONATION:");
            Console.WriteLine(new string('‚îÄ', 50));
            Console.WriteLine($"üí∞ T·ªïng s·ªë donation: {overview.TotalDonations:N0} l∆∞·ª£t");
            Console.WriteLine($"üéØ S·ªë ng∆∞·ªùi nh·∫≠n donation: {overview.TotalReceivers:N0}");
            Console.WriteLine($"üë• S·ªë ng∆∞·ªùi donation: {overview.TotalDonators:N0}");
            Console.WriteLine($"üìà T·ªïng gi√° tr·ªã: {overview.TotalDonationAmount:N0} VND");
            Console.WriteLine($"‚è±Ô∏è C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {overview.LastUpdated:dd/MM/yyyy HH:mm:ss}");

            // Hi·ªÉn th·ªã th·ªëng k√™ theo lo·∫°i
            Console.WriteLine("\nüìä TH·ªêNG K√ä THEO LO·∫†I:");
            Console.WriteLine(new string('‚îÄ', 50));
            foreach (var item in overview.DonationByType)
            {
                string type = item.Key == "Tournament" ? "Gi·∫£i ƒë·∫•u" :
                              item.Key == "Team" ? "ƒê·ªôi" : item.Key;
                Console.WriteLine($"- {type}: {item.Value:N0} VND");
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
            string errorMessage = ex.Message;
            string suggestion = "";

            if (ex.Message.Contains("doesn't exist") || ex.Message.Contains("does not exist"))
            {
                suggestion = "\n\nüí° H∆Ø·ªöNG D·∫™N S·ª¨A L·ªñI:\n" +
                           "1. M·ªü MySQL Workbench\n" +
                           "2. Ch·∫°y file: database/DONATION_QUICK_FIX.sql\n" +
                           "3. Ho·∫∑c xem h∆∞·ªõng d·∫´n trong: S·ª¨A_L·ªñI_DONATION_NHANH.md";
            }
            else if (ex.Message.Contains("connection") || ex.Message.Contains("database"))
            {
                suggestion = "\n\nüí° KI·ªÇM TRA:\n" +
                           "1. MySQL server ƒëang ch·∫°y?\n" +
                           "2. Database 'EsportsManager' ƒë√£ t·ªìn t·∫°i?\n" +
                           "3. Th√¥ng tin k·∫øt n·ªëi ƒë√∫ng?";
            }

            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i t·ªïng quan donation: {errorMessage}{suggestion}", true, 5000);
        }
    }

    public async Task ShowTopDonationReceiversAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI NH·∫¨N DONATION", 80, 20);

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            Console.WriteLine("ƒêang t·∫£i d·ªØ li·ªáu...");

            // L·∫•y data t·ª´ service (m·∫∑c ƒë·ªãnh l√† 10 ng∆∞·ªùi)
            var topReceivers = await _walletService.GetTopDonationReceiversAsync();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI NH·∫¨N DONATION", 80, 20);

            Console.WriteLine("üèÜ TOP NG∆Ø·ªúI NH·∫¨N DONATION NHI·ªÄU NH·∫§T:");
            Console.WriteLine(new string('‚îÄ', 70));
            Console.WriteLine($"{"H·∫°ng",5} {"T√™n",15} {"Lo·∫°i",10} {"S·ªë donation",12} {"T·ªïng ti·ªÅn",15} {"Donation g·∫ßn nh·∫•t",20}");
            Console.WriteLine(new string('‚îÄ', 70));

            int rank = 1;
            foreach (var receiver in topReceivers)
            {
                string formattedName = receiver.Username.Length > 15
                    ? receiver.Username.Substring(0, 12) + "..."
                    : receiver.Username;

                string formattedType = receiver.UserType == "Tournament" ? "Gi·∫£i ƒë·∫•u" :
                                      receiver.UserType == "Team" ? "ƒê·ªôi" : receiver.UserType;

                Console.WriteLine($"{rank,5} {formattedName,-15} {formattedType,-10} {receiver.DonationCount,12} " +
                                 $"{receiver.TotalAmount,15:N0} {receiver.LastDonation,20:dd/MM/yyyy HH:mm}");
                rank++;
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            string suggestion = ex.Message.Contains("doesn't exist") || ex.Message.Contains("does not exist")
                ? "\n\nüí° Ch·∫°y file: database/DONATION_FIX_COMPLETE.sql ƒë·ªÉ s·ª≠a l·ªói"
                : "";
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i top ng∆∞·ªùi nh·∫≠n: {ex.Message}{suggestion}", true, 4000);
        }
    }

    public async Task ShowTopDonatorsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI DONATION", 80, 20);

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            Console.WriteLine("ƒêang t·∫£i d·ªØ li·ªáu...");

            // L·∫•y data t·ª´ service (m·∫∑c ƒë·ªãnh l√† 10 ng∆∞·ªùi)
            var topDonators = await _walletService.GetTopDonatorsAsync();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("TOP NG∆Ø·ªúI DONATION", 80, 20);

            Console.WriteLine("üéñÔ∏è TOP NG∆Ø·ªúI DONATION NHI·ªÄU NH·∫§T:");
            Console.WriteLine(new string('‚îÄ', 70));
            Console.WriteLine($"{"H·∫°ng",5} {"Username",15} {"S·ªë donation",12} {"T·ªïng ti·ªÅn",15} {"Donation g·∫ßn nh·∫•t",20}");
            Console.WriteLine(new string('‚îÄ', 70));

            int rank = 1;
            foreach (var donator in topDonators)
            {
                string formattedName = donator.Username.Length > 15
                    ? donator.Username.Substring(0, 12) + "..."
                    : donator.Username;

                Console.WriteLine($"{rank,5} {formattedName,-15} {donator.DonationCount,12} " +
                                 $"{donator.TotalAmount,15:N0} {donator.LastDonation,20:dd/MM/yyyy HH:mm}");
                rank++;
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            string suggestion = ex.Message.Contains("doesn't exist") || ex.Message.Contains("does not exist")
                ? "\n\nüí° Ch·∫°y file: database/DONATION_FIX_COMPLETE.sql ƒë·ªÉ s·ª≠a l·ªói"
                : "";
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i top ng∆∞·ªùi donation: {ex.Message}{suggestion}", true, 4000);
        }
    }

    public async Task ShowDonationHistoryAsync()
    {
        try
        {
            int currentPage = 1;
            int pageSize = 5; // S·ªë l∆∞·ª£ng record tr√™n m·ªôt trang
            bool viewingHistory = true;
            var filter = new DonationSearchFilterDto
            {
                PageNumber = currentPage,
                PageSize = pageSize
            };

            while (viewingHistory)
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("L·ªäCH S·ª¨ DONATION", 80, 20);

                Console.WriteLine("ƒêang t·∫£i d·ªØ li·ªáu...");

                // L·∫•y l·ªãch s·ª≠ donation
                var donations = await _walletService.GetDonationHistoryAsync(filter);

                Console.Clear();
                ConsoleRenderingService.DrawBorder("L·ªäCH S·ª¨ DONATION", 90, 25);

                Console.WriteLine("üìö L·ªäCH S·ª¨ DONATION:");
                Console.WriteLine(new string('‚îÄ', 80));
                Console.WriteLine($"{"ID",5} {"Ng∆∞·ªùi d√πng",15} {"S·ªë ti·ªÅn",12} {"ƒê·ªëi t∆∞·ª£ng",15} {"Th·ªùi gian",20} {"Ghi ch√∫",20}");
                Console.WriteLine(new string('‚îÄ', 80));

                foreach (var donation in donations)
                {
                    // Hi·ªÉn th·ªã th√¥ng tin donation
                    string formattedUser = donation.Username.Length > 15
                        ? donation.Username.Substring(0, 12) + "..."
                        : donation.Username;

                    string target = (donation.RelatedEntityType ?? "Unknown") + " #" +
                                   (donation.RelatedEntityId?.ToString() ?? "?");

                    string note = donation.Note?.Length > 20
                        ? donation.Note.Substring(0, 17) + "..."
                        : donation.Note ?? "";

                    Console.WriteLine($"{donation.Id,5} {formattedUser,-15} {Math.Abs(donation.Amount),12:N0} " +
                                     $"{target,-15} {donation.CreatedAt,20:dd/MM/yyyy HH:mm} {note,-20}");
                }

                Console.WriteLine(new string('‚îÄ', 80));
                Console.WriteLine($"Trang {currentPage} | [‚óÄ Trang tr∆∞·ªõc (P)] [Trang ti·∫øp theo (N) ‚ñ∂] [Chi ti·∫øt (D)] [Quay l·∫°i (Q)]");

                // X·ª≠ l√Ω c√°c l·ª±a ch·ªçn ƒëi·ªÅu h∆∞·ªõng
                var key = Console.ReadKey(true);
                switch (key.Key)
                {
                    case ConsoleKey.P: // Previous page
                        if (currentPage > 1)
                        {
                            currentPage--;
                            filter.PageNumber = currentPage;
                        }
                        break;

                    case ConsoleKey.N: // Next page
                        if (donations.Count == pageSize) // N·∫øu ƒë·ªß items, kh·∫£ nƒÉng c√≥ trang ti·∫øp theo
                        {
                            currentPage++;
                            filter.PageNumber = currentPage;
                        }
                        break;

                    case ConsoleKey.D: // View details
                        Console.WriteLine("\nNh·∫≠p ID donation ƒë·ªÉ xem chi ti·∫øt (ho·∫∑c nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c):");
                        string input = Console.ReadLine() ?? "";

                        if (!string.IsNullOrEmpty(input) && int.TryParse(input, out int donationId))
                        {
                            await ShowDonationDetailsAsync(donationId);
                        }
                        break;

                    case ConsoleKey.Q: // Quit
                        viewingHistory = false;
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i l·ªãch s·ª≠ donation: {ex.Message}", true, 3000);
        }
    }

    // Helper method ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt m·ªôt donation
    private async Task ShowDonationDetailsAsync(int donationId)
    {
        try
        {
            // T√¨m donation theo ID
            var filter = new DonationSearchFilterDto();
            var allDonations = await _walletService.GetDonationHistoryAsync(filter);
            var donation = allDonations.FirstOrDefault(d => d.Id == donationId);

            if (donation == null)
            {
                ConsoleRenderingService.ShowMessageBox($"Kh√¥ng t√¨m th·∫•y donation v·ªõi ID {donationId}", true, 3000);
                return;
            }

            Console.Clear();
            ConsoleRenderingService.DrawBorder($"CHI TI·∫æT DONATION #{donationId}", 80, 20);

            Console.WriteLine($"ID giao d·ªãch: {donation.Id}");
            Console.WriteLine($"M√£ tham chi·∫øu: {donation.ReferenceCode}");
            Console.WriteLine($"Ng∆∞·ªùi donation: {donation.Username} (ID: {donation.UserId})");
            Console.WriteLine($"S·ªë ti·ªÅn: {Math.Abs(donation.Amount):N0} VND");
            Console.WriteLine($"Th·ªùi gian: {donation.CreatedAt:dd/MM/yyyy HH:mm:ss}");
            Console.WriteLine($"Tr·∫°ng th√°i: {donation.Status}");

            string target = donation.RelatedEntityType == "Tournament" ? "Gi·∫£i ƒë·∫•u" :
                          donation.RelatedEntityType == "Team" ? "ƒê·ªôi" :
                          donation.RelatedEntityType ?? "Unknown";

            Console.WriteLine($"ƒê·ªëi t∆∞·ª£ng: {target} (ID: {donation.RelatedEntityId})");
            Console.WriteLine($"Ghi ch√∫: {donation.Note}");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi hi·ªÉn th·ªã chi ti·∫øt donation: {ex.Message}", true, 3000);
        }
    }

    public async Task SearchDonationsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T√åM KI·∫æM DONATION", 80, 20);

            // T·∫°o filter m·ªõi ƒë·ªÉ t√¨m ki·∫øm
            var filter = new DonationSearchFilterDto
            {
                PageNumber = 1,
                PageSize = 10
            };

            Console.WriteLine("üîç T√åM KI·∫æM DONATION:");
            Console.WriteLine("(Nh·∫•n Enter ƒë·ªÉ b·ªè qua tr∆∞·ªùng kh√¥ng c·∫ßn t√¨m ki·∫øm)");
            Console.WriteLine();

            // Thu th·∫≠p th√¥ng tin t√¨m ki·∫øm t·ª´ ng∆∞·ªùi d√πng
            Console.Write("T√™n ng∆∞·ªùi d√πng: ");
            string username = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(username))
                filter.Username = username;

            Console.Write("ID ƒë·ªôi (n·∫øu c√≥): ");
            string teamIdInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(teamIdInput) && int.TryParse(teamIdInput, out int teamId))
                filter.TeamId = teamId;

            Console.Write("ID gi·∫£i ƒë·∫•u (n·∫øu c√≥): ");
            string tournamentIdInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(tournamentIdInput) && int.TryParse(tournamentIdInput, out int tournamentId))
                filter.TournamentId = tournamentId;

            Console.Write("Lo·∫°i donation (Team/Tournament): ");
            string typeInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(typeInput))
            {
                if (typeInput.Equals("team", StringComparison.OrdinalIgnoreCase))
                    filter.DonationType = "Team";
                else if (typeInput.Equals("tournament", StringComparison.OrdinalIgnoreCase))
                    filter.DonationType = "Tournament";
            }

            Console.Write("S·ªë ti·ªÅn t·ªëi thi·ªÉu: ");
            string minAmountInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(minAmountInput) && decimal.TryParse(minAmountInput, out decimal minAmount))
                filter.MinAmount = minAmount;

            Console.Write("S·ªë ti·ªÅn t·ªëi ƒëa: ");
            string maxAmountInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(maxAmountInput) && decimal.TryParse(maxAmountInput, out decimal maxAmount))
                filter.MaxAmount = maxAmount;

            Console.Write("T·ª´ ng√†y (dd/MM/yyyy): ");
            string fromDateInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(fromDateInput) && DateTime.TryParse(fromDateInput, out DateTime fromDate))
                filter.FromDate = fromDate;

            Console.Write("ƒê·∫øn ng√†y (dd/MM/yyyy): ");
            string toDateInput = Console.ReadLine() ?? "";
            if (!string.IsNullOrWhiteSpace(toDateInput) && DateTime.TryParse(toDateInput, out DateTime toDate))
                filter.ToDate = toDate;

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t√¨m ki·∫øm
            Console.WriteLine("\nƒêang t√¨m ki·∫øm...");

            // Th·ª±c hi·ªán t√¨m ki·∫øm
            var results = await _walletService.SearchDonationsAsync(filter);

            Console.Clear();
            ConsoleRenderingService.DrawBorder("K·∫æT QU·∫¢ T√åM KI·∫æM DONATION", 90, 25);

            if (!results.Any())
            {
                Console.WriteLine("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm.");
            }
            else
            {
                Console.WriteLine($"ƒê√£ t√¨m th·∫•y {results.Count} k·∫øt qu·∫£:");
                Console.WriteLine(new string('‚îÄ', 80));
                Console.WriteLine($"{"ID",5} {"Ng∆∞·ªùi d√πng",15} {"S·ªë ti·ªÅn",12} {"ƒê·ªëi t∆∞·ª£ng",15} {"Th·ªùi gian",20} {"Ghi ch√∫",20}");
                Console.WriteLine(new string('‚îÄ', 80));

                foreach (var donation in results)
                {
                    string formattedUser = donation.Username.Length > 15
                        ? donation.Username.Substring(0, 12) + "..."
                        : donation.Username;

                    string target = (donation.RelatedEntityType ?? "Unknown") + " #" +
                                   (donation.RelatedEntityId?.ToString() ?? "?");

                    string note = donation.Note?.Length > 20
                        ? donation.Note.Substring(0, 17) + "..."
                        : donation.Note ?? "";

                    Console.WriteLine($"{donation.Id,5} {formattedUser,-15} {Math.Abs(donation.Amount),12:N0} " +
                                     $"{target,-15} {donation.CreatedAt,20:dd/MM/yyyy HH:mm} {note,-20}");
                }
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t√¨m ki·∫øm donation: {ex.Message}", true, 3000);
        }
    }
}
