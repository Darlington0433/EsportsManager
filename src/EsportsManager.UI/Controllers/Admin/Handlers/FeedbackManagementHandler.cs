using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public class FeedbackManagementHandler
{
    private readonly IUserService _userService;
    private readonly ITournamentService _tournamentService;
    private readonly IFeedbackService _feedbackService;

    public FeedbackManagementHandler(
        IUserService userService,
        ITournamentService tournamentService,
        IFeedbackService feedbackService)
    {
        _userService = userService ?? throw new ArgumentNullException(nameof(userService));
        _tournamentService = tournamentService ?? throw new ArgumentNullException(nameof(tournamentService));
        _feedbackService = feedbackService ?? throw new ArgumentNullException(nameof(feedbackService));
    }

    public async Task ManageFeedbackAsync()
    {
        while (true)
        {
            var options = new[]
            {
                "Xem t·∫•t c·∫£ feedback",
                "Xem feedback theo tournament",
                "T√¨m ki·∫øm feedback",
                "·∫®n/hi·ªán feedback",
                "X√≥a feedback",
                "Th·ªëng k√™ feedback",
                "‚¨ÖÔ∏è Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù FEEDBACK", options);

            switch (selection)
            {
                case 0:
                    await ShowAllFeedbackAsync();
                    break;
                case 1:
                    await ShowFeedbackByTournamentAsync();
                    break;
                case 2:
                    await SearchFeedbackAsync();
                    break;
                case 3:
                    await ToggleFeedbackVisibilityAsync();
                    break;
                case 4:
                    await DeleteFeedbackAsync();
                    break;
                case 5:
                    await ShowFeedbackStatsAsync();
                    break;
                case -1:
                case 6:
                    return;
            }
        }
    }

    public async Task ShowAllFeedbackAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T·∫§T C·∫¢ FEEDBACK", 100, 25);

            Console.WriteLine("üìù T·∫§T C·∫¢ FEEDBACK:");
            Console.WriteLine("------------------");

            // L·∫•y d·ªØ li·ªáu t·ª´ service
            var feedbacks = await _feedbackService.GetAllFeedbackAsync();

            if (feedbacks == null || !feedbacks.Any())
            {
                Console.WriteLine("\n‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu feedback.");
            }
            else
            {
                // Header
                Console.WriteLine($"{"ID",-5}{"User",-15}{"Tournament",-10}{"Rating",-8}{"Ng√†y t·∫°o",-12}{"Tr·∫°ng th√°i",-10}{"N·ªôi dung",-40}");
                Console.WriteLine(new string('-', 95));

                // Data
                foreach (var feedback in feedbacks)
                {
                    string shortContent = feedback.Content.Length > 35 ? feedback.Content.Substring(0, 35) + "..." : feedback.Content;

                    Console.WriteLine(
                        $"{feedback.FeedbackId,-5}{feedback.UserName,-15}{feedback.TournamentId,-10}{feedback.Rating + "‚òÖ",-8}" +
                        $"{feedback.CreatedAt:yyyy-MM-dd,-12}{feedback.Status,-10}{shortContent,-40}");
                }

                Console.WriteLine($"\nT·ªïng s·ªë: {feedbacks.Count} feedback");
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task ShowFeedbackByTournamentAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("FEEDBACK THEO TOURNAMENT", 100, 25);

            Console.WriteLine("üèÜ FEEDBACK THEO TOURNAMENT:");
            Console.WriteLine("--------------------------");

            // L·∫•y danh s√°ch tournaments t·ª´ service
            var tournaments = await _tournamentService.GetAllTournamentsAsync();

            // N·∫øu kh√¥ng c√≥ tournaments n√†o
            if (tournaments == null || !tournaments.Any())
            {
                Console.WriteLine("\n‚ö†Ô∏è Kh√¥ng c√≥ tournament n√†o trong h·ªá th·ªëng.");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // Hi·ªÉn th·ªã danh s√°ch tournaments
            Console.WriteLine("\nCh·ªçn tournament ƒë·ªÉ xem feedback:");
            for (int i = 0; i < tournaments.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {tournaments[i].TournamentName} (ID: {tournaments[i].Id})");
            }

            Console.Write("\nNh·∫≠p s·ªë th·ª© t·ª± tournament (0 ƒë·ªÉ quay l·∫°i): ");
            if (!int.TryParse(Console.ReadLine(), out int choice) || choice < 0 || choice > tournaments.Count)
            {
                Console.WriteLine("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            if (choice == 0)
                return;

            var selectedTournament = tournaments[choice - 1];

            // L·∫•y feedback cho tournament ƒë√£ ch·ªçn
            var feedbacks = await _feedbackService.GetFeedbackByTournamentAsync(selectedTournament.Id);

            Console.Clear();
            ConsoleRenderingService.DrawBorder($"FEEDBACK - {selectedTournament.TournamentName}", 100, 25);
            Console.WriteLine($"üèÜ FEEDBACK CHO: {selectedTournament.TournamentName}");
            Console.WriteLine("------------------------------------------------------");

            if (feedbacks == null || !feedbacks.Any())
            {
                Console.WriteLine("\n‚ö†Ô∏è Kh√¥ng c√≥ feedback n√†o cho tournament n√†y.");
            }
            else
            {
                // Header
                Console.WriteLine($"{"ID",-5}{"User",-15}{"Rating",-8}{"Ng√†y t·∫°o",-12}{"Tr·∫°ng th√°i",-10}{"N·ªôi dung",-40}");
                Console.WriteLine(new string('-', 90));

                // Data
                foreach (var feedback in feedbacks)
                {
                    string shortContent = feedback.Content.Length > 35 ? feedback.Content.Substring(0, 35) + "..." : feedback.Content;

                    Console.WriteLine(
                        $"{feedback.FeedbackId,-5}{feedback.UserName,-15}{feedback.Rating + "‚òÖ",-8}" +
                        $"{feedback.CreatedAt:yyyy-MM-dd,-12}{feedback.Status,-10}{shortContent,-40}");
                }

                Console.WriteLine($"\nT·ªïng s·ªë: {feedbacks.Count} feedback cho tournament n√†y");
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i feedback theo tournament: {ex.Message}", true, 3000);
        }
    }

    public async Task SearchFeedbackAsync()
    {
        try
        {
            bool searching = true;

            while (searching)
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("T√åM KI·∫æM FEEDBACK", 100, 25);

                Console.WriteLine("üîç T√åM KI·∫æM FEEDBACK:");
                Console.WriteLine("-------------------");

                // Nh·∫≠p th√¥ng tin t√¨m ki·∫øm
                Console.Write("T·ª´ kh√≥a (n·ªôi dung ho·∫∑c t√™n ng∆∞·ªùi d√πng): ");
                string keyword = Console.ReadLine()?.Trim() ?? string.Empty;

                if (string.IsNullOrEmpty(keyword))
                {
                    Console.WriteLine("T√¨m ki·∫øm ƒë√£ h·ªßy!");
                    break;
                }

                Console.Write("Tr·∫°ng th√°i (Visible/Hidden/Pending, ƒë·ªÉ tr·ªëng ƒë·ªÉ t·∫•t c·∫£): ");
                string status = Console.ReadLine()?.Trim() ?? string.Empty;

                Console.Write("T·ª´ ng√†y (yyyy-MM-dd, ƒë·ªÉ tr·ªëng ƒë·ªÉ b·ªè qua): ");
                string fromDateStr = Console.ReadLine()?.Trim() ?? string.Empty;
                DateTime? fromDate = !string.IsNullOrEmpty(fromDateStr) && DateTime.TryParse(fromDateStr, out var date)
                    ? date
                    : null;

                Console.Write("ƒê·∫øn ng√†y (yyyy-MM-dd, ƒë·ªÉ tr·ªëng ƒë·ªÉ b·ªè qua): ");
                string toDateStr = Console.ReadLine()?.Trim() ?? string.Empty;
                DateTime? toDate = !string.IsNullOrEmpty(toDateStr) && DateTime.TryParse(toDateStr, out var date2)
                    ? date2
                    : null;

                // Th·ª±c hi·ªán t√¨m ki·∫øm
                string? nullableStatus = string.IsNullOrEmpty(status) ? null : status;
                var results = await _feedbackService.SearchFeedbackAsync(keyword, nullableStatus, fromDate, toDate);

                Console.WriteLine("\nK·∫æT QU·∫¢ T√åM KI·∫æM:");
                Console.WriteLine("-----------------");

                if (results == null || !results.Any())
                {
                    Console.WriteLine("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p.");
                }
                else
                {
                    // Header
                    Console.WriteLine($"{"ID",-5}{"User",-15}{"Tournament",-10}{"Rating",-8}{"Ng√†y t·∫°o",-12}{"Tr·∫°ng th√°i",-10}{"N·ªôi dung",-40}");
                    Console.WriteLine(new string('-', 95));

                    // Data
                    foreach (var feedback in results)
                    {
                        string shortContent = feedback.Content.Length > 35 ? feedback.Content.Substring(0, 35) + "..." : feedback.Content;

                        Console.WriteLine(
                            $"{feedback.FeedbackId,-5}{feedback.UserName,-15}{feedback.TournamentId,-10}{feedback.Rating + "‚òÖ",-8}" +
                            $"{feedback.CreatedAt:yyyy-MM-dd,-12}{feedback.Status,-10}{shortContent,-40}");
                    }

                    Console.WriteLine($"\nT√¨m th·∫•y {results.Count} k·∫øt qu·∫£");
                }

                Console.WriteLine("\nB·∫°n c√≥ mu·ªën t√¨m ki·∫øm ti·∫øp? (Y/N): ");
                var key = Console.ReadKey(true);
                searching = (key.Key == ConsoleKey.Y);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t√¨m ki·∫øm feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task ToggleFeedbackVisibilityAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("·∫®N/HI·ªÜN FEEDBACK", 100, 25);

            Console.WriteLine("üëÅÔ∏è ·∫®N/HI·ªÜN FEEDBACK:");
            Console.WriteLine("------------------");

            // L·∫•y danh s√°ch t·∫•t c·∫£ feedback
            var feedbacks = await _feedbackService.GetAllFeedbackAsync();

            if (feedbacks == null || !feedbacks.Any())
            {
                Console.WriteLine("\n‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu feedback n√†o.");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // Hi·ªÉn th·ªã danh s√°ch feedback
            Console.WriteLine($"{"ID",-5}{"User",-15}{"Status",-10}{"Rating",-8}{"N·ªôi dung",-50}");
            Console.WriteLine(new string('-', 90));

            foreach (var feedback in feedbacks)
            {
                string shortContent = feedback.Content.Length > 45 ? feedback.Content.Substring(0, 45) + "..." : feedback.Content;
                Console.WriteLine($"{feedback.FeedbackId,-5}{feedback.UserName,-15}{feedback.Status,-10}{feedback.Rating + "‚òÖ",-8}{shortContent,-50}");
            }

            // Ch·ªçn feedback ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i
            Console.Write("\nNh·∫≠p ID feedback ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i (0 ƒë·ªÉ quay l·∫°i): ");
            if (!int.TryParse(Console.ReadLine(), out int feedbackId) || feedbackId < 0)
            {
                Console.WriteLine("ID kh√¥ng h·ª£p l·ªá!");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            if (feedbackId == 0)
                return;

            var selectedFeedback = feedbacks.FirstOrDefault(f => f.FeedbackId == feedbackId);
            if (selectedFeedback == null)
            {
                Console.WriteLine("Kh√¥ng t√¨m th·∫•y feedback v·ªõi ID n√†y!");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v√† cho ph√©p thay ƒë·ªïi tr·∫°ng th√°i
            Console.WriteLine($"\nFeedback ID: {selectedFeedback.FeedbackId}");
            Console.WriteLine($"User: {selectedFeedback.UserName}");
            Console.WriteLine($"ƒê√°nh gi√°: {selectedFeedback.Rating}‚òÖ");
            Console.WriteLine($"N·ªôi dung: {selectedFeedback.Content}");
            Console.WriteLine($"Tr·∫°ng th√°i hi·ªán t·∫°i: {selectedFeedback.Status}");

            Console.WriteLine("\nCh·ªçn tr·∫°ng th√°i m·ªõi:");
            Console.WriteLine("1. Visible (hi·ªán)");
            Console.WriteLine("2. Hidden (·∫©n)");
            Console.WriteLine("3. Pending (ch·ªù x√©t duy·ªát)");
            Console.Write("L·ª±a ch·ªçn c·ªßa b·∫°n (0 ƒë·ªÉ h·ªßy): ");

            if (!int.TryParse(Console.ReadLine(), out int statusChoice) || statusChoice < 0 || statusChoice > 3)
            {
                Console.WriteLine("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            if (statusChoice == 0)
                return;

            string newStatus = statusChoice switch
            {
                1 => "Visible",
                2 => "Hidden",
                3 => "Pending",
                _ => selectedFeedback.Status
            };

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            bool success = await _feedbackService.ToggleFeedbackVisibilityAsync(selectedFeedback.FeedbackId, newStatus);

            if (success)
            {
                ConsoleRenderingService.ShowMessageBox($"ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i feedback #{selectedFeedback.FeedbackId} th√†nh {newStatus}", false, 2000);
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i feedback!", true, 2000);
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task DeleteFeedbackAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("X√ìA FEEDBACK", 100, 25);

            Console.WriteLine("üóëÔ∏è X√ìA FEEDBACK:");
            Console.WriteLine("-------------");

            // L·∫•y danh s√°ch t·∫•t c·∫£ feedback
            var feedbacks = await _feedbackService.GetAllFeedbackAsync();

            if (feedbacks == null || !feedbacks.Any())
            {
                Console.WriteLine("\n‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu feedback n√†o.");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // Hi·ªÉn th·ªã danh s√°ch feedback
            Console.WriteLine($"{"ID",-5}{"User",-15}{"Status",-10}{"Rating",-8}{"N·ªôi dung",-50}");
            Console.WriteLine(new string('-', 90));

            foreach (var feedback in feedbacks)
            {
                string shortContent = feedback.Content.Length > 45 ? feedback.Content.Substring(0, 45) + "..." : feedback.Content;
                Console.WriteLine($"{feedback.FeedbackId,-5}{feedback.UserName,-15}{feedback.Status,-10}{feedback.Rating + "‚òÖ",-8}{shortContent,-50}");
            }

            // Ch·ªçn feedback ƒë·ªÉ x√≥a
            Console.Write("\nNh·∫≠p ID feedback ƒë·ªÉ x√≥a (0 ƒë·ªÉ quay l·∫°i): ");
            if (!int.TryParse(Console.ReadLine(), out int feedbackId) || feedbackId < 0)
            {
                Console.WriteLine("ID kh√¥ng h·ª£p l·ªá!");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            if (feedbackId == 0)
                return;

            var selectedFeedback = feedbacks.FirstOrDefault(f => f.FeedbackId == feedbackId);
            if (selectedFeedback == null)
            {
                Console.WriteLine("Kh√¥ng t√¨m th·∫•y feedback v·ªõi ID n√†y!");
                Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // X√°c nh·∫≠n x√≥a
            Console.WriteLine($"\nFeedback ID: {selectedFeedback.FeedbackId}");
            Console.WriteLine($"User: {selectedFeedback.UserName}");
            Console.WriteLine($"ƒê√°nh gi√°: {selectedFeedback.Rating}‚òÖ");
            Console.WriteLine($"N·ªôi dung: {selectedFeedback.Content}");

            Console.Write("\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a feedback n√†y? (Y/N): ");
            var key = Console.ReadKey(false);

            if (key.Key == ConsoleKey.Y)
            {
                Console.WriteLine("\nƒêang x√≥a...");
                bool success = await _feedbackService.DeleteFeedbackAsync(selectedFeedback.FeedbackId);

                if (success)
                {
                    ConsoleRenderingService.ShowMessageBox($"ƒê√£ x√≥a feedback #{selectedFeedback.FeedbackId}", false, 2000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ x√≥a feedback!", true, 2000);
                }
            }
            else
            {
                Console.WriteLine("\nH·ªßy x√≥a feedback.");
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi x√≥a feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task ShowFeedbackStatsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä FEEDBACK", 100, 30);

            Console.WriteLine("üìä TH·ªêNG K√ä FEEDBACK:");
            Console.WriteLine("-------------------");

            // L·∫•y d·ªØ li·ªáu th·ªëng k√™ t·ª´ service
            var stats = await _feedbackService.GetFeedbackStatsAsync();

            // Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë t·ªïng quan
            Console.WriteLine($"T·ªïng s·ªë feedback: {stats.TotalFeedback}");
            Console.WriteLine($"Feedback ƒëang hi·ªÉn th·ªã: {stats.VisibleFeedback} ({(double)stats.VisibleFeedback / stats.TotalFeedback:P1})");
            Console.WriteLine($"Feedback ƒëang ·∫©n: {stats.HiddenFeedback} ({(double)stats.HiddenFeedback / stats.TotalFeedback:P1})");
            Console.WriteLine($"ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh: {stats.AverageRating:F1}‚òÖ");

            // Hi·ªÉn th·ªã ph√¢n b·ªë rating
            Console.WriteLine("\nPH√ÇN B·ªê ƒêI·ªÇM ƒê√ÅNH GI√Å:");
            Console.WriteLine("---------------------");

            if (stats.RatingDistribution.Any())
            {
                int maxRating = stats.RatingDistribution.Values.Max();
                int barWidth = 40;

                for (int i = 5; i >= 1; i--)
                {
                    int count = stats.RatingDistribution.ContainsKey(i) ? stats.RatingDistribution[i] : 0;

                    // T√≠nh to√°n chi·ªÅu d√†i thanh bi·ªÉu ƒë·ªì
                    int barLength = maxRating > 0 ? (int)Math.Round((double)count / maxRating * barWidth) : 0;
                    string bar = new string('‚ñà', barLength);

                    Console.WriteLine($"{i}‚òÖ {"",-5} {bar,-40} {count,4} ({(double)count / stats.TotalFeedback:P1})");
                }
            }
            else
            {
                Console.WriteLine("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªë ƒëi·ªÉm ƒë√°nh gi√°");
            }

            // Hi·ªÉn th·ªã ph√¢n b·ªë theo th√°ng
            Console.WriteLine("\nPH√ÇN B·ªê THEO TH√ÅNG:");
            Console.WriteLine("------------------");

            if (stats.FeedbackByMonth.Any())
            {
                int maxValue = stats.FeedbackByMonth.Values.Max();
                int barWidth = 40;

                foreach (var entry in stats.FeedbackByMonth.OrderBy(e => e.Key))
                {
                    int month = int.Parse(entry.Key.Split('-')[1]);
                    int year = int.Parse(entry.Key.Split('-')[0]);
                    string monthName = new DateTime(year, month, 1).ToString("MMM yyyy");
                    int count = entry.Value;

                    // T√≠nh to√°n chi·ªÅu d√†i thanh bi·ªÉu ƒë·ªì
                    int barLength = (int)Math.Round((double)count / maxValue * barWidth);
                    string bar = new string('‚ñà', barLength);

                    Console.WriteLine($"{monthName,-10}: {bar,-40} {count,4}");
                }
            }
            else
            {
                Console.WriteLine("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªë theo th√°ng");
            }

            // Hi·ªÉn th·ªã Top tournaments
            Console.WriteLine("\nTOP TOURNAMENTS THEO ƒê√ÅNH GI√Å:");
            Console.WriteLine("----------------------------");

            if (stats.TopTournaments.Any())
            {
                Console.WriteLine($"{"Tournament",-20}{"ƒêi·ªÉm TB",-10}{"S·ªë feedback",-12}");
                Console.WriteLine(new string('-', 42));

                foreach (var tournament in stats.TopTournaments)
                {
                    string stars = new string('‚òÖ', (int)Math.Round(tournament.AverageRating));
                    Console.WriteLine($"{tournament.TournamentName,-20}{stars} ({tournament.AverageRating:F1}){tournament.FeedbackCount,-12}");
                }
            }
            else
            {
                Console.WriteLine("Kh√¥ng c√≥ d·ªØ li·ªáu top tournaments");
            }

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i th·ªëng k√™ feedback: {ex.Message}", true, 3000);
        }
    }
}
