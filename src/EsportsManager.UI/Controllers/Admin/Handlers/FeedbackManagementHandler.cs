using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public class FeedbackManagementHandler
{
    private readonly IUserService _userService;
    private readonly ITournamentService _tournamentService;

    public FeedbackManagementHandler(IUserService userService, ITournamentService tournamentService)
    {
        _userService = userService;
        _tournamentService = tournamentService;
    }

    public async Task ManageFeedbackAsync()
    {
        while (true)
        {
            var options = new[]
            {
                "Xem t·∫•t c·∫£ feedback",
                "Xem feedback theo tournament",
                "T√¨m ki·∫øm feedback",
                "·∫®n/hi·ªán feedback",
                "X√≥a feedback",
                "Th·ªëng k√™ feedback",
                "‚¨ÖÔ∏è Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù FEEDBACK", options);

            switch (selection)
            {
                case 0:
                    await ShowAllFeedbackAsync();
                    break;
                case 1:
                    await ShowFeedbackByTournamentAsync();
                    break;
                case 2:
                    await SearchFeedbackAsync();
                    break;
                case 3:
                    await ToggleFeedbackVisibilityAsync();
                    break;
                case 4:
                    await DeleteFeedbackAsync();
                    break;
                case 5:
                    await ShowFeedbackStatsAsync();
                    break;
                case -1:
                case 6:
                    return;
            }
        }
    }

    public async Task ShowAllFeedbackAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T·∫§T C·∫¢ FEEDBACK", 80, 20);
            
            Console.WriteLine("üìù T·∫§T C·∫¢ FEEDBACK:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task ShowFeedbackByTournamentAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("FEEDBACK THEO TOURNAMENT", 80, 20);
            
            Console.WriteLine("üèÜ FEEDBACK THEO TOURNAMENT:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i feedback theo tournament: {ex.Message}", true, 3000);
        }
    }

    public async Task SearchFeedbackAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T√åM KI·∫æM FEEDBACK", 80, 20);
            
            Console.WriteLine("üîç T√åM KI·∫æM FEEDBACK:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t√¨m ki·∫øm feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task ToggleFeedbackVisibilityAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("·∫®N/HI·ªÜN FEEDBACK", 80, 20);
            
            Console.WriteLine("üëÅÔ∏è ·∫®N/HI·ªÜN FEEDBACK:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task DeleteFeedbackAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("X√ìA FEEDBACK", 80, 20);
            
            Console.WriteLine("üóëÔ∏è X√ìA FEEDBACK:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi x√≥a feedback: {ex.Message}", true, 3000);
        }
    }

    public async Task ShowFeedbackStatsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä FEEDBACK", 80, 20);
            
            Console.WriteLine("üìä TH·ªêNG K√ä FEEDBACK:");
            Console.WriteLine("Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...");

            Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i th·ªëng k√™ feedback: {ex.Message}", true, 3000);
        }
    }
}
