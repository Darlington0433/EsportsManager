using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public class TeamManagementHandler
{
    private readonly ITeamService _teamService;
    private readonly IUserService _userService;

    public TeamManagementHandler(ITeamService teamService, IUserService userService)
    {
        _teamService = teamService;
        _userService = userService;
    }

    public async Task ManageTeamsAsync()
    {
        while (true)
        {
            var teamOptions = new[]
            {
                "Xem danh s√°ch ƒë·ªôi",
                "T√¨m ki·∫øm ƒë·ªôi",
                "Duy·ªát ƒë·ªôi m·ªõi",
                "Duy·ªát th√†nh vi√™n ƒë·ªôi",
                "‚¨ÖÔ∏è Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù ƒê·ªòI/TEAM", teamOptions);

            switch (selection)
            {
                case 0:
                    await ViewAllTeamsAsync();
                    break;
                case 1:
                    await SearchTeamsAsync();
                    break;
                case 2:
                    await ApprovePendingTeamsAsync();
                    break;
                case 3:
                    await ApproveTeamMembersAsync();
                    break;
                case -1:
                case 4:
                    return;
            }
        }
    }

    private async Task ViewAllTeamsAsync()
    {
        try
        {
            var result = await _teamService.GetAllTeamsAsync();
            if (result == null || !result.Any())
            {
                ConsoleRenderingService.ShowNotification("Kh√¥ng c√≥ ƒë·ªôi n√†o trong h·ªá th·ªëng", ConsoleColor.Yellow);
                return;
            }

            Console.Clear();
            ConsoleRenderingService.DrawBorder("DANH S√ÅCH T·∫§T C·∫¢ ƒê·ªòI", 80, 20);

            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;
            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);

            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine($"{"ID",-5} {"T√™n ƒë·ªôi",-20} {"Leader",-15} {"Th√†nh vi√™n",-10} {"Tr·∫°ng th√°i",-10}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
            Console.WriteLine(new string('‚îÄ', 70));

            int currentRow = borderTop + 4;
            foreach (var team in result.Take(10))
            {
                Console.SetCursorPosition(borderLeft + 2, currentRow);
                var statusColor = team.Status == "Active" ? ConsoleColor.Green :
                                 team.Status == "Pending" ? ConsoleColor.Yellow : ConsoleColor.Red;
                Console.ForegroundColor = statusColor;

                var row = string.Format("{0,-5} {1,-20} {2,-15} {3,-10} {4,-10}",
                    team.Id,
                    team.Name.Length > 19 ? team.Name.Substring(0, 19) : team.Name,
                    team.LeaderName?.Length > 14 ? team.LeaderName.Substring(0, 14) : team.LeaderName ?? "N/A",
                    team.MemberCount,
                    team.Status);
                Console.WriteLine(row);
                currentRow++;
            }

            Console.ResetColor();
            Console.SetCursorPosition(borderLeft + 2, borderTop + 16);
            Console.WriteLine($"T·ªïng c·ªông: {result.Count()} ƒë·ªôi");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 17);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task SearchTeamsAsync()
    {
        try
        {
            Console.Write("\nNh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm ƒë·ªôi: ");
            var searchTerm = Console.ReadLine()?.Trim();

            if (string.IsNullOrEmpty(searchTerm))
            {
                ConsoleRenderingService.ShowNotification("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c r·ªóng", ConsoleColor.Yellow);
                return;
            }

            var result = await _teamService.SearchTeamsAsync(searchTerm);
            if (result == null || !result.Any())
            {
                ConsoleRenderingService.ShowNotification("Kh√¥ng t√¨m th·∫•y ƒë·ªôi n√†o", ConsoleColor.Yellow);
                return;
            }

            Console.Clear();
            ConsoleRenderingService.DrawBorder($"K·∫æT QU·∫¢ T√åM KI·∫æM: {searchTerm}", 80, 20);

            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;
            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);

            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine($"{"ID",-5} {"T√™n ƒë·ªôi",-20} {"Leader",-15} {"Th√†nh vi√™n",-10} {"Tr·∫°ng th√°i",-10}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
            Console.WriteLine(new string('‚îÄ', 70));

            int currentRow = borderTop + 4;
            foreach (var team in result.Take(10))
            {
                Console.SetCursorPosition(borderLeft + 2, currentRow);
                var statusColor = team.Status == "Active" ? ConsoleColor.Green :
                                 team.Status == "Pending" ? ConsoleColor.Yellow : ConsoleColor.Red;
                Console.ForegroundColor = statusColor;

                var row = string.Format("{0,-5} {1,-20} {2,-15} {3,-10} {4,-10}",
                    team.Id,
                    team.Name.Length > 19 ? team.Name.Substring(0, 19) : team.Name,
                    team.LeaderName?.Length > 14 ? team.LeaderName.Substring(0, 14) : team.LeaderName ?? "N/A",
                    team.MemberCount,
                    team.Status);
                Console.WriteLine(row);
                currentRow++;
            }

            Console.ResetColor();
            Console.SetCursorPosition(borderLeft + 2, borderTop + 16);
            Console.WriteLine($"T√¨m th·∫•y: {result.Count()} ƒë·ªôi");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 17);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Ph√™ duy·ªát c√°c ƒë·ªôi ƒëang ch·ªù x√©t duy·ªát
    /// </summary>
    private async Task ApprovePendingTeamsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("DUY·ªÜT ƒê·ªòI M·ªöI", 80, 20);

            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;

            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
            Console.WriteLine("üìã Duy·ªát c√°c ƒë·ªôi ƒëang ch·ªù ph√™ duy·ªát");
            Console.WriteLine();

            // Sample pending teams data
            var samplePendingTeams = new[]
            {
                new { Id = 1, Name = "Shadow Legends", Leader = "ProPlayer1", Members = 5, Game = "LoL", Status = "Pending" },
                new { Id = 2, Name = "Fire Dragons", Leader = "GameMaster", Members = 4, Game = "CS:GO", Status = "Pending" },
                new { Id = 3, Name = "Storm Raiders", Leader = "TacticalLead", Members = 6, Game = "Valorant", Status = "Pending" },
                new { Id = 4, Name = "Ice Wolves", Leader = "ColdStrike", Members = 5, Game = "Dota 2", Status = "Pending" }
            };

            Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
            Console.WriteLine("Danh s√°ch ƒë·ªôi ch·ªù duy·ªát:");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
            Console.WriteLine(new string('‚îÄ', 70));

            int currentRow = borderTop + 6;
            for (int i = 0; i < samplePendingTeams.Length; i++)
            {
                var team = samplePendingTeams[i];
                Console.SetCursorPosition(borderLeft + 2, currentRow + i * 2);
                Console.WriteLine($"{i + 1}. {team.Name} ({team.Game})");
                Console.SetCursorPosition(borderLeft + 4, currentRow + i * 2 + 1);
                Console.WriteLine($"   üë§ Leader: {team.Leader} | üë• Members: {team.Members}");
            }

            Console.SetCursorPosition(borderLeft + 2, currentRow + samplePendingTeams.Length * 2 + 2);
            Console.Write("Ch·ªçn ƒë·ªôi ƒë·ªÉ duy·ªát (1-4, 0 ƒë·ªÉ tho√°t): ");

            if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= samplePendingTeams.Length)
            {
                var selectedTeam = samplePendingTeams[choice - 1];

                Console.SetCursorPosition(borderLeft + 2, currentRow + samplePendingTeams.Length * 2 + 4);
                Console.WriteLine($"Duy·ªát ƒë·ªôi: {selectedTeam.Name}");
                Console.Write("X√°c nh·∫≠n duy·ªát ƒë·ªôi n√†y? (y/n): ");

                var confirmation = Console.ReadLine()?.ToLower();
                if (confirmation == "y" || confirmation == "yes")
                {
                    ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ duy·ªát ƒë·ªôi '{selectedTeam.Name}' th√†nh c√¥ng!", false, 2500);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy thao t√°c duy·ªát", false, 1500);
                }
            }
            else if (choice != 0)
            {
                ConsoleRenderingService.ShowMessageBox("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
            }

            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Ph√™ duy·ªát th√†nh vi√™n m·ªõi c·ªßa c√°c ƒë·ªôi
    /// </summary>
    private async Task ApproveTeamMembersAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("DUY·ªÜT TH√ÄNH VI√äN ƒê·ªòI", 80, 20);

            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;

            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
            Console.WriteLine("üë• Duy·ªát th√†nh vi√™n m·ªõi gia nh·∫≠p ƒë·ªôi");
            Console.WriteLine();

            // Sample pending member requests
            var sampleMemberRequests = new[]
            {
                new { Id = 1, PlayerName = "NewPlayer123", TeamName = "Shadow Legends", Role = "Support", Experience = "2 years", Status = "Pending" },
                new { Id = 2, PlayerName = "ProShooter", TeamName = "Fire Dragons", Role = "Sniper", Experience = "3 years", Status = "Pending" },
                new { Id = 3, PlayerName = "StrategicMind", TeamName = "Storm Raiders", Role = "IGL", Experience = "4 years", Status = "Pending" },
                new { Id = 4, PlayerName = "FastFingers", TeamName = "Ice Wolves", Role = "Entry Fragger", Experience = "1.5 years", Status = "Pending" }
            };

            Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
            Console.WriteLine("Y√™u c·∫ßu gia nh·∫≠p ƒë·ªôi:");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
            Console.WriteLine(new string('‚îÄ', 70));

            int currentRow = borderTop + 6;
            for (int i = 0; i < sampleMemberRequests.Length; i++)
            {
                var request = sampleMemberRequests[i];
                Console.SetCursorPosition(borderLeft + 2, currentRow + i * 3);
                Console.WriteLine($"{i + 1}. {request.PlayerName} ‚Üí {request.TeamName}");
                Console.SetCursorPosition(borderLeft + 4, currentRow + i * 3 + 1);
                Console.WriteLine($"   üéØ Role: {request.Role} | ‚è±Ô∏è Experience: {request.Experience}");
                Console.SetCursorPosition(borderLeft + 4, currentRow + i * 3 + 2);
                Console.WriteLine($"   üìä Status: {request.Status}");
            }

            Console.SetCursorPosition(borderLeft + 2, currentRow + sampleMemberRequests.Length * 3 + 2);
            Console.Write("Ch·ªçn y√™u c·∫ßu ƒë·ªÉ duy·ªát (1-4, 0 ƒë·ªÉ tho√°t): ");

            if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= sampleMemberRequests.Length)
            {
                var selectedRequest = sampleMemberRequests[choice - 1];

                Console.SetCursorPosition(borderLeft + 2, currentRow + sampleMemberRequests.Length * 3 + 4);
                Console.WriteLine($"Duy·ªát: {selectedRequest.PlayerName} gia nh·∫≠p {selectedRequest.TeamName}");
                Console.Write("X√°c nh·∫≠n duy·ªát? (y/n): ");

                var confirmation = Console.ReadLine()?.ToLower();
                if (confirmation == "y" || confirmation == "yes")
                {
                    ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ duy·ªát {selectedRequest.PlayerName} gia nh·∫≠p ƒë·ªôi {selectedRequest.TeamName}!", false, 3000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu", false, 1500);
                }
            }
            else if (choice != 0)
            {
                ConsoleRenderingService.ShowMessageBox("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
            }

            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }
}
