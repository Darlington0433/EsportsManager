using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Utilities;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public class TeamManagementHandler
{
    private readonly ITeamService _teamService;
    private readonly IUserService _userService;

    public TeamManagementHandler(ITeamService teamService, IUserService userService)
    {
        _teamService = teamService;
        _userService = userService;
    }

    public async Task ManageTeamsAsync()
    {
        while (true)
        {
            var teamOptions = new[]
            {
                "Xem danh s√°ch ƒë·ªôi",
                "T√¨m ki·∫øm ƒë·ªôi",
                "Duy·ªát ƒë·ªôi m·ªõi",
                "Duy·ªát th√†nh vi√™n ƒë·ªôi",
                "‚¨ÖÔ∏è Quay l·∫°i"
            };

            int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù ƒê·ªòI/TEAM", teamOptions);

            switch (selection)
            {
                case 0:
                    await ViewAllTeamsAsync();
                    break;
                case 1:
                    await SearchTeamsAsync();
                    break;
                case 2:
                    await ApprovePendingTeamsAsync();
                    break;
                case 3:
                    await ApproveTeamMembersAsync();
                    break;
                case -1:
                case 4:
                    return;
            }
        }
    }

    private async Task ViewAllTeamsAsync()
    {
        try
        {
            var result = await _teamService.GetAllTeamsAsync();
            DisplayTeamsTableInBorder(result, 0, 0, Console.WindowWidth);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private async Task SearchTeamsAsync()
    {
        try
        {
            Console.Write("\nNh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm ƒë·ªôi: ");
            var searchTerm = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(searchTerm))
            {
                ConsoleRenderingService.ShowNotification("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c r·ªóng", ConsoleColor.Yellow);
                return;
            }
            var result = await _teamService.SearchTeamsAsync(searchTerm);
            DisplayTeamsTableInBorder(result, 0, 0, Console.WindowWidth);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Ph√™ duy·ªát c√°c ƒë·ªôi ƒëang ch·ªù x√©t duy·ªát
    /// </summary>
    private async Task ApprovePendingTeamsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("DUY·ªÜT ƒê·ªòI M·ªöI", 80, 20);

            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;

            // TODO: C·∫ßn b·ªï sung ph∆∞∆°ng th·ª©c GetPendingTeamsAsync() v√†o ITeamService
            // T·∫°m th·ªùi s·ª≠ d·ª•ng GetAllTeamsAsync v√† l·ªçc c√°c ƒë·ªôi c√≥ Status = "Pending"
            var allTeams = await _teamService.GetAllTeamsAsync();
            var pendingTeams = allTeams?.Where(t => t.Status == "Pending").ToList() ?? new List<TeamInfoDto>();

            if (pendingTeams.Count == 0)
            {
                Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Kh√¥ng c√≥ ƒë·ªôi n√†o ƒëang ch·ªù ph√™ duy·ªát");
                Console.ResetColor();
                Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
                Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
            Console.WriteLine("üìã Duy·ªát c√°c ƒë·ªôi ƒëang ch·ªù ph√™ duy·ªát");
            Console.WriteLine();

            Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
            Console.WriteLine("Danh s√°ch ƒë·ªôi ch·ªù duy·ªát:");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
            Console.WriteLine(new string('‚ïê', 70));

            int currentRow = borderTop + 6;
            int displayCount = Math.Min(pendingTeams.Count, 5);  // Gi·ªõi h·∫°n hi·ªÉn th·ªã t·ªëi ƒëa 5 ƒë·ªôi

            for (int i = 0; i < displayCount; i++)
            {
                var team = pendingTeams[i];
                Console.SetCursorPosition(borderLeft + 2, currentRow + i * 2);
                Console.WriteLine($"{i + 1}. {team.Name}");
                Console.SetCursorPosition(borderLeft + 4, currentRow + i * 2 + 1);
                Console.WriteLine($"   üë§ Leader: {team.LeaderName ?? "N/A"} | üë• Members: {team.MemberCount}");
            }

            Console.SetCursorPosition(borderLeft + 2, currentRow + displayCount * 2 + 2);
            Console.Write($"Ch·ªçn ƒë·ªôi ƒë·ªÉ duy·ªát (1-{displayCount}, 0 ƒë·ªÉ tho√°t): ");

            if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= displayCount)
            {
                var selectedTeam = pendingTeams[choice - 1];

                Console.SetCursorPosition(borderLeft + 2, currentRow + displayCount * 2 + 4);
                Console.WriteLine($"Duy·ªát ƒë·ªôi: {selectedTeam.Name}");
                Console.Write("X√°c nh·∫≠n duy·ªát ƒë·ªôi n√†y? (y/n): ");

                var confirmation = Console.ReadLine()?.ToLower();
                if (confirmation == "y" || confirmation == "yes")
                {
                    // TODO: C·∫ßn b·ªï sung ph∆∞∆°ng th·ª©c ApproveTeamAsync(int teamId) v√†o ITeamService
                    // T·∫°m th·ªùi hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                    ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ duy·ªát ƒë·ªôi '{selectedTeam.Name}' th√†nh c√¥ng!", false, 2500);

                    /* 
                    // ƒêo·∫°n code n√†y s·∫Ω ƒë∆∞·ª£c uncomment khi ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c b·ªï sung
                    var success = await _teamService.ApproveTeamAsync(selectedTeam.Id);
                    if (success)
                    {
                        ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ duy·ªát ƒë·ªôi '{selectedTeam.Name}' th√†nh c√¥ng!", false, 2500);
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("‚ùå Duy·ªát ƒë·ªôi th·∫•t b·∫°i!", true, 2000);
                    }
                    */
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy thao t√°c duy·ªát", false, 1500);
                }
            }
            else if (choice != 0)
            {
                ConsoleRenderingService.ShowMessageBox("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Ph√™ duy·ªát th√†nh vi√™n m·ªõi c·ªßa c√°c ƒë·ªôi
    /// </summary>
    private async Task ApproveTeamMembersAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("DUY·ªÜT TH√ÄNH VI√äN ƒê·ªòI", 80, 20);

            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;

            // TODO: C·∫ßn b·ªï sung TeamMemberRequestDto v√† ph∆∞∆°ng th·ª©c GetPendingTeamMemberRequestsAsync() v√†o ITeamService
            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("‚ö†Ô∏è T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai ƒë·∫ßy ƒë·ªß");
            Console.WriteLine();

            Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("C·∫ßn b·ªï sung c√°c ph∆∞∆°ng th·ª©c v√† DTO sau v√†o ITeamService:");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
            Console.WriteLine("- TeamMemberRequestDto");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
            Console.WriteLine("- GetPendingTeamMemberRequestsAsync()");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 7);
            Console.WriteLine("- ApproveTeamMemberRequestAsync(int requestId)");

            Console.SetCursorPosition(borderLeft + 2, borderTop + 9);
            Console.WriteLine("Vui l√≤ng li√™n h·ªá v·ªõi team ph√°t tri·ªÉn ƒë·ªÉ ho√†n thi·ªán t√≠nh nƒÉng n√†y.");

            Console.ResetColor();
            Console.SetCursorPosition(borderLeft + 2, borderTop + 11);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
            Console.ReadKey(true);

            /* TODO: Tri·ªÉn khai khi c√≥ c√°c ph∆∞∆°ng th·ª©c v√† DTO t∆∞∆°ng ·ª©ng
            var pendingRequests = await _teamService.GetPendingTeamMemberRequestsAsync();
            
            if (pendingRequests == null || !pendingRequests.Any())
            {
                Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Kh√¥ng c√≥ y√™u c·∫ßu gia nh·∫≠p ƒë·ªôi n√†o ƒëang ch·ªù duy·ªát");
                Console.ResetColor();
                Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
                Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
            Console.WriteLine("üë• Duy·ªát th√†nh vi√™n m·ªõi gia nh·∫≠p ƒë·ªôi");
            Console.WriteLine();

            Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
            Console.WriteLine("Y√™u c·∫ßu gia nh·∫≠p ƒë·ªôi:");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
            Console.WriteLine(new string('‚îÄ', 70));

            int currentRow = borderTop + 6;
            int displayCount = Math.Min(pendingRequests.Count, 5); // Gi·ªõi h·∫°n hi·ªÉn th·ªã t·ªëi ƒëa 5 y√™u c·∫ßu
            
            for (int i = 0; i < displayCount; i++)
            {
                var request = pendingRequests[i];
                Console.SetCursorPosition(borderLeft + 2, currentRow + i * 3);
                Console.WriteLine($"{i + 1}. {request.PlayerName} ‚Üí {request.TeamName}");
                Console.SetCursorPosition(borderLeft + 4, currentRow + i * 3 + 1);
                Console.WriteLine($"   üéØ Role: {request.Role} | ‚è±Ô∏è Experience: {request.Experience}");
                Console.SetCursorPosition(borderLeft + 4, currentRow + i * 3 + 2);
                Console.WriteLine($"   üìä Status: {request.Status}");
            }

            Console.SetCursorPosition(borderLeft + 2, currentRow + displayCount * 3 + 2);
            Console.Write($"Ch·ªçn y√™u c·∫ßu ƒë·ªÉ duy·ªát (1-{displayCount}, 0 ƒë·ªÉ tho√°t): ");

            if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= displayCount)
            {
                var selectedRequest = pendingRequests[choice - 1];

                Console.SetCursorPosition(borderLeft + 2, currentRow + displayCount * 3 + 4);
                Console.WriteLine($"Duy·ªát: {selectedRequest.PlayerName} gia nh·∫≠p {selectedRequest.TeamName}");
                Console.Write("X√°c nh·∫≠n duy·ªát? (y/n): ");

                var confirmation = Console.ReadLine()?.ToLower();
                if (confirmation == "y" || confirmation == "yes")
                {
                    var success = await _teamService.ApproveTeamMemberRequestAsync(selectedRequest.Id);
                    if (success)
                    {
                        ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ duy·ªát {selectedRequest.PlayerName} gia nh·∫≠p ƒë·ªôi {selectedRequest.TeamName}!", false, 3000);
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("‚ùå Duy·ªát th√†nh vi√™n th·∫•t b·∫°i!", true, 2000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu", false, 1500);
                }
            }
            else if (choice != 0)
            {
                ConsoleRenderingService.ShowMessageBox("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
            */

            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã prompt "Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c..." ·ªü d√≤ng cu·ªëi c√πng ngo√†i border, an to√†n cho m·ªçi k√≠ch th∆∞·ªõc console.
    /// </summary>
    private static void ShowContinuePromptOutsideBorder()
    {
        int lastLine = Math.Max(Console.WindowTop + Console.WindowHeight - 2, 0);
        Console.SetCursorPosition(0, lastLine);
        Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        Console.ReadKey(true);
    }

    private void DisplayTeamsTableInBorder(IEnumerable<TeamInfoDto> teams, int startX, int startY, int maxWidth)
    {
        var headers = new[] { "ID", "T√™n ƒë·ªôi", "Tr∆∞·ªüng ƒë·ªôi", "S·ªë th√†nh vi√™n", "Ng√†y t·∫°o" };
        var rows = teams.Select(t => new[] {
            t.Id.ToString(),
            t.Name.Length > 18 ? t.Name.Substring(0, 18) : t.Name,
            t.LeaderName.Length > 14 ? t.LeaderName.Substring(0, 14) : t.LeaderName,
            t.MemberCount.ToString(),
            t.CreatedAt.ToString("dd/MM/yyyy")
        }).ToList();
        int borderWidth = maxWidth;
        int borderHeight = 16;
        int[] colWidths = { 5, 20, 16, 10, 14 }; // T·ªïng + ph√¢n c√°ch <= borderWidth - 4
        UIHelper.PrintTableInBorder(headers, rows, borderWidth, borderHeight, startX, startY, colWidths);
        int infoY = startY + 2 + rows.Count + 2;
        UIHelper.PrintPromptInBorder($"T·ªïng c·ªông: {teams.Count()} ƒë·ªôi", startX, infoY, borderWidth - 4);
        Console.SetCursorPosition(0, startY + borderHeight + 1);
        Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
    }
}
