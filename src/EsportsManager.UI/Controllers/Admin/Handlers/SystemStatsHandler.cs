using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.DAL.Context;
using System.Data;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

/// <summary>
/// Handler hi·ªÉn th·ªã th·ªëng k√™ h·ªá th·ªëng. T·ªëi ∆∞u h√≥a, lo·∫°i b·ªè hardcode, comment chu·∫©n dev chuy√™n nghi·ªáp.
/// </summary>
public class SystemStatsHandler
{
    // UI constants - c·∫•u h√¨nh UI d√πng chung
    private const int DefaultBorderWidth = 80;
    private const int DefaultBorderHeight = 25;
    private const int ErrorBorderWidth = 80;
    private const int ErrorBorderHeight = 20;
    private const int DetailBorderWidth = 90;
    private const int DetailBorderHeight = 30;
    private const int FallbackContinueLine = 30; // D√≤ng c·ªë ƒë·ªãnh ngo√†i border cho fallback

    private readonly IUserService _userService;
    private readonly ITournamentService _tournamentService;
    private readonly ITeamService _teamService;

    public SystemStatsHandler(IUserService userService, ITournamentService tournamentService, ITeamService teamService)
    {
        _userService = userService;
        _tournamentService = tournamentService;
        _teamService = teamService;
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan h·ªá th·ªëng, t·ªëi ∆∞u UI v√† x·ª≠ l√Ω l·ªói/fallback.
    /// </summary>
    public async Task ViewSystemStatsAsync()
    {
        try
        {
            // V·∫Ω border v√† l·∫•y v·ªã tr√≠ content
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä H·ªÜ TH·ªêNG", DefaultBorderWidth, DefaultBorderHeight);
            var (left, top, width) = ConsoleRenderingService.GetBorderContentPosition(DefaultBorderWidth, DefaultBorderHeight);
            ShowLoadingMessage(left, top, width);

            // Kh·ªüi t·∫°o bi·∫øn th·ªëng k√™
            List<UserProfileDto>? users = null;
            List<TournamentInfoDto>? tournaments = null;
            List<TeamInfoDto>? teams = null;
            int totalUsers = 0, totalTournaments = 0, totalTeams = 0;
            int activeUsers = 0, ongoingTournaments = 0, completedTournaments = 0;
            decimal totalPrizePool = 0, totalEntryFees = 0;
            double avgTeamsPerTournament = 0;
            int recentTournaments = 0;
            bool useServiceData = true;

            // L·∫•y d·ªØ li·ªáu t·ª´ng ph·∫ßn, n·∫øu l·ªói s·∫Ω fallback
            try { users = await _userService.GetAllUsersAsync(); totalUsers = users?.Count() ?? 0; activeUsers = users?.Count(u => u.Status == "Active") ?? 0; } catch { useServiceData = false; }
            try { tournaments = await _tournamentService.GetAllTournamentsAsync();
                totalTournaments = tournaments?.Count() ?? 0;
                if (tournaments != null)
                {
                    ongoingTournaments = tournaments.Count(t => t.Status == "Ongoing" || t.Status == "Registration");
                    completedTournaments = tournaments.Count(t => t.Status == "Completed");
                    totalPrizePool = tournaments.Sum(t => t.PrizePool);
                    totalEntryFees = tournaments.Sum(t => t.EntryFee * t.RegisteredTeams);
                    avgTeamsPerTournament = tournaments.Any() ? tournaments.Average(t => t.RegisteredTeams) : 0;
                    recentTournaments = tournaments.Count(t => t.CreatedAt >= DateTime.Now.AddDays(-7));
                }
            } catch { useServiceData = false; }
            try { teams = await _teamService.GetAllTeamsAsync(); totalTeams = teams?.Count() ?? 0; } catch { useServiceData = false; }

            // Fallback n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu
            if (!useServiceData || (totalUsers == 0 && totalTournaments == 0 && totalTeams == 0))
            {
                var dbStats = await GetStatsFromDatabaseAsync();
                if (dbStats.users > 0 || dbStats.tournaments > 0 || dbStats.teams > 0)
                {
                    totalUsers = dbStats.users;
                    totalTournaments = dbStats.tournaments;
                    totalTeams = dbStats.teams;
                    activeUsers = dbStats.activeUsers;
                    totalPrizePool = dbStats.totalPrizePool;
                }
            }

            // Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ t·ªïng quan
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä H·ªÜ TH·ªêNG", DefaultBorderWidth, DefaultBorderHeight);
            (left, top, width) = ConsoleRenderingService.GetBorderContentPosition(DefaultBorderWidth, DefaultBorderHeight);
            PrintSystemStatsTable(left, top, width, totalUsers, totalTournaments, totalTeams, ongoingTournaments, completedTournaments, totalPrizePool, totalEntryFees, avgTeamsPerTournament, activeUsers, recentTournaments);
        }
        catch (Exception ex)
        {
            ShowErrorStats(ex);
        }
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng b√°o loading.
    /// </summary>
    private static void ShowLoadingMessage(int left, int top, int width)
    {
        Console.SetCursorPosition(left, top);
        Console.WriteLine("üîÑ ƒêang t·∫£i d·ªØ li·ªáu th·ªëng k√™...".PadRight(width));
    }

    /// <summary>
    /// In b·∫£ng th·ªëng k√™ t·ªïng quan h·ªá th·ªëng.
    /// </summary>
    private void PrintSystemStatsTable(int left, int top, int width, int totalUsers, int totalTournaments, int totalTeams, int ongoingTournaments, int completedTournaments, decimal totalPrizePool, decimal totalEntryFees, double avgTeamsPerTournament, int activeUsers, int recentTournaments)
    {
        string[] lines =
        {
            "üìä T·ªîNG QUAN H·ªÜ TH·ªêNG:",
            new string('‚îÄ', width),
            $"üë• T·ªïng s·ªë ng∆∞·ªùi d√πng      : {totalUsers:N0}",
            $"üèÜ T·ªïng s·ªë gi·∫£i ƒë·∫•u        : {totalTournaments:N0}",
            $"‚öîÔ∏è T·ªïng s·ªë ƒë·ªôi             : {totalTeams:N0}",
            $"üéÆ Gi·∫£i ƒë·∫•u ƒëang ho·∫°t ƒë·ªông : {ongoingTournaments:N0}",
            $"‚úÖ Gi·∫£i ƒë·∫•u ƒë√£ ho√†n th√†nh  : {completedTournaments:N0}",
            "",
            "üí∞ TH·ªêNG K√ä T√ÄI CH√çNH:",
            new string('‚îÄ', width),
            $"üíé T·ªïng gi·∫£i th∆∞·ªüng        : {totalPrizePool:N0} VND",
            $"üíµ T·ªïng ph√≠ tham gia       : {totalEntryFees:N0} VND",
            $"üí∏ Doanh thu ∆∞·ªõc t√≠nh      : {(totalEntryFees - totalPrizePool):N0} VND",
            "",
            "üìà TH·ªêNG K√ä HO·∫†T ƒê·ªòNG:",
            new string('‚îÄ', width),
            $"üë§ Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông    : {activeUsers:N0}",
            $"üìä Trung b√¨nh team/gi·∫£i ƒë·∫•u: {avgTeamsPerTournament:F1}",
            $"üèÉ T·ª∑ l·ªá ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông: {(totalUsers > 0 ? (double)activeUsers / totalUsers * 100 : 0):F1}%",
            "",
            "üìÖ HO·∫†T ƒê·ªòNG G·∫¶N ƒê√ÇY:",
            new string('‚îÄ', width),
            $"üÜï Gi·∫£i ƒë·∫•u t·∫°o trong 7 ng√†y: {recentTournaments:N0}",
            $"üìà T·ª∑ l·ªá tƒÉng tr∆∞·ªüng       : {(totalTournaments > 0 ? (double)recentTournaments / totalTournaments * 100 : 0):F1}%",
            "",
            "üñ•Ô∏è T√åNH TR·∫†NG H·ªÜ TH·ªêNG:",
            new string('‚îÄ', width),
            $"‚ö° Tr·∫°ng th√°i h·ªá th·ªëng     : {((totalUsers == 0 && totalTournaments == 0 && totalTeams == 0) ? "üî¥ Kh√¥ng c√≥ d·ªØ li·ªáu" : (activeUsers < totalUsers * 0.5 ? "üü° C·∫ßn ch√∫ √Ω" : "üü¢ T·ªët"))}",
            $"üïê C·∫≠p nh·∫≠t l·∫ßn cu·ªëi      : {DateTime.Now:dd/MM/yyyy HH:mm:ss}"
        };
        for (int i = 0; i < lines.Length; i++)
        {
            Console.SetCursorPosition(left, top + i);
            Console.WriteLine(lines[i].Length > width ? lines[i].Substring(0, width) : lines[i].PadRight(width));
        }
        int row = top + lines.Length;
        // G·ª£i √Ω n·∫øu thi·∫øu d·ªØ li·ªáu
        if (totalUsers == 0 || totalTournaments == 0 || totalTeams == 0)
        {
            string[] recs =
            {
                "üí° G·ª¢I √ù:",
                new string('‚îÄ', width),
                totalUsers == 0 ? "‚Ä¢ T·∫°o th√™m t√†i kho·∫£n ng∆∞·ªùi d√πng ƒë·ªÉ test h·ªá th·ªëng" : null,
                totalTournaments == 0 ? "‚Ä¢ T·∫°o gi·∫£i ƒë·∫•u m·ªõi ƒë·ªÉ tƒÉng ho·∫°t ƒë·ªông" : null,
                totalTeams == 0 ? "‚Ä¢ Khuy·∫øn kh√≠ch ng∆∞·ªùi ch∆°i t·∫°o ƒë·ªôi" : null,
                "‚Ä¢ Ch·∫°y script sample data: database/ADD_SAMPLE_DONATIONS.sql"
            };
            foreach (var rec in recs)
            {
                if (rec == null) continue;
                Console.SetCursorPosition(left, row++);
                Console.WriteLine(rec.Length > width ? rec.Substring(0, width) : rec.PadRight(width));
            }
        }
        Console.SetCursorPosition(left, row + 1);
        Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...".PadRight(width));
        Console.ReadKey(true);
    }

    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng b√°o l·ªói v√† fallback th·ªëng k√™ c∆° b·∫£n.
    /// </summary>
    private async void ShowErrorStats(Exception ex)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("L·ªñI TH·ªêNG K√ä H·ªÜ TH·ªêNG", ErrorBorderWidth, ErrorBorderHeight);
        // X·ª≠ l√Ω l·ªói v√† g·ª£i √Ω
        string errorMessage = ex.Message;
        string suggestion = GetSuggestionForError(errorMessage);
        Console.WriteLine("‚ùå ƒê√É X·∫¢Y RA L·ªñI KHI T·∫¢I TH·ªêNG K√ä:");
        Console.WriteLine(new string('‚ïê', 70));
        Console.WriteLine($"üîç Chi ti·∫øt l·ªói: {errorMessage}");
        Console.WriteLine(suggestion);
        Console.WriteLine("\nüîß TH·ªêNG K√ä C∆† B·∫¢N (FALLBACK):");
        Console.WriteLine(new string('‚ïê', 70));
        Console.WriteLine($"üïê Th·ªùi gian hi·ªán t·∫°i: {DateTime.Now:dd/MM/yyyy HH:mm:ss}");
        Console.WriteLine($"üíª H·ªá th·ªëng: {Environment.OSVersion}");
        Console.WriteLine($"üñ•Ô∏è Machine: {Environment.MachineName}");
        Console.WriteLine($"üë§ User: {Environment.UserName}");
        // Fallback tr·ª±c ti·∫øp t·ª´ database
        var fallbackStats = await GetStatsFromDatabaseAsync();
        Console.WriteLine($"\nüìä TH·ªêNG K√ä T·ª™ DATABASE TR·ª∞C TI·∫æP:");
        Console.WriteLine($"üë• T·ªïng s·ªë ng∆∞·ªùi d√πng      : {fallbackStats.users:N0}");
        Console.WriteLine($"üèÜ T·ªïng s·ªë gi·∫£i ƒë·∫•u        : {fallbackStats.tournaments:N0}");
        Console.WriteLine($"‚öîÔ∏è T·ªïng s·ªë ƒë·ªôi             : {fallbackStats.teams:N0}");
        Console.WriteLine($"üéÆ Gi·∫£i ƒë·∫•u ƒëang ho·∫°t ƒë·ªông : {fallbackStats.activeUsers:N0}");
        Console.WriteLine($"üí∞ T·ªïng gi·∫£i th∆∞·ªüng        : {fallbackStats.totalPrizePool:N0} VND");
        // ƒê∆∞a d√≤ng ti·∫øp t·ª•c ra ngo√†i border
        Console.SetCursorPosition(0, FallbackContinueLine);
        Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        Console.ReadKey(true);
    }

    /// <summary>
    /// G·ª£i √Ω s·ª≠a l·ªói d·ª±a tr√™n n·ªôi dung exception.
    /// </summary>
    private static string GetSuggestionForError(string errorMessage)
    {
        if (errorMessage.Contains("connection") || errorMessage.Contains("database"))
        {
            return "\n\nüí° KI·ªÇM TRA:\n1. MySQL server ƒëang ch·∫°y?\n2. Database 'EsportsManager' ƒë√£ t·ªìn t·∫°i?\n3. Th√¥ng tin k·∫øt n·ªëi trong appsettings.json ƒë√∫ng?\n4. Ch·∫°y l·∫°i script database/esportsmanager.sql";
        }
        if (errorMessage.Contains("method") || errorMessage.Contains("service"))
        {
            return "\n\nüí° NGUY√äN NH√ÇN C√ì TH·ªÇ:\n1. Service kh√¥ng ƒë∆∞·ª£c inject ƒë√∫ng c√°ch\n2. Method GetAll...Async() ch∆∞a ƒë∆∞·ª£c implement\n3. DTO models kh√¥ng kh·ªõp v·ªõi database schema";
        }
        if (errorMessage.Contains("table") || errorMessage.Contains("column"))
        {
            return "\n\nüí° S·ª¨A L·ªñI DATABASE:\n1. Ch·∫°y script: database/esportsmanager.sql\n2. Ki·ªÉm tra c√°c b·∫£ng Users, Tournaments, Teams\n3. Th√™m d·ªØ li·ªáu m·∫´u ƒë·ªÉ test";
        }
        return string.Empty;
    }

    // Helper method ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™ chi ti·∫øt
    private async Task ShowDetailedStatsAsync(List<UserProfileDto>? users, List<TournamentInfoDto>? tournaments, List<TeamInfoDto>? teams)
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("TH·ªêNG K√ä CHI TI·∫æT", 90, 30);

        // User Statistics
        if (users != null && users.Any())
        {
            Console.WriteLine("üë• CHI TI·∫æT NG∆Ø·ªúI D√ôNG:");
            Console.WriteLine(new string('‚ïê', 70));
            
            var usersByRole = users.GroupBy(u => u.Role);
            foreach (var group in usersByRole)
            {
                string roleIcon = group.Key switch
                {
                    "Admin" => "üë®‚Äçüíº",
                    "Player" => "üéÆ",
                    "Viewer" => "üëÅÔ∏è",
                    _ => "‚ùì"
                };
                Console.WriteLine($"{roleIcon} {group.Key}: {group.Count()} ng∆∞·ªùi");
            }

            var usersByStatus = users.GroupBy(u => u.Status);
            Console.WriteLine("\nüìä Theo tr·∫°ng th√°i:");
            foreach (var group in usersByStatus)
            {
                string statusIcon = group.Key switch
                {
                    "Active" => "‚úÖ",
                    "Inactive" => "‚è∏Ô∏è",
                    "Suspended" => "üö´",
                    "Pending" => "‚è≥",
                    _ => "‚ùì"
                };
                Console.WriteLine($"   {statusIcon} {group.Key}: {group.Count()} ng∆∞·ªùi");
            }
        }

        // Tournament Statistics
        if (tournaments != null && tournaments.Any())
        {
            Console.WriteLine("\nüèÜ CHI TI·∫æT GI·∫¢I ƒê·∫§U:");
            Console.WriteLine(new string('‚ïê', 70));
            
            var tournamentsByStatus = tournaments.GroupBy(t => t.Status);
            foreach (var group in tournamentsByStatus)
            {
                string statusIcon = group.Key switch
                {
                    "Draft" => "üìù",
                    "Registration" => "üìù",
                    "Ongoing" => "üéÆ",
                    "Completed" => "‚úÖ",
                    "Cancelled" => "‚ùå",
                    _ => "‚ùì"
                };
                Console.WriteLine($"{statusIcon} {group.Key}: {group.Count()} gi·∫£i ƒë·∫•u");
            }

            Console.WriteLine("\nüí∞ Top 5 gi·∫£i ƒë·∫•u c√≥ gi·∫£i th∆∞·ªüng cao nh·∫•t:");
            var topPrizeTournaments = tournaments
                .OrderByDescending(t => t.PrizePool)
                .Take(5)
                .ToList();

            foreach (var tournament in topPrizeTournaments)
            {
                string name = tournament.TournamentName.Length > 30 
                    ? tournament.TournamentName.Substring(0, 27) + "..."
                    : tournament.TournamentName;
                Console.WriteLine($"   üèÜ {name}: {tournament.PrizePool:N0} VND");
            }
        }

        // Team Statistics  
        if (teams != null && teams.Any())
        {
            Console.WriteLine("\n‚öîÔ∏è CHI TI·∫æT ƒê·ªòI:");
            Console.WriteLine(new string('‚ïê', 70));
            
            var teamsByStatus = teams.GroupBy(t => t.Status);
            foreach (var group in teamsByStatus)
            {
                string statusIcon = group.Key switch
                {
                    "Active" => "‚úÖ",
                    "Disbanded" => "üíî",
                    _ => "‚ùì"
                };
                Console.WriteLine($"{statusIcon} {group.Key}: {group.Count()} ƒë·ªôi");
            }

            // Show team size distribution if MemberCount is available
            try
            {
                var teamSizes = teams.Where(t => t.MemberCount > 0);
                if (teamSizes.Any())
                {
                    Console.WriteLine("\nüìä Ph√¢n b·ªë k√≠ch th∆∞·ªõc ƒë·ªôi:");
                    var avgSize = teamSizes.Average(t => t.MemberCount);
                    var maxSize = teamSizes.Max(t => t.MemberCount);
                    var minSize = teamSizes.Min(t => t.MemberCount);
                    
                    Console.WriteLine($"   üìà Trung b√¨nh: {avgSize:F1} th√†nh vi√™n");
                    Console.WriteLine($"   üîù L·ªõn nh·∫•t: {maxSize} th√†nh vi√™n");  
                    Console.WriteLine($"   üîª Nh·ªè nh·∫•t: {minSize} th√†nh vi√™n");
                }
            }
            catch
            {
                // MemberCount property might not exist, skip this section
            }
        }

        // System Recommendations
        Console.WriteLine("\nüí° KHUY·∫æN NGH·ªä:");
        Console.WriteLine(new string('‚ïê', 70));
        
        bool hasRecommendations = false;

        if (users == null || !users.Any())
        {
            Console.WriteLine("‚ö†Ô∏è  C·∫ßn t·∫°o th√™m t√†i kho·∫£n ng∆∞·ªùi d√πng");
            hasRecommendations = true;
        }
        else if (users.Count(u => u.Status == "Active") < users.Count() * 0.7)
        {
            Console.WriteLine("‚ö†Ô∏è  T·ª∑ l·ªá ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông th·∫•p - c·∫ßn k√≠ch ho·∫°t");
            hasRecommendations = true;
        }

        if (tournaments == null || !tournaments.Any())
        {
            Console.WriteLine("‚ö†Ô∏è  C·∫ßn t·∫°o gi·∫£i ƒë·∫•u ƒë·ªÉ tƒÉng ho·∫°t ƒë·ªông");
            hasRecommendations = true;
        }
        else if (tournaments.Count(t => t.Status == "Ongoing") == 0)
        {
            Console.WriteLine("‚ö†Ô∏è  Kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o ƒëang di·ªÖn ra");
            hasRecommendations = true;
        }

        if (teams == null || !teams.Any())
        {
            Console.WriteLine("‚ö†Ô∏è  C·∫ßn khuy·∫øn kh√≠ch ng∆∞·ªùi ch∆°i t·∫°o ƒë·ªôi");
            hasRecommendations = true;
        }

        if (!hasRecommendations)
        {
            Console.WriteLine("‚úÖ H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông t·ªët!");
        }

        Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ quay l·∫°i...");
        Console.ReadKey(true);
    }

    // Helper method ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u n·∫øu c·∫ßn
    private async Task CreateSampleDataIfNeededAsync()
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("T·∫†O D·ªÆ LI·ªÜU M·∫™U", 70, 15);
        
        Console.WriteLine("üîß T√≠nh nƒÉng n√†y s·∫Ω t·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng:");
        Console.WriteLine("- T·∫°o users m·∫´u (Admin, Player, Viewer)");
        Console.WriteLine("- T·∫°o tournaments m·∫´u");
        Console.WriteLine("- T·∫°o teams m·∫´u");
        Console.WriteLine("- T·∫°o sample donations");
        Console.WriteLine();
        Console.WriteLine("‚ö†Ô∏è  C·∫£nh b√°o: Ch·ªâ n√™n ch·∫°y tr√™n database test!");
        Console.WriteLine();
        Console.Write("B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N): ");
        
        var response = Console.ReadKey();
        if (response.KeyChar == 'y' || response.KeyChar == 'Y')
        {
            Console.WriteLine("\n\nüîÑ ƒêang t·∫°o d·ªØ li·ªáu m·∫´u...");
            Console.WriteLine("üí° Vui l√≤ng ch·∫°y script sau trong MySQL:");
            Console.WriteLine("   mysql -u root -p EsportsManager < database/ADD_SAMPLE_DONATIONS.sql");
            Console.WriteLine();
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey();
        }
    }

    // Fallback method to get stats directly from database if services fail
    private async Task<(int users, int tournaments, int teams, int activeUsers, decimal totalPrizePool)> GetStatsFromDatabaseAsync()
    {
        try
        {
            // Try to get basic stats from services first
            int totalUsers = 0, totalTournaments = 0, totalTeams = 0;
            int activeUsers = 0;
            decimal totalPrizePool = 0;

            // Fallback - try each service individually
            try
            {
                var users = await _userService.GetAllUsersAsync();
                totalUsers = users?.Count ?? 0;
                activeUsers = users?.Count(u => u.Status == "Active") ?? 0;
            }
            catch
            {
                // If service fails, set to 0
                totalUsers = 0;
                activeUsers = 0;
            }

            try
            {
                var tournaments = await _tournamentService.GetAllTournamentsAsync();
                totalTournaments = tournaments?.Count ?? 0;
                totalPrizePool = tournaments?.Sum(t => t.PrizePool) ?? 0;
            }
            catch
            {
                totalTournaments = 0;
                totalPrizePool = 0;
            }

            try 
            {
                var teams = await _teamService.GetAllTeamsAsync();
                totalTeams = teams?.Count ?? 0;
            }
            catch
            {
                totalTeams = 0;
            }

            return (totalUsers, totalTournaments, totalTeams, activeUsers, totalPrizePool);
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è Database fallback failed: {ex.Message}");
        }

        return (0, 0, 0, 0, 0);
    }

    // Method to test database connection and suggest fixes
    private async Task<bool> TestDatabaseConnectionAsync()
    {
        try
        {
            // Try to get any data from services to test connection
            var users = await _userService.GetAllUsersAsync();
            return users != null; // If we
        }
        catch
        {
            return false;
        }
    }

    // Method to run database fixes
    private async Task RunDatabaseFixesAsync()
    {
        Console.Clear();
        ConsoleRenderingService.DrawBorder("S·ª¨A L·ªñI DATABASE", 70, 20);
        
        Console.WriteLine("üîß ƒêANG KI·ªÇM TRA V√Ä S·ª¨A L·ªñI DATABASE...");
        Console.WriteLine();

        bool canConnect = await TestDatabaseConnectionAsync();
        
        if (!canConnect)
        {
            Console.WriteLine("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database!");
            Console.WriteLine();
            Console.WriteLine("üí° KI·ªÇM TRA:");
            Console.WriteLine("1. MySQL server ƒëang ch·∫°y?");
            Console.WriteLine("2. Database 'EsportsManager' ƒë√£ t·ªìn t·∫°i?");
            Console.WriteLine("3. Connection string ƒë√∫ng?");
            Console.WriteLine();
            Console.WriteLine("üîß H∆Ø·ªöNG D·∫™N S·ª¨A:");
            Console.WriteLine("1. Kh·ªüi ƒë·ªông MySQL service");
            Console.WriteLine("2. Ch·∫°y: mysql -u root -p EsportsManager < database/esportsmanager.sql");
            Console.WriteLine("3. Ch·∫°y: mysql -u root -p EsportsManager < database/SYSTEM_STATS_FIX.sql");
        }
        else
        {
            Console.WriteLine("‚úÖ Database connection OK");
            Console.WriteLine("üîß ƒê·ªÉ ch·∫°y fix procedures, th·ª≠:");
            Console.WriteLine("mysql -u root -p EsportsManager < database/SYSTEM_STATS_FIX.sql");
        }

        Console.WriteLine("\nNh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
        Console.ReadKey(true);
    }
}
