using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.Admin.Interfaces;

namespace EsportsManager.UI.Controllers.Admin.Handlers;

public class UserManagementHandler
{
    private readonly IUserService _userService;
    private readonly IAchievementService _achievementService;

    public UserManagementHandler(IUserService userService, IAchievementService achievementService)
    {
        _userService = userService;
        _achievementService = achievementService;
    }

    public async Task ShowAllUsersAsync()
    {
        try
        {
            var result = await _userService.GetActiveUsersAsync();

            Console.Clear();
            ConsoleRenderingService.DrawBorder("DANH S√ÅCH NG∆Ø·ªúI D√ôNG", 80, 20);

            if (!result.IsSuccess || result.Data == null || !result.Data.Any())
            {
                // Set cursor v√†o gi·ªØa border ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
                int centerX = (Console.WindowWidth - 30) / 2;
                int centerY = Console.WindowHeight / 2;
                Console.SetCursorPosition(centerX, centerY);
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.");
                Console.ResetColor();
                Console.SetCursorPosition(centerX - 10, centerY + 2);
                Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // T√≠nh v·ªã tr√≠ ƒë·ªÉ hi·ªÉn th·ªã data b√™n trong border
            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;

            // Set cursor v√†o b√™n trong border (c√°ch border 2 k√Ω t·ª± t·ª´ tr√°i v√† 2 d√≤ng t·ª´ tr√™n)
            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);

            DisplayUsersTableInBorder(result.Data, borderLeft + 2, borderTop + 2, 76);

            // Hi·ªÉn th·ªã t·ªïng s·ªë v√† th√¥ng b√°o ·ªü cu·ªëi border
            Console.SetCursorPosition(borderLeft + 2, borderTop + 16);
            Console.WriteLine($"T·ªïng c·ªông: {result.Data.Count()} ng∆∞·ªùi d√πng");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 17);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng: {ex.Message}", true, 3000);
        }
    }

    public async Task SearchUsersAsync()
    {
        try
        {
            Console.Write("\nNh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm: ");
            var searchTerm = Console.ReadLine()?.Trim();

            if (string.IsNullOrEmpty(searchTerm))
            {
                ConsoleRenderingService.ShowNotification("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c r·ªóng", ConsoleColor.Yellow);
                return;
            }

            var result = await _userService.GetActiveUsersAsync();
            if (!result.IsSuccess || result.Data == null)
            {
                ConsoleRenderingService.ShowNotification("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng", ConsoleColor.Red);
                return;
            }

            var filteredUsers = FilterUsers(result.Data, searchTerm);

            Console.Clear();
            ConsoleRenderingService.DrawBorder($"K·∫æT QU·∫¢ T√åM KI·∫æM: {searchTerm}", 80, 20);

            if (!filteredUsers.Any())
            {
                // Set cursor v√†o gi·ªØa border ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
                int centerX = (Console.WindowWidth - 25) / 2;
                int centerY = Console.WindowHeight / 2;
                Console.SetCursorPosition(centerX, centerY);
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o");
                Console.ResetColor();
                Console.SetCursorPosition(centerX - 10, centerY + 2);
                Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // T√≠nh v·ªã tr√≠ ƒë·ªÉ hi·ªÉn th·ªã data b√™n trong border
            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;

            // Set cursor v√†o b√™n trong border
            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);

            DisplayUsersTableInBorder(filteredUsers, borderLeft + 2, borderTop + 2, 76);

            // Hi·ªÉn th·ªã t·ªïng s·ªë v√† th√¥ng b√°o ·ªü cu·ªëi border
            Console.SetCursorPosition(borderLeft + 2, borderTop + 16);
            Console.WriteLine($"T√¨m th·∫•y: {filteredUsers.Count()} k·∫øt qu·∫£");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 17);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói khi t√¨m ki·∫øm ng∆∞·ªùi d√πng: {ex.Message}", true, 3000);
        }
    }

    public async Task ToggleUserStatusAsync()
    {
        try
        {
            Console.Write("\nNh·∫≠p User ID c·∫ßn thay ƒë·ªïi tr·∫°ng th√°i: ");
            if (!int.TryParse(Console.ReadLine(), out int userId))
            {
                ConsoleRenderingService.ShowNotification("User ID kh√¥ng h·ª£p l·ªá!", ConsoleColor.Red);
                return;
            }

            var userResult = await _userService.GetUserByIdAsync(userId);
            if (!userResult.IsSuccess || userResult.Data == null)
            {
                ConsoleRenderingService.ShowNotification("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!", ConsoleColor.Red);
                return;
            }

            var user = userResult.Data;
            var newStatus = user.Status == "Active" ? "Inactive" : "Active";
            var actionText = newStatus == "Active" ? "k√≠ch ho·∫°t" : "v√¥ hi·ªáu h√≥a";

            Console.WriteLine($"\nTh√¥ng tin ng∆∞·ªùi d√πng:");
            Console.WriteLine($"ID: {user.Id}");
            Console.WriteLine($"Username: {user.Username}");
            Console.WriteLine($"Email: {user.Email}");
            Console.WriteLine($"Tr·∫°ng th√°i hi·ªán t·∫°i: {user.Status}");
            Console.WriteLine($"Tr·∫°ng th√°i m·ªõi: {newStatus}");

            Console.Write($"\nX√°c nh·∫≠n {actionText} ng∆∞·ªùi d√πng n√†y? (y/n): ");
            var confirmation = Console.ReadLine()?.ToLower();

            if (confirmation == "y" || confirmation == "yes")
            {
                var result = await _userService.UpdateUserStatusAsync(userId, newStatus);
                if (result.IsSuccess)
                {
                    ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ {actionText} ng∆∞·ªùi d√πng th√†nh c√¥ng!", false, 2000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå Thay ƒë·ªïi tr·∫°ng th√°i th·∫•t b·∫°i!", true, 2000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy thao t√°c", false, 1000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    public async Task ResetUserPasswordAsync()
    {
        try
        {
            Console.Write("\nNh·∫≠p User ID c·∫ßn reset m·∫≠t kh·∫©u: ");
            if (!int.TryParse(Console.ReadLine(), out int userId))
            {
                ConsoleRenderingService.ShowNotification("User ID kh√¥ng h·ª£p l·ªá!", ConsoleColor.Red);
                return;
            }

            var userResult = await _userService.GetUserByIdAsync(userId);
            if (!userResult.IsSuccess || userResult.Data == null)
            {
                ConsoleRenderingService.ShowNotification("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!", ConsoleColor.Red);
                return;
            }

            var user = userResult.Data;
            Console.WriteLine($"\nTh√¥ng tin ng∆∞·ªùi d√πng:");
            Console.WriteLine($"Username: {user.Username}");
            Console.WriteLine($"Email: {user.Email}");

            Console.Write("\nX√°c nh·∫≠n reset m·∫≠t kh·∫©u? (y/n): ");
            var confirmation = Console.ReadLine()?.ToLower();

            if (confirmation == "y" || confirmation == "yes")
            {
                var resetResult = await _userService.ResetPasswordAsync(userId);
                if (!string.IsNullOrEmpty(resetResult))
                {
                    ConsoleRenderingService.ShowNotification($"‚úÖ ƒê√£ reset m·∫≠t kh·∫©u th√†nh c√¥ng. M·∫≠t kh·∫©u m·ªõi: {resetResult}", ConsoleColor.Green);
                }
                else
                {
                    ConsoleRenderingService.ShowNotification("‚ùå L·ªói khi reset m·∫≠t kh·∫©u", ConsoleColor.Red);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy thao t√°c", false, 1000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    public async Task DeleteUsersAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("X√ìA NG∆Ø·ªúI D√ôNG", 80, 15);

            Console.WriteLine("‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn ng∆∞·ªùi d√πng!");
            Console.WriteLine("üìã D·ªØ li·ªáu s·∫Ω b·ªã x√≥a:");
            Console.WriteLine("   ‚Ä¢ Th√¥ng tin t√†i kho·∫£n");
            Console.WriteLine("   ‚Ä¢ L·ªãch s·ª≠ tham gia gi·∫£i ƒë·∫•u");
            Console.WriteLine("   ‚Ä¢ D·ªØ li·ªáu team");
            Console.WriteLine("   ‚Ä¢ L·ªãch s·ª≠ giao d·ªãch");

            Console.Write("\nNh·∫≠p User ID c·∫ßn x√≥a: ");
            if (int.TryParse(Console.ReadLine(), out int userId))
            {
                // Check if trying to delete their own account (Admin cannot delete themselves)
                var currentUser = EsportsManager.UI.Services.UserSessionManager.CurrentUser;
                if (currentUser != null && currentUser.Id == userId && currentUser.Role == "Admin")
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå Admin kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n c·ªßa ch√≠nh m√¨nh!", true, 3000);
                    return;
                }

                // Get user details to check role
                var userResult = await _userService.GetUserByIdAsync(userId);
                if (!userResult.IsSuccess || userResult.Data == null)
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!", true, 2000);
                    return;
                }

                var targetUser = userResult.Data;

                // Admin can only delete Player/Viewer, not other Admins
                if (targetUser.Role == "Admin")
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå Admin kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n Admin kh√°c!", true, 3000);
                    return;
                }

                Console.WriteLine($"\nTh√¥ng tin ng∆∞·ªùi d√πng s·∫Ω b·ªã x√≥a:");
                Console.WriteLine($"Username: {targetUser.Username}");
                Console.WriteLine($"Email: {targetUser.Email}");
                Console.WriteLine($"Role: {targetUser.Role}");

                Console.Write($"\nX√°c nh·∫≠n x√≥a user ID {userId}? (YES ƒë·ªÉ x√°c nh·∫≠n): ");
                string confirmation = Console.ReadLine() ?? "";

                if (confirmation.ToUpper() == "YES")
                {
                    var result = await _userService.DeleteUserAsync(userId);
                    if (result)
                    {
                        ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng user ID: {userId}", false, 3000);
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("‚ùå X√≥a th·∫•t b·∫°i", true, 3000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a", false, 2000);
                }
            }
            else
            {
                ConsoleRenderingService.ShowMessageBox("ID kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    /// G√°n th√†nh t√≠ch cho ng∆∞·ªùi ch∆°i
    public async Task AssignAchievementsAsync()
    {
        try
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("G√ÅN TH√ÄNH T√çCH", 80, 20);

            // Get all players
            var playersResult = await _userService.GetUsersByRoleAsync("Player");
            if (!playersResult.IsSuccess || playersResult.Data == null || !playersResult.Data.Any())
            {
                int centerX = (Console.WindowWidth - 30) / 2;
                int centerY = Console.WindowHeight / 2;
                Console.SetCursorPosition(centerX, centerY);
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Kh√¥ng c√≥ Player n√†o trong h·ªá th·ªëng.");
                Console.ResetColor();
                Console.SetCursorPosition(centerX - 10, centerY + 2);
                Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
                return;
            }

            // Display players list
            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 20) / 4;

            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
            Console.WriteLine("üë§ Danh s√°ch Players:");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
            Console.WriteLine(new string('‚îÄ', 70));

            int currentRow = borderTop + 4;
            var players = playersResult.Data.ToList();

            for (int i = 0; i < players.Count && i < 8; i++)
            {
                var player = players[i];
                Console.SetCursorPosition(borderLeft + 2, currentRow + i);
                Console.WriteLine($"{i + 1}. ID: {player.Id} | {player.Username} | {player.FullName ?? "N/A"}");
            }

            Console.SetCursorPosition(borderLeft + 2, currentRow + Math.Min(players.Count, 8) + 1);
            Console.Write("Ch·ªçn Player (nh·∫≠p s·ªë th·ª© t·ª±, 0 ƒë·ªÉ tho√°t): ");

            if (int.TryParse(Console.ReadLine(), out int selection) && selection > 0 && selection <= players.Count)
            {
                var selectedPlayer = players[selection - 1];

                Console.SetCursorPosition(borderLeft + 2, currentRow + Math.Min(players.Count, 8) + 3);
                Console.WriteLine($"ƒê√£ ch·ªçn Player: {selectedPlayer.Username}");

                // Get available achievements from service
                var availableAchievements = await _achievementService.GetAvailableAchievementsAsync();

                Console.SetCursorPosition(borderLeft + 2, currentRow + Math.Min(players.Count, 8) + 5);
                Console.WriteLine("üèÜ Ch·ªçn lo·∫°i th√†nh t√≠ch:");

                for (int i = 0; i < availableAchievements.Count && i < 10; i++)
                {
                    Console.SetCursorPosition(borderLeft + 4, currentRow + Math.Min(players.Count, 8) + 6 + i);
                    Console.WriteLine($"{i + 1}. {availableAchievements[i]}");
                }

                Console.SetCursorPosition(borderLeft + 2, currentRow + Math.Min(players.Count, 8) + 17);
                Console.Write($"Ch·ªçn th√†nh t√≠ch (1-{availableAchievements.Count}): ");

                if (int.TryParse(Console.ReadLine(), out int achievementChoice) && achievementChoice > 0 && achievementChoice <= availableAchievements.Count)
                {
                    var selectedAchievement = availableAchievements[achievementChoice - 1];

                    Console.SetCursorPosition(borderLeft + 2, currentRow + Math.Min(players.Count, 8) + 16);
                    Console.Write("Nh·∫≠p m√¥ t·∫£ th√†nh t√≠ch: ");
                    var description = Console.ReadLine() ?? "";

                    Console.SetCursorPosition(borderLeft + 2, currentRow + Math.Min(players.Count, 8) + 17);
                    Console.Write($"X√°c nh·∫≠n g√°n th√†nh t√≠ch '{selectedAchievement}' cho {selectedPlayer.Username}? (y/n): ");

                    var confirmation = Console.ReadLine()?.ToLower();
                    if (confirmation == "y" || confirmation == "yes")
                    {
                        // Use IAchievementService to assign achievement
                        var success = await _achievementService.AssignAchievementToPlayerAsync(selectedPlayer.Id, selectedAchievement, description);
                        
                        if (success)
                        {
                            ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ g√°n th√†nh t√≠ch '{selectedAchievement}' cho {selectedPlayer.Username}!\nüìù M√¥ t·∫£: {description}", false, 3000);

                            // Log the action
                            Console.WriteLine($"\nüìä Achievement Assignment:");
                            Console.WriteLine($"   Player ID: {selectedPlayer.Id}");
                            Console.WriteLine($"   Achievement: {selectedAchievement}");
                            Console.WriteLine($"   Description: {description}");
                            Console.WriteLine($"   Assigned by: Admin");
                            Console.WriteLine($"   Date: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                        }
                        else
                        {
                            ConsoleRenderingService.ShowMessageBox("‚ùå L·ªói khi g√°n th√†nh t√≠ch! Vui l√≤ng th·ª≠ l·∫°i.", true, 2000);
                        }
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy thao t√°c", false, 1000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå L·ª±a ch·ªçn th√†nh t√≠ch kh√¥ng h·ª£p l·ªá!", true, 2000);
                }
            }
            else if (selection != 0)
            {
                ConsoleRenderingService.ShowMessageBox("‚ùå L·ª±a ch·ªçn Player kh√¥ng h·ª£p l·ªá!", true, 2000);
            }
        }
        catch (Exception ex)
        {
            ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
        }
    }

    private void DisplayUsersTable(IEnumerable<UserDto> users)
    {
        var header = string.Format("{0,-5} {1,-20} {2,-30} {3,-10} {4,-10}",
            "ID", "Username", "Email", "Role", "Status");
        Console.WriteLine("\n" + header);
        Console.WriteLine(new string('‚îÄ', 75));

        foreach (var user in users)
        {
            var row = string.Format("{0,-5} {1,-20} {2,-30} {3,-10} {4,-10}",
                user.Id,
                user.Username,
                user.Email ?? "",
                user.Role,
                user.Status);
            Console.WriteLine(row);
        }
    }

    private IEnumerable<UserDto> FilterUsers(IEnumerable<UserDto> users, string searchTerm)
    {
        return users.Where(u =>
            u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.FullName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
        );
    }

    private void DisplayUsersTableInBorder(IEnumerable<UserDto> users, int startX, int startY, int maxWidth)
    {
        // Header
        Console.SetCursorPosition(startX, startY);
        var header = string.Format("{0,-5} {1,-15} {2,-25} {3,-10} {4,-10}",
            "ID", "Username", "Email", "Role", "Status");
        Console.ForegroundColor = ConsoleColor.White;
        Console.WriteLine(header);

        // Separator line
        Console.SetCursorPosition(startX, startY + 1);
        Console.WriteLine(new string('‚îÄ', Math.Min(70, maxWidth - 4)));

        // Data rows
        int currentRow = startY + 2;
        int maxRows = 12; // Gi·ªõi h·∫°n s·ªë d√≤ng hi·ªÉn th·ªã ƒë·ªÉ v·ª´a trong border
        int displayedRows = 0;

        foreach (var user in users)
        {
            if (displayedRows >= maxRows) break;

            Console.SetCursorPosition(startX, currentRow);
            var row = string.Format("{0,-5} {1,-15} {2,-25} {3,-10} {4,-10}",
                user.Id,
                user.Username.Length > 14 ? user.Username.Substring(0, 14) : user.Username,
                (user.Email?.Length > 24 ? user.Email.Substring(0, 24) : user.Email) ?? "N/A",
                user.Role,
                user.Status);

            Console.ForegroundColor = user.Status == "Active" ? ConsoleColor.Green : ConsoleColor.Red;
            Console.WriteLine(row);

            currentRow++;
            displayedRows++;
        }

        // N·∫øu c√≥ nhi·ªÅu d·ªØ li·ªáu h∆°n, hi·ªÉn th·ªã th√¥ng b√°o
        if (users.Count() > maxRows)
        {
            Console.SetCursorPosition(startX, currentRow + 1);
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($"... v√† {users.Count() - maxRows} ng∆∞·ªùi d√πng kh√°c");
        }

        Console.ResetColor();
    }
}
