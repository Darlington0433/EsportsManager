using System;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.MenuHandlers;
using EsportsManager.UI.Utilities;

namespace EsportsManager.UI.Controllers.Player.Handlers
{
    /// <summary>
    /// Handler cho vi·ªác g·ª≠i feedback gi·∫£i ƒë·∫•u
    /// √Åp d·ª•ng Single Responsibility Principle
    /// </summary>
    public class PlayerFeedbackHandler : IPlayerFeedbackHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly ITournamentService _tournamentService;

        public PlayerFeedbackHandler(
            UserProfileDto currentUser,
            ITournamentService tournamentService)
        {
            _currentUser = currentUser;
            _tournamentService = tournamentService;
        }

        public async Task HandleSubmitFeedbackAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("G·ª¨I FEEDBACK GI·∫¢I ƒê·∫§U", 80, 15);

                Console.WriteLine("üìù LO·∫†I FEEDBACK:");
                Console.WriteLine("1. B√°o c√°o l·ªói k·ªπ thu·∫≠t");
                Console.WriteLine("2. G√≥p √Ω c·∫£i thi·ªán");
                Console.WriteLine("3. Khi·∫øu n·∫°i v·ªÅ k·∫øt qu·∫£");

                Console.Write("\nCh·ªçn lo·∫°i feedback (1-3): ");
                if (int.TryParse(Console.ReadLine(), out int type) && type >= 1 && type <= 3)
                {
                    Console.Write("Ti√™u ƒë·ªÅ feedback: ");
                    string title = Console.ReadLine() ?? "";

                    Console.Write("N·ªôi dung chi ti·∫øt: ");
                    string content = Console.ReadLine() ?? "";

                    if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(content))
                    {
                        var feedbackDto = new FeedbackDto
                        {
                            UserId = _currentUser.Id,
                            Content = content,
                            CreatedAt = DateTime.Now
                        };

                        // Simulated feedback submission for now
                        await Task.Delay(1000);
                        bool success = true; // Mock success

                        if (success)
                        {
                            ConsoleRenderingService.ShowMessageBox("‚úÖ Feedback ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!", true, 2000);
                        }
                        else
                        {
                            ConsoleRenderingService.ShowMessageBox("‚ùå G·ª≠i feedback th·∫•t b·∫°i!", false, 2000);
                        }
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", false, 2000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", false, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói h·ªá th·ªëng: {ex.Message}", false, 2000);
            }
        }
    }
}
