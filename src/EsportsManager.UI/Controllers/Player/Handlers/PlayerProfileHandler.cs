using System;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.Controllers.Player.Handlers
{
    /// <summary>
    /// Handler cho qu·∫£n l√Ω th√¥ng tin c√° nh√¢n c·ªßa player
    /// Single Responsibility: Ch·ªâ lo vi·ªác xem/c·∫≠p nh·∫≠t profile
    /// </summary>
    public class PlayerProfileHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly IUserService _userService;

        public PlayerProfileHandler(
            UserProfileDto currentUser,
            IUserService userService)
        {
            _currentUser = currentUser ?? throw new ArgumentNullException(nameof(currentUser));
            _userService = userService ?? throw new ArgumentNullException(nameof(userService));
        }

        public async Task HandleViewPersonalInfoAsync()
        {
            try
            {
                var userInfo = await GetPersonalInfoAsync();

                if (userInfo == null)
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√° nh√¢n!", true, 2000);
                    return;
                }

                Console.Clear();
                ConsoleRenderingService.DrawBorder("TH√îNG TIN C√Å NH√ÇN", 80, 15);

                Console.WriteLine($"üë§ ID: {userInfo.Id}");
                Console.WriteLine($"üìß Username: {userInfo.Username}");
                Console.WriteLine($"‚úâÔ∏è Email: {userInfo.Email ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
                Console.WriteLine($"üé≠ Role: {userInfo.Role}");
                Console.WriteLine($"üìÖ Ng√†y t·∫°o: {userInfo.CreatedAt:dd/MM/yyyy HH:mm}");
                Console.WriteLine($"üïê L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi: {userInfo.LastLoginAt?.ToString("dd/MM/yyyy HH:mm") ?? "Ch∆∞a c√≥"}");

                ConsoleRenderingService.PauseWithMessage();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
            }
        }

        public async Task HandleUpdatePersonalInfoAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("C·∫¨P NH·∫¨T TH√îNG TIN C√Å NH√ÇN", 80, 15);

                var currentInfo = await GetPersonalInfoAsync();
                if (currentInfo == null)
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin hi·ªán t·∫°i!", true, 2000);
                    return;
                }

                Console.WriteLine("Th√¥ng tin hi·ªán t·∫°i:");
                Console.WriteLine($"Email: {currentInfo.Email ?? "Ch∆∞a c√≥"}");
                Console.WriteLine($"H·ªç t√™n: {currentInfo.FullName ?? "Ch∆∞a c√≥"}");
                Console.WriteLine();

                Console.Write("Email m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
                string newEmail = Console.ReadLine()?.Trim();

                Console.Write("H·ªç t√™n m·ªõi (Enter ƒë·ªÉ b·ªè qua): ");
                string newFullName = Console.ReadLine()?.Trim();

                if (!string.IsNullOrEmpty(newEmail) || !string.IsNullOrEmpty(newFullName))
                {
                    var updateDto = new UpdateUserDto
                    {
                        Email = !string.IsNullOrEmpty(newEmail) ? newEmail : currentInfo?.Email,
                        FullName = !string.IsNullOrEmpty(newFullName) ? newFullName : currentInfo?.FullName
                    };

                    bool success = await UpdatePersonalInfoAsync(updateDto);

                    if (success)
                    {
                        ConsoleRenderingService.ShowMessageBox("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", false, 3000);
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("C·∫≠p nh·∫≠t th·∫•t b·∫°i!", true, 2000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c thay ƒë·ªïi!", false, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
            }
        }

        private async Task<UserDto?> GetPersonalInfoAsync()
        {
            var result = await _userService.GetUserByIdAsync(_currentUser.Id);
            return result.IsSuccess ? result.Data : null;
        }

        private async Task<bool> UpdatePersonalInfoAsync(UpdateUserDto updateDto)
        {
            // Convert UpdateUserDto to UserDto for the service call
            var userDto = new UserDto
            {
                Id = _currentUser.Id,
                Username = _currentUser.Username,
                Email = updateDto.Email ?? _currentUser.Email,
                FullName = updateDto.FullName,
                Role = _currentUser.Role
            };

            var result = await _userService.UpdateUserProfileAsync(_currentUser.Id, userDto);
            return result.IsSuccess;
        }
    }
}
