using System;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.Controllers.Player.Handlers
{
    /// <summary>
    /// Handler cho qu·∫£n l√Ω team c·ªßa player
    /// Single Responsibility: Ch·ªâ lo vi·ªác qu·∫£n l√Ω team
    /// </summary>
    public class PlayerTeamManagementHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly ITeamService _teamService;

        public PlayerTeamManagementHandler(
            UserProfileDto currentUser,
            ITeamService teamService)
        {
            _currentUser = currentUser ?? throw new ArgumentNullException(nameof(currentUser));
            _teamService = teamService ?? throw new ArgumentNullException(nameof(teamService));
        }

        public async Task HandleTeamManagementAsync()
        {
            try
            {
                var myTeam = await _teamService.GetPlayerTeamAsync(_currentUser.Id);

                if (myTeam == null)
                {
                    // Player ch∆∞a c√≥ team - hi·ªÉn th·ªã option t·∫°o team
                    await CreateTeamInteractiveAsync();
                }
                else
                {
                    // Player ƒë√£ c√≥ team - hi·ªÉn th·ªã th√¥ng tin team
                    ShowTeamInfo(myTeam);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
            }
        }

        private async Task CreateTeamInteractiveAsync()
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("T·∫†O TEAM M·ªöI", 80, 12);

            Console.Write("T√™n team: ");
            string teamName = Console.ReadLine() ?? "";

            Console.Write("M√¥ t·∫£ team: ");
            string description = Console.ReadLine() ?? "";

            if (string.IsNullOrWhiteSpace(teamName))
            {
                ConsoleRenderingService.ShowMessageBox("T√™n team kh√¥ng ƒë∆∞·ª£c r·ªóng!", true, 2000);
                return;
            }

            try
            {
                var teamDto = new TeamCreateDto
                {
                    Name = teamName,
                    Description = description
                };

                var team = await _teamService.CreateTeamAsync(teamDto, _currentUser.Id);

                if (team != null)
                {
                    ConsoleRenderingService.ShowMessageBox($"T·∫°o team '{teamName}' th√†nh c√¥ng!", false, 3000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("T·∫°o team th·∫•t b·∫°i!", true, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"L·ªói: {ex.Message}", true, 3000);
            }
        }

        private void ShowTeamInfo(TeamInfoDto team)
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder($"TEAM: {team.Name}", 100, 20);
            Console.WriteLine($"üìù M√¥ t·∫£: {team.Description}");
            Console.WriteLine($"üìÖ Ng√†y t·∫°o: {team.CreatedAt:dd/MM/yyyy}");
            Console.WriteLine($"üë• S·ªë th√†nh vi√™n: {team.MemberCount}/{team.MaxMembers}");

            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey(true);
        }
    }
}
