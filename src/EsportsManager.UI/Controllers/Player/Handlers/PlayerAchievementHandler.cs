using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.MenuHandlers;

namespace EsportsManager.UI.Controllers.Player.Handlers
{
    /// <summary>
    /// Handler cho vi·ªác xem th√†nh t√≠ch c√° nh√¢n
    /// √Åp d·ª•ng Single Responsibility Principle
    /// </summary>
    public class PlayerAchievementHandler : IPlayerAchievementHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly ITournamentService _tournamentService;
        private readonly IUserService _userService;

        public PlayerAchievementHandler(
            UserProfileDto currentUser,
            ITournamentService tournamentService,
            IUserService userService)
        {
            _currentUser = currentUser;
            _tournamentService = tournamentService;
            _userService = userService;
        }

        public async Task HandleViewAchievementsAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("TH√ÄNH T√çCH C√Å NH√ÇN", 80, 20);

                await DisplayPlayerStatsAsync();
                await DisplayTournamentHistoryAsync();
                await DisplayAwardsAndRankingsAsync();

                Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói h·ªá th·ªëng: {ex.Message}", false, 2000);
            }
        }

        private async Task DisplayPlayerStatsAsync()
        {
            try
            {
                Console.WriteLine("üìä TH·ªêNG K√ä T·ªîNG QUAN");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                // Mock player stats for demonstration
                await Task.Delay(100); // Small delay to make it async
                
                Console.WriteLine($"üèÜ T·ªïng s·ªë gi·∫£i ƒë·∫•u tham gia: 12");
                Console.WriteLine($"ü•á S·ªë gi·∫£i ƒë·∫ßu ƒë√£ th·∫Øng: 3");
                Console.WriteLine($"ü•à S·ªë l·∫ßn v√†o chung k·∫øt: 5");
                Console.WriteLine($"ü•â S·ªë l·∫ßn v√†o b√°n k·∫øt: 8");
                Console.WriteLine($"üí∞ T·ªïng ti·ªÅn th∆∞·ªüng ƒë√£ nh·∫≠n: 2,500,000 VND");
                Console.WriteLine($"üìà ƒêi·ªÉm s·ªë trung b√¨nh: 8.5");
                Console.WriteLine($"‚≠ê X·∫øp h·∫°ng hi·ªán t·∫°i: #15 to√†n qu·ªëc");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi t·∫£i th·ªëng k√™: {ex.Message}");
            }
        }

        private async Task DisplayTournamentHistoryAsync()
        {
            try
            {
                Console.WriteLine("\nüèÖ L·ªäCH S·ª¨ GI·∫¢I ƒê·∫§U");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                var tournaments = await _tournamentService.GetAllTournamentsAsync();
                
                if (tournaments.Count > 0)
                {
                    Console.WriteLine("T√™n gi·∫£i ƒë·∫•u                | K·∫øt qu·∫£      | V·ªã tr√≠ | Ti·ªÅn th∆∞·ªüng");
                    Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                    // Mock tournament history
                    var mockHistory = new[]
                    {
                        ("LOL Championship 2024", "V√¥ ƒë·ªãch", "#1", "1,000,000 VND"),
                        ("CS:GO Masters", "√Å qu√¢n", "#2", "500,000 VND"),
                        ("PUBG Mobile Cup", "B√°n k·∫øt", "#4", "200,000 VND"),
                        ("FIFA Online League", "V√≤ng lo·∫°i", "#8", "-")
                    };

                    foreach (var (name, result, position, prize) in mockHistory)
                    {
                        Console.WriteLine($"{name,-25} | {result,-10} | {position,-6} | {prize}");
                    }
                }
                else
                {
                    Console.WriteLine("üìù Ch∆∞a tham gia gi·∫£i ƒë·∫•u n√†o");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi t·∫£i l·ªãch s·ª≠ gi·∫£i ƒë·∫•u: {ex.Message}");
            }
        }

        private async Task DisplayAwardsAndRankingsAsync()
        {
            try
            {
                Console.WriteLine("\nüèÜ DANH HI·ªÜU V√Ä TH√ÄNH T√çCH");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                // Mock achievements
                await Task.Delay(100); // Small delay to make it async
                
                var mockAchievements = new[]
                {
                    ("V√¥ ƒë·ªãch m√πa ƒë·∫ßu", "15/06/2024", "Gi√†nh chi·∫øn th·∫Øng gi·∫£i ƒë·∫•u ƒë·∫ßu ti√™n"),
                    ("Top Player", "20/07/2024", "V√†o top 10 b·∫£ng x·∫øp h·∫°ng"),
                    ("Chi·∫øn binh b·∫•t b·∫°i", "05/08/2024", "Th·∫Øng 10 tr·∫≠n li√™n ti·∫øp")
                };

                Console.WriteLine("Danh hi·ªáu                   | Ng√†y ƒë·∫°t ƒë∆∞·ª£c | M√¥ t·∫£");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                foreach (var (title, date, description) in mockAchievements)
                {
                    Console.WriteLine($"{title,-25} | {date} | {description}");
                }

                // Hi·ªÉn th·ªã ƒëi·ªÉm n·ªïi b·∫≠t
                Console.WriteLine("\nüåü ƒêI·ªÇM N·ªîI B·∫¨T");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                var highlights = new[]
                {
                    "ƒê√£ gi√†nh chi·∫øn th·∫Øng trong 3 gi·∫£i ƒë·∫•u",
                    "Tham gia h∆°n 10 gi·∫£i ƒë·∫•u - Player t√≠ch c·ª±c",
                    "Ki·∫øm ƒë∆∞·ª£c h∆°n 2 tri·ªáu VND ti·ªÅn th∆∞·ªüng",
                    "ƒêi·ªÉm s·ªë trung b√¨nh cao (>= 8.0)",
                    "Top 15 trong b·∫£ng x·∫øp h·∫°ng to√†n qu·ªëc"
                };

                foreach (var highlight in highlights)
                {
                    Console.WriteLine($"‚Ä¢ {highlight}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi t·∫£i th√†nh t√≠ch: {ex.Message}");
            }
        }
    }
}
