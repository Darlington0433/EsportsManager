using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.MenuHandlers;

namespace EsportsManager.UI.Controllers.Player.Handlers
{
    /// <summary>
    /// Handler cho vi·ªác xem th√†nh t√≠ch c√° nh√¢n
    /// √Åp d·ª•ng Single Responsibility Principle
    /// </summary>
    public class PlayerAchievementHandler : IPlayerAchievementHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly ITournamentService _tournamentService;
        private readonly IUserService _userService;
        private readonly IAchievementService _achievementService;

        public PlayerAchievementHandler(
            UserProfileDto currentUser,
            ITournamentService tournamentService,
            IUserService userService,
            IAchievementService achievementService)
        {
            _currentUser = currentUser;
            _tournamentService = tournamentService;
            _userService = userService;
            _achievementService = achievementService;
        }

        public async Task HandleViewAchievementsAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("TH√ÄNH T√çCH C√Å NH√ÇN", 80, 20);
                int borderLeft = (Console.WindowWidth - 80) / 2;
                int borderTop = (Console.WindowHeight - 20) / 4;
                int cursorY = borderTop + 2;

                cursorY = await DisplayPlayerStatsAsync(borderLeft, cursorY);
                cursorY = await DisplayTournamentHistoryAsync(borderLeft, cursorY);
                cursorY = await DisplayAwardsAndRankingsAsync(borderLeft, cursorY);

                // ƒê·∫£m b·∫£o m·ªçi output ƒë·ªÅu n·∫±m trong border, k·ªÉ c·∫£ prompt cu·ªëi c√πng
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.SetCursorPosition(borderLeft + 2, borderTop + 18);
                Console.Write("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ResetColor();
                Console.SetCursorPosition(borderLeft + 28, borderTop + 18); // ƒê·∫∑t con tr·ªè h·ª£p l√Ω ƒë·ªÉ nh·∫≠p
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                int borderLeft = (Console.WindowWidth - 80) / 2;
                int borderTop = (Console.WindowHeight - 20) / 4;
                Console.SetCursorPosition(borderLeft + 2, borderTop + 18);
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói h·ªá th·ªëng: {ex.Message}", false, 2000);
            }
        }
        private async Task<int> DisplayPlayerStatsAsync(int borderLeft, int cursorY)
        {
            try
            {
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("üìä TH·ªêNG K√ä T·ªîNG QUAN");
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                // L·∫•y th·ªëng k√™ ng∆∞·ªùi ch∆°i t·ª´ IAchievementService
                var playerStats = await _achievementService.GetPlayerStatsAsync(_currentUser.Id);

                if (playerStats != null)
                {
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine($"üèÜ T·ªïng s·ªë gi·∫£i ƒë·∫•u tham gia: {playerStats.TotalTournaments}");
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine($"ü•á S·ªë gi·∫£i ƒë·∫•u ƒë√£ th·∫Øng: {playerStats.TournamentsWon}");
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine($"ü•à S·ªë l·∫ßn v√†o chung k·∫øt: {playerStats.FinalsAppearances}");
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine($"ü•â S·ªë l·∫ßn v√†o b√°n k·∫øt: {playerStats.SemiFinalsAppearances}");
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine($"üí∞ T·ªïng ti·ªÅn th∆∞·ªüng ƒë√£ nh·∫≠n: {playerStats.TotalPrizeMoney:N0} VND");
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine($"üìà ƒêi·ªÉm s·ªë trung b√¨nh: {playerStats.AverageRating:F1}");
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine($"‚≠ê X·∫øp h·∫°ng hi·ªán t·∫°i: #{playerStats.CurrentRanking} to√†n qu·ªëc");
                }
                else
                {
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine("‚ùå Kh√¥ng th·ªÉ t·∫£i th√¥ng tin th·ªëng k√™.");
                }
            }
            catch (Exception ex)
            {
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi t·∫£i th·ªëng k√™: {ex.Message}");
            }
            return cursorY;
        }
        private async Task<int> DisplayTournamentHistoryAsync(int borderLeft, int cursorY)
        {
            try
            {
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("\nüèÖ L·ªäCH S·ª¨ GI·∫¢I ƒê·∫§U");
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                // L·∫•y l·ªãch s·ª≠ gi·∫£i ƒë·∫•u t·ª´ IAchievementService
                var tournamentHistory = await _achievementService.GetPlayerTournamentHistoryAsync(_currentUser.Id);

                if (tournamentHistory != null && tournamentHistory.Count > 0)
                {
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine("T√™n gi·∫£i ƒë·∫•u                | K·∫øt qu·∫£      | V·ªã tr√≠ | Ti·ªÅn th∆∞·ªüng");
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                    foreach (var tournament in tournamentHistory)
                    {
                        string position = $"#{tournament.Position}";
                        string prize = tournament.PrizeMoney > 0 ? $"{tournament.PrizeMoney:N0} VND" : "-";
                        Console.SetCursorPosition(borderLeft + 2, cursorY++);
                        Console.WriteLine($"{tournament.TournamentName,-25} | {tournament.Result,-10} | {position,-6} | {prize}");
                    }
                }
                else
                {
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine("üìù Ch∆∞a tham gia gi·∫£i ƒë·∫•u n√†o");
                }
            }
            catch (Exception ex)
            {
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi t·∫£i l·ªãch s·ª≠ gi·∫£i ƒë·∫•u: {ex.Message}");
            }
            return cursorY;
        }
        private async Task<int> DisplayAwardsAndRankingsAsync(int borderLeft, int cursorY)
        {
            try
            {
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("\nüèÜ DANH HI·ªÜU V√Ä TH√ÄNH T√çCH");
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                // L·∫•y danh s√°ch th√†nh t√≠ch t·ª´ IAchievementService
                var achievements = await _achievementService.GetPlayerAchievementsAsync(_currentUser.Id);

                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("Danh hi·ªáu                   | Ng√†y ƒë·∫°t ƒë∆∞·ª£c | M√¥ t·∫£");
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                if (achievements != null && achievements.Count > 0)
                {
                    foreach (var achievement in achievements)
                    {
                        Console.SetCursorPosition(borderLeft + 2, cursorY++);
                        Console.WriteLine($"{achievement.Title,-25} | {achievement.DateAchieved:dd/MM/yyyy} | {achievement.Description}");
                    }
                }
                else
                {
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine("Ch∆∞a c√≥ th√†nh t√≠ch n√†o.");
                }

                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("\nüåü ƒêI·ªÇM N·ªîI B·∫¨T");
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                var highlights = await _achievementService.GetPlayerHighlightsAsync(_currentUser.Id);

                if (highlights != null && highlights.Count > 0)
                {
                    foreach (var highlight in highlights)
                    {
                        Console.SetCursorPosition(borderLeft + 2, cursorY++);
                        Console.WriteLine($"‚Ä¢ {highlight}");
                    }
                }
                else
                {
                    Console.SetCursorPosition(borderLeft + 2, cursorY++);
                    Console.WriteLine("‚Ä¢ Ch∆∞a c√≥ ƒëi·ªÉm n·ªïi b·∫≠t n√†o.");
                }
            }
            catch (Exception ex)
            {
                Console.SetCursorPosition(borderLeft + 2, cursorY++);
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi t·∫£i th√†nh t√≠ch: {ex.Message}");
            }
            return cursorY;
        }
    }
}
