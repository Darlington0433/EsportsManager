using System;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.MenuHandlers;

namespace EsportsManager.UI.Controllers.Player.Handlers
{
    /// <summary>
    /// Handler cho vi·ªác qu·∫£n l√Ω v√≠ ƒëi·ªán t·ª≠
    /// √Åp d·ª•ng Single Responsibility Principle
    /// </summary>
    public class PlayerWalletHandler : IPlayerWalletHandler
    {
        private readonly UserProfileDto _currentUser;

        public PlayerWalletHandler(UserProfileDto currentUser)
        {
            _currentUser = currentUser;
        }

        public async Task HandleWalletManagementAsync()
        {
            while (true)
            {
                try
                {
                    Console.Clear();
                    ConsoleRenderingService.DrawBorder("QU·∫¢N L√ù V√ç ƒêI·ªÜN T·ª¨", 80, 15);

                    // T√≠nh v·ªã tr√≠ ƒë·ªÉ hi·ªÉn th·ªã data b√™n trong border
                    int borderLeft = (Console.WindowWidth - 80) / 2;
                    int borderTop = (Console.WindowHeight - 15) / 4;
                    
                    // Mock wallet balance for demonstration
                    decimal mockBalance = 250000;
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
                    Console.WriteLine($"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {mockBalance:N0} VND");

                    var walletOptions = new[]
                    {
                        "Xem l·ªãch s·ª≠ giao d·ªãch",
                        "N·∫°p ti·ªÅn v√†o v√≠ (Mock)",
                        "Donation cho streamer (Mock)",
                        "Quay l·∫°i menu ch√≠nh"
                    };

                    int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù V√ç", walletOptions);

                    switch (selection)
                    {
                        case 0:
                            await HandleTransactionHistoryAsync();
                            break;
                        case 1:
                            await HandleDepositAsync();
                            break;
                        case 2:
                            await HandleDonationAsync();
                            break;
                        case 3:
                        case -1:
                            return;
                    }
                }
                catch (Exception ex)
                {
                    ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói h·ªá th·ªëng: {ex.Message}", false, 2000);
                }
            }
        }

        private async Task HandleDepositAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("N·∫†P TI·ªÄN V√ÄO V√ç", 80, 10);

                Console.WriteLine("üí≥ Nh·∫≠p s·ªë ti·ªÅn mu·ªën n·∫°p:");
                Console.WriteLine("S·ªë ti·ªÅn t·ªëi thi·ªÉu: 10,000 VND");
                Console.WriteLine("S·ªë ti·ªÅn t·ªëi ƒëa: 10,000,000 VND");
                Console.Write("S·ªë ti·ªÅn: ");

                if (!decimal.TryParse(Console.ReadLine(), out decimal amount))
                {
                    ConsoleRenderingService.ShowMessageBox("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", false, 1500);
                    return;
                }

                if (amount < 10000 || amount > 10000000)
                {
                    ConsoleRenderingService.ShowMessageBox("S·ªë ti·ªÅn n·∫°p ph·∫£i t·ª´ 10,000 ƒë·∫øn 10,000,000 VND!", false, 2000);
                    return;
                }

                Console.WriteLine($"\nüí∞ X√°c nh·∫≠n n·∫°p {amount:N0} VND v√†o v√≠?");
                Console.Write("Nh·∫≠p 'YES' ƒë·ªÉ x√°c nh·∫≠n: ");
                
                if (Console.ReadLine()?.ToUpper() == "YES")
                {
                    await Task.Delay(1000); // Simulate processing
                    
                    ConsoleRenderingService.ShowMessageBox($"‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng! ƒê√£ n·∫°p {amount:N0} VND", true, 2500);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task HandleTransactionHistoryAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("L·ªäCH S·ª¨ GIAO D·ªäCH", 80, 15);

                // Mock transaction history
                var mockTransactions = new[]
                {
                    "15/06/2024 09:30 - N·∫°p ti·ªÅn: +100,000 VND",
                    "12/06/2024 14:15 - Ph√≠ gi·∫£i ƒë·∫•u: -30,000 VND",
                    "10/06/2024 11:20 - Donation: -25,000 VND",
                    "08/06/2024 16:45 - N·∫°p ti·ªÅn: +200,000 VND",
                    "05/06/2024 13:30 - Ph√≠ gi·∫£i ƒë·∫•u: -50,000 VND"
                };

                Console.WriteLine("üìä L·ªãch s·ª≠ giao d·ªãch g·∫ßn ƒë√¢y:");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));
                Console.WriteLine("Th·ªùi gian           | Lo·∫°i giao d·ªãch    | S·ªë ti·ªÅn        | M√¥ t·∫£");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                foreach (var transaction in mockTransactions)
                {
                    Console.WriteLine(transaction);
                }

                Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
                await Task.Delay(100); // Small delay to make it async
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task HandleDonationAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("DONATION CHO STREAMER", 80, 12);

                // Mock streamers list
                var mockStreamers = new[] { "Streamer1", "Streamer2", "Streamer3" };

                Console.WriteLine("üéÆ Ch·ªçn streamer ƒë·ªÉ donation:");
                for (int i = 0; i < mockStreamers.Length; i++)
                {
                    Console.WriteLine($"{i + 1}. {mockStreamers[i]}");
                }

                Console.Write($"\nNh·∫≠p s·ªë th·ª© t·ª± streamer (1-{mockStreamers.Length}): ");
                if (!int.TryParse(Console.ReadLine(), out int choice) || 
                    choice < 1 || choice > mockStreamers.Length)
                {
                    ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", false, 1500);
                    return;
                }

                var selectedStreamer = mockStreamers[choice - 1];

                Console.Write("Nh·∫≠p s·ªë ti·ªÅn donation (t·ªëi thi·ªÉu 1,000 VND): ");
                if (!decimal.TryParse(Console.ReadLine(), out decimal amount) || amount < 1000)
                {
                    ConsoleRenderingService.ShowMessageBox("S·ªë ti·ªÅn donation kh√¥ng h·ª£p l·ªá (t·ªëi thi·ªÉu 1,000 VND)!", false, 2000);
                    return;
                }

                Console.Write("Nh·∫≠p l·ªùi nh·∫Øn (t√πy ch·ªçn): ");
                string message = Console.ReadLine() ?? "";

                await Task.Delay(1000); // Simulate processing
                
                ConsoleRenderingService.ShowMessageBox($"‚úÖ Donation th√†nh c√¥ng! ƒê√£ g·ª≠i {amount:N0} VND cho {selectedStreamer}", true, 2500);
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }
    }
}
