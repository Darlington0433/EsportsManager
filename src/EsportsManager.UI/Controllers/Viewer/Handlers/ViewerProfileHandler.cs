using System;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.MenuHandlers;

namespace EsportsManager.UI.Controllers.Viewer.Handlers
{
    /// <summary>
    /// Handler cho qu·∫£n l√Ω th√¥ng tin c√° nh√¢n c·ªßa Viewer
    /// √Åp d·ª•ng Single Responsibility Principle
    /// </summary>
    public class ViewerProfileHandler : IViewerProfileHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly IUserService _userService;

        public ViewerProfileHandler(
            UserProfileDto currentUser,
            IUserService userService)
        {
            _currentUser = currentUser;
            _userService = userService;
        }

        public async Task HandleViewProfileAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("TH√îNG TIN C√Å NH√ÇN", 80, 15);

                var userInfo = await _userService.GetUserByIdAsync(_currentUser.Id);

                int borderLeft = (Console.WindowWidth - 80) / 2;
                int borderTop = (Console.WindowHeight - 15) / 4;

                if (userInfo.IsSuccess && userInfo.Data != null)
                {
                    var user = userInfo.Data;
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
                    Console.WriteLine($"üë§ T√™n ƒëƒÉng nh·∫≠p: {user?.Username ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
                    Console.WriteLine($"üìß Email: {user?.Email ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
                    Console.WriteLine($"üë® H·ªç t√™n: {user?.FullName ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
                    Console.WriteLine($"üì± S·ªë ƒëi·ªán tho·∫°i: {user?.PhoneNumber ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
                    Console.WriteLine($"üé≠ Vai tr√≤: {user?.Role ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 7);
                    Console.WriteLine($"üìÖ Ng√†y t·∫°o t√†i kho·∫£n: {(user?.CreatedAt != null ? user.CreatedAt.ToString("dd/MM/yyyy HH:mm") : "Ch∆∞a c√≥")}");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 8);
                    Console.WriteLine($"üïê L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi: {(user?.LastLoginAt != null ? user.LastLoginAt.Value.ToString("dd/MM/yyyy HH:mm") : "Ch∆∞a c√≥")}");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 9);
                    Console.WriteLine($"‚≠ê Tr·∫°ng th√°i: {user?.Status ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
                }
                else
                {
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng!");
                    Console.ResetColor();
                }

                Console.SetCursorPosition(borderLeft + 2, borderTop + 12);
                Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", true, 2000);
            }
        }

        public async Task HandleUpdateProfileAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("C·∫¨P NH·∫¨T TH√îNG TIN C√Å NH√ÇN", 80, 15);

                // L·∫•y th√¥ng tin hi·ªán t·∫°i
                var currentInfo = await _userService.GetUserByIdAsync(_currentUser.Id);
                int borderLeft = (Console.WindowWidth - 80) / 2;
                int borderTop = (Console.WindowHeight - 15) / 4;
                if (!currentInfo.IsSuccess || currentInfo.Data == null)
                {
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin hi·ªán t·∫°i!");
                    Console.ResetColor();
                    return;
                }

                var user = currentInfo.Data;
                Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
                Console.WriteLine("Th√¥ng tin hi·ªán t·∫°i:");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
                Console.WriteLine($"üìß Email: {user?.Email ?? "Ch∆∞a c√≥"}");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
                Console.WriteLine($"üë® H·ªç t√™n: {user?.FullName ?? "Ch∆∞a c√≥"}");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
                Console.WriteLine($"üì± S·ªë ƒëi·ªán tho·∫°i: {user?.PhoneNumber ?? "Ch∆∞a c√≥"}");

                Console.SetCursorPosition(borderLeft + 2, borderTop + 7);
                Console.WriteLine("Nh·∫≠p th√¥ng tin m·ªõi (Enter ƒë·ªÉ b·ªè qua):");

                Console.SetCursorPosition(borderLeft + 2, borderTop + 8);
                Console.Write("Email m·ªõi: ");
                string? newEmail = Console.ReadLine()?.Trim();

                Console.SetCursorPosition(borderLeft + 2, borderTop + 9);
                Console.Write("H·ªç t√™n m·ªõi: ");
                string? newFullName = Console.ReadLine()?.Trim();

                Console.SetCursorPosition(borderLeft + 2, borderTop + 10);
                Console.Write("S·ªë ƒëi·ªán tho·∫°i m·ªõi: ");
                string? newPhoneNumber = Console.ReadLine()?.Trim();

                // Ki·ªÉm tra xem c√≥ th√¥ng tin n√†o thay ƒë·ªïi kh√¥ng
                if (string.IsNullOrEmpty(newEmail) && string.IsNullOrEmpty(newFullName) && string.IsNullOrEmpty(newPhoneNumber))
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c thay ƒë·ªïi!", false, 2000);
                    return;
                }

                // T·∫°o DTO ƒë·ªÉ c·∫≠p nh·∫≠t
                var userDto = new UserDto
                {
                    Id = _currentUser.Id,
                    Username = _currentUser.Username,
                    Email = !string.IsNullOrEmpty(newEmail) ? newEmail : user?.Email,
                    FullName = !string.IsNullOrEmpty(newFullName) ? newFullName : user?.FullName,
                    Role = _currentUser.Role,
                    PhoneNumber = !string.IsNullOrEmpty(newPhoneNumber) ? newPhoneNumber : user?.PhoneNumber
                };

                var result = await _userService.UpdateUserProfileAsync(_currentUser.Id, userDto);

                if (result.IsSuccess)
                {
                    ConsoleRenderingService.ShowMessageBox("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", true, 2500);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox($"‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i: {result.Message}", false, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        public async Task HandleForgotPasswordAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("ƒê·ªîI M·∫¨T KH·∫®U", 80, 15);

                int borderLeft = (Console.WindowWidth - 80) / 2;
                int borderTop = (Console.WindowHeight - 15) / 4;

                Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
                Console.WriteLine("üîê Thay ƒë·ªïi m·∫≠t kh·∫©u");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
                Console.WriteLine("‚îÄ".PadRight(50, '‚îÄ'));

                Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
                Console.Write("M·∫≠t kh·∫©u hi·ªán t·∫°i: ");
                string currentPassword = ReadPassword();

                Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
                Console.Write("M·∫≠t kh·∫©u m·ªõi: ");
                string newPassword = ReadPassword();

                if (string.IsNullOrEmpty(newPassword) || newPassword.Length < 6)
                {
                    ConsoleRenderingService.ShowMessageBox("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!", false, 2000);
                    return;
                }

                Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
                Console.Write("X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi: ");
                string confirmPassword = ReadPassword();

                if (newPassword != confirmPassword)
                {
                    ConsoleRenderingService.ShowMessageBox("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!", false, 2000);
                    return;
                }

                var passwordDto = new UpdatePasswordDto
                {
                    UserId = _currentUser.Id,
                    CurrentPassword = currentPassword,
                    NewPassword = newPassword
                };

                var result = await _userService.UpdatePasswordAsync(_currentUser.Id, passwordDto);

                if (result.IsSuccess)
                {
                    ConsoleRenderingService.ShowMessageBox("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", true, 2500);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox($"‚ùå ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i: {result.Message}", false, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private string ReadPassword()
        {
            string password = "";
            ConsoleKeyInfo keyInfo;

            do
            {
                keyInfo = Console.ReadKey(true);
                if (keyInfo.Key == ConsoleKey.Backspace && password.Length > 0)
                {
                    password = password[0..^1];
                    Console.Write("\b \b");
                }
                else if (!char.IsControl(keyInfo.KeyChar))
                {
                    password += keyInfo.KeyChar;
                    Console.Write("*");
                }
            } while (keyInfo.Key != ConsoleKey.Enter);

            Console.WriteLine();
            return password;
        }

        public void ShowSimpleInfo(UserDto user)
        {
            Console.Clear();
            ConsoleRenderingService.DrawBorder("TH√îNG TIN NG∆Ø·ªúI D√ôNG", 80, 15);
            int borderLeft = (Console.WindowWidth - 80) / 2;
            int borderTop = (Console.WindowHeight - 15) / 4;
            Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
            Console.WriteLine($"üë§ T√™n ƒëƒÉng nh·∫≠p: {user?.Username ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
            Console.WriteLine($"üìß Email: {user?.Email ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
            Console.WriteLine($"üë® H·ªç t√™n: {user?.FullName ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
            Console.WriteLine($"üì± S·ªë ƒëi·ªán tho·∫°i: {user?.PhoneNumber ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
            Console.WriteLine($"üé≠ Vai tr√≤: {user?.Role ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 7);
            Console.WriteLine($"üìÖ Ng√†y t·∫°o t√†i kho·∫£n: {(user?.CreatedAt != null ? user.CreatedAt.ToString("dd/MM/yyyy HH:mm") : "Ch∆∞a c√≥")}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 8);
            Console.WriteLine($"üïê L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi: {(user?.LastLoginAt != null ? user.LastLoginAt.Value.ToString("dd/MM/yyyy HH:mm") : "Ch∆∞a c√≥")}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 9);
            Console.WriteLine($"‚≠ê Tr·∫°ng th√°i: {user?.Status ?? "Ch∆∞a c·∫≠p nh·∫≠t"}");
            Console.SetCursorPosition(borderLeft + 2, borderTop + 12);
            Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
            Console.ReadKey(true);
        }
    }
}
