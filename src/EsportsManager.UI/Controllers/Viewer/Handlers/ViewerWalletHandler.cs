using System;
using System.Linq;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.BL.Services;
using EsportsManager.BL.Constants;
using EsportsManager.UI.ConsoleUI.Utilities;

namespace EsportsManager.UI.Controllers.Viewer.Handlers
{
    /// <summary>
    /// Handler cho vi·ªác qu·∫£n l√Ω v√≠ ƒëi·ªán t·ª≠ c·ªßa Viewer
    /// √Åp d·ª•ng Single Responsibility Principle - Focus on Top-up v√† Payment Management
    /// </summary>
    public class ViewerWalletHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly IWalletService _walletService;
        private readonly WalletValidationService _validationService;

        public ViewerWalletHandler(UserProfileDto currentUser, IWalletService walletService)
        {
            _currentUser = currentUser ?? throw new ArgumentNullException(nameof(currentUser));
            _walletService = walletService ?? throw new ArgumentNullException(nameof(walletService));
            _validationService = new WalletValidationService();
        }

        public async Task HandleWalletManagementAsync()
        {
            while (true)
            {
                try
                {
                    Console.Clear();
                    ConsoleRenderingService.DrawBorder("QU·∫¢N L√ù V√ç ƒêI·ªÜN T·ª¨", 80, 20);

                    // Get current wallet balance
                    var wallet = await _walletService.GetWalletByUserIdAsync(_currentUser.Id);
                    
                    int borderLeft = (Console.WindowWidth - 80) / 2;
                    int borderTop = (Console.WindowHeight - 20) / 4;

                    Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
                    Console.WriteLine($"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {wallet?.Balance ?? 0:N0} VND");
                    Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
                    Console.WriteLine($"üë§ T√†i kho·∫£n: {_currentUser.Username}");

                    var walletOptions = new[]
                    {
                        "N·∫°p ti·ªÅn v√†o v√≠",
                        "Xem l·ªãch s·ª≠ giao d·ªãch", 
                        "Qu·∫£n l√Ω th√¥ng tin thanh to√°n",
                        "Xem th√¥ng tin v√≠ chi ti·∫øt",
                        "‚¨ÖÔ∏è Quay l·∫°i"
                    };

                    int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù V√ç", walletOptions);

                    switch (selection)
                    {
                        case 0:
                            await HandleTopUpAsync();
                            break;
                        case 1:
                            await HandleTransactionHistoryAsync();
                            break;
                        case 2:
                            await HandlePaymentInfoManagementAsync();
                            break;
                        case 3:
                            await HandleViewWalletDetailsAsync();
                            break;
                        case 4:
                        case -1:
                            return;
                    }
                }
                catch (Exception ex)
                {
                    ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói h·ªá th·ªëng: {ex.Message}", true, 2000);
                }
            }
        }

        private async Task HandleTopUpAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("N·∫†P TI·ªÄN V√ÄO V√ç", 80, 18);

                var wallet = await _walletService.GetWalletByUserIdAsync(_currentUser.Id);
                Console.WriteLine($"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {wallet?.Balance ?? 0:N0} VND");
                Console.WriteLine();

                Console.WriteLine("üí≥ Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:");
                var paymentMethods = new[]
                {
                    "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
                    "Th·∫ª t√≠n d·ª•ng/ghi n·ª£",
                    "V√≠ ƒëi·ªán t·ª≠ (MoMo/ZaloPay)",
                    "‚¨ÖÔ∏è H·ªßy"
                };

                int methodSelection = InteractiveMenuService.DisplayInteractiveMenu("PH∆Ø∆†NG TH·ª®C THANH TO√ÅN", paymentMethods);

                if (methodSelection == -1 || methodSelection == 3) return;

                string[] methodNames = { "BankTransfer", "CreditCard", "EWallet" };
                string selectedMethod = methodNames[methodSelection];

                Console.WriteLine($"\nüìã Nh·∫≠p th√¥ng tin n·∫°p ti·ªÅn:");
                Console.WriteLine($"S·ªë ti·ªÅn t·ªëi thi·ªÉu: {WalletConstants.MIN_TOP_UP_AMOUNT:N0} VND");
                Console.WriteLine($"S·ªë ti·ªÅn t·ªëi ƒëa: {WalletConstants.MAX_TOP_UP_AMOUNT:N0} VND");
                Console.Write("S·ªë ti·ªÅn n·∫°p: ");

                if (!decimal.TryParse(Console.ReadLine(), out decimal amount))
                {
                    ConsoleRenderingService.ShowMessageBox("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", true, 1500);
                    return;
                }

                // Use validation service from BL layer
                var validationResult = _validationService.ValidateTopUpRequest(amount);
                if (!validationResult.IsValid)
                {
                    ConsoleRenderingService.ShowMessageBox(validationResult.ErrorMessage, true, 2000);
                    return;
                }

                // Handle specific payment method input
                string paymentDetails = await GetPaymentDetailsAsync(selectedMethod, amount);
                if (string.IsNullOrEmpty(paymentDetails)) return;

                Console.WriteLine($"\nüí∞ X√°c nh·∫≠n n·∫°p {amount:N0} VND?");
                Console.WriteLine($"üí≥ Ph∆∞∆°ng th·ª©c: {GetMethodDisplayName(selectedMethod)}");
                Console.WriteLine($"üíµ Ph√≠ giao d·ªãch: {amount * 0.005m:N0} VND (0.5%)");
                Console.WriteLine($"üí∏ T·ªïng thanh to√°n: {amount * 1.005m:N0} VND");
                Console.Write("X√°c nh·∫≠n (y/n): ");

                var confirmation = Console.ReadLine()?.ToLower();
                if (confirmation == "y" || confirmation == "yes")
                {
                    var depositDto = new DepositDto
                    {
                        Amount = amount,
                        PaymentMethod = selectedMethod,
                        ReferenceCode = GenerateReferenceCode(),
                        Note = $"Top-up via {selectedMethod} - {paymentDetails}"
                    };

                    var result = await _walletService.DepositAsync(_currentUser.Id, depositDto);
                    if (result.Success)
                    {
                        ConsoleRenderingService.ShowMessageBox($"‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng! S·ªë d∆∞ m·ªõi: {result.NewBalance:N0} VND", false, 3000);
                        ConsoleRenderingService.ShowMessageBox($"üìÑ M√£ giao d·ªãch: {depositDto.ReferenceCode}", false, 2000);
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox($"‚ùå N·∫°p ti·ªÅn th·∫•t b·∫°i: {result.Message}", true, 2000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy giao d·ªãch", false, 1500);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", true, 3000);
            }
        }

        private async Task<string> GetPaymentDetailsAsync(string method, decimal amount)
        {
            try
            {
                switch (method)
                {
                    case "BankTransfer":
                        Console.WriteLine("\nüè¶ Th√¥ng tin chuy·ªÉn kho·∫£n:");
                        Console.WriteLine("üìã Ng√¢n h√†ng: Vietcombank");
                        Console.WriteLine("üìã S·ªë t√†i kho·∫£n: 1234567890");
                        Console.WriteLine("üìã T√™n t√†i kho·∫£n: ESPORTS MANAGER SYSTEM");
                        Console.WriteLine($"üìã S·ªë ti·ªÅn: {amount * 1.005m:N0} VND");
                        Console.WriteLine("üìã N·ªôi dung: NAP TIEN [Username]");
                        Console.WriteLine();
                        Console.Write("Nh·∫≠p m√£ OTP t·ª´ ng√¢n h√†ng: ");
                        var otp = Console.ReadLine();
                        return string.IsNullOrEmpty(otp) ? "" : $"OTP: {otp}";

                    case "CreditCard":
                        Console.Write("\nNh·∫≠p s·ªë th·∫ª (16 s·ªë): ");
                        var cardNumber = Console.ReadLine();
                        Console.Write("Nh·∫≠p t√™n ch·ªß th·∫ª: ");
                        var cardHolder = Console.ReadLine();
                        Console.Write("Nh·∫≠p MM/YY: ");
                        var expiry = Console.ReadLine();
                        Console.Write("Nh·∫≠p CVV: ");
                        var cvv = Console.ReadLine();
                        
                        if (string.IsNullOrEmpty(cardNumber) || string.IsNullOrEmpty(cardHolder) || 
                            string.IsNullOrEmpty(expiry) || string.IsNullOrEmpty(cvv))
                        {
                            ConsoleRenderingService.ShowMessageBox("Th√¥ng tin th·∫ª kh√¥ng ƒë·∫ßy ƒë·ªß!", true, 2000);
                            return "";
                        }
                        return $"Card: ****{cardNumber?.Substring(cardNumber.Length - 4)}";

                    case "EWallet":
                        Console.WriteLine("\nüì± Ch·ªçn v√≠ ƒëi·ªán t·ª≠:");
                        var ewallets = new[] { "MoMo", "ZaloPay", "ViettelPay", "H·ªßy" };
                        int ewalletChoice = InteractiveMenuService.DisplayInteractiveMenu("V√ç ƒêI·ªÜN T·ª¨", ewallets);
                        
                        if (ewalletChoice == -1 || ewalletChoice == 3) return "";
                        
                        Console.Write($"\nNh·∫≠p s·ªë ƒëi·ªán tho·∫°i {ewallets[ewalletChoice]}: ");
                        var phone = Console.ReadLine();
                        return string.IsNullOrEmpty(phone) ? "" : $"{ewallets[ewalletChoice]}: {phone}";

                    default:
                        return "";
                }
            }
            catch (Exception)
            {
                return "";
            }
        }

        private async Task HandleTransactionHistoryAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("L·ªäCH S·ª¨ GIAO D·ªäCH", 100, 20);

                var transactions = await _walletService.GetTransactionHistoryAsync(_currentUser.Id);
                if (transactions == null || !transactions.Any())
                {
                    ConsoleRenderingService.ShowNotification("Ch∆∞a c√≥ giao d·ªãch n√†o", ConsoleColor.Yellow);
                    Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                    Console.ReadLine();
                    return;
                }

                int borderLeft = (Console.WindowWidth - 100) / 2;
                int borderTop = (Console.WindowHeight - 20) / 4;

                Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
                Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine($"{"Ng√†y",-12} {"Lo·∫°i",-15} {"S·ªë ti·ªÅn",-15} {"Tr·∫°ng th√°i",-12} {"Ghi ch√∫",-30}");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
                Console.WriteLine(new string('‚îÄ', 90));

                int currentRow = borderTop + 4;
                foreach (var transaction in transactions.Take(12))
                {
                    Console.SetCursorPosition(borderLeft + 2, currentRow);
                    Console.ForegroundColor = transaction.TransactionType == "Deposit" ? ConsoleColor.Green : ConsoleColor.Yellow;
                    
                    var row = string.Format("{0,-12} {1,-15} {2,-15} {3,-12} {4,-30}",
                        transaction.CreatedAt.ToString("dd/MM/yyyy"),
                        transaction.TransactionType,
                        $"{transaction.Amount:N0} VND",
                        transaction.Status,
                        transaction.Note?.Length > 29 ? transaction.Note.Substring(0, 29) : transaction.Note ?? "");
                    Console.WriteLine(row);
                    currentRow++;
                }

                Console.ResetColor();
                Console.SetCursorPosition(borderLeft + 2, borderTop + 17);
                Console.WriteLine($"T·ªïng c·ªông: {transactions.Count()} giao d·ªãch");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 18);
                Console.WriteLine("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", true, 3000);
            }
        }

        private async Task HandlePaymentInfoManagementAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("QU·∫¢N L√ù TH√îNG TIN THANH TO√ÅN", 80, 15);

                var paymentOptions = new[]
                {
                    "Th√™m ph∆∞∆°ng th·ª©c thanh to√°n",
                    "Xem danh s√°ch ph∆∞∆°ng th·ª©c",
                    "C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n", 
                    "X√≥a ph∆∞∆°ng th·ª©c thanh to√°n",
                    "‚¨ÖÔ∏è Quay l·∫°i"
                };

                int selection = InteractiveMenuService.DisplayInteractiveMenu("QU·∫¢N L√ù THANH TO√ÅN", paymentOptions);

                switch (selection)
                {
                    case 0:
                        await AddPaymentMethodAsync();
                        break;
                    case 1:
                        await ViewPaymentMethodsAsync();
                        break;
                    case 2:
                        await UpdatePaymentMethodAsync();
                        break;
                    case 3:
                        await DeletePaymentMethodAsync();
                        break;
                    case 4:
                    case -1:
                        return;
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", true, 3000);
            }
        }

        private async Task HandleViewWalletDetailsAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("TH√îNG TIN V√ç CHI TI·∫æT", 80, 15);

                var wallet = await _walletService.GetWalletByUserIdAsync(_currentUser.Id);
                if (wallet == null)
                {
                    ConsoleRenderingService.ShowNotification("Ch∆∞a c√≥ v√≠ ƒëi·ªán t·ª≠", ConsoleColor.Yellow);
                    return;
                }

                int borderLeft = (Console.WindowWidth - 80) / 2;
                int borderTop = (Console.WindowHeight - 15) / 4;

                Console.SetCursorPosition(borderLeft + 2, borderTop + 2);
                Console.WriteLine($"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {wallet.Balance:N0} VND");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 3);
                Console.WriteLine($"üìà T·ªïng ƒë√£ n·∫°p: {wallet.TotalReceived:N0} VND");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 4);
                Console.WriteLine($"üìâ T·ªïng ƒë√£ chi: {wallet.TotalWithdrawn:N0} VND");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 5);
                Console.WriteLine($"üìÖ Ng√†y t·∫°o: {wallet.CreatedAt:dd/MM/yyyy HH:mm}");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 6);
                Console.WriteLine($"üîÑ C·∫≠p nh·∫≠t cu·ªëi: {wallet.LastUpdatedAt?.ToString("dd/MM/yyyy HH:mm") ?? "Ch∆∞a c√≥"}");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 7);
                Console.WriteLine($"üîí Tr·∫°ng th√°i: {(wallet.IsLocked ? "üîí Kh√≥a" : "‚úÖ Ho·∫°t ƒë·ªông")}");

                Console.SetCursorPosition(borderLeft + 2, borderTop + 9);
                Console.WriteLine("üìã L∆∞u √Ω v·ªÅ v√≠:");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 10);
                Console.WriteLine("‚Ä¢ D√πng ƒë·ªÉ donate cho player y√™u th√≠ch");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 11);
                Console.WriteLine("‚Ä¢ Ph√≠ n·∫°p ti·ªÅn: 0.5% tr√™n t·ªïng s·ªë ti·ªÅn");
                Console.SetCursorPosition(borderLeft + 2, borderTop + 12);
                Console.WriteLine("‚Ä¢ B·∫£o m·∫≠t cao v·ªõi m√£ h√≥a AES-256");

                Console.SetCursorPosition(borderLeft + 2, borderTop + 13);
                Console.WriteLine("Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadKey(true);
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", true, 3000);
            }
        }

        // Helper methods for payment management
        private async Task AddPaymentMethodAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("TH√äM PH∆Ø∆†NG TH·ª®C THANH TO√ÅN", 80, 20);

                var methodTypes = new[]
                {
                    "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
                    "Th·∫ª t√≠n d·ª•ng/ghi n·ª£", 
                    "V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay, etc.)"
                };

                int typeSelection = InteractiveMenuService.DisplayInteractiveMenu("CH·ªåN LO·∫†I THANH TO√ÅN", methodTypes);
                if (typeSelection == -1) return;

                string methodType = typeSelection switch
                {
                    0 => "BankTransfer",
                    1 => "CreditCard", 
                    2 => "EWallet",
                    _ => "BankTransfer"
                };

                Console.WriteLine($"\nÔøΩ Th√™m {GetMethodDisplayName(methodType)}:");
                
                string name, details;
                switch (methodType)
                {
                    case "BankTransfer":
                        Console.Write("T√™n ng√¢n h√†ng: ");
                        name = Console.ReadLine()?.Trim() ?? "";
                        Console.Write("S·ªë t√†i kho·∫£n: ");
                        details = Console.ReadLine()?.Trim() ?? "";
                        break;
                    case "CreditCard":
                        Console.Write("T√™n ch·ªß th·∫ª: ");
                        name = Console.ReadLine()?.Trim() ?? "";
                        Console.Write("S·ªë th·∫ª (4 s·ªë cu·ªëi): ");
                        var cardNumber = Console.ReadLine()?.Trim() ?? "";
                        details = $"****-****-****-{cardNumber}";
                        break;
                    case "EWallet":
                        Console.Write("T√™n v√≠ ƒëi·ªán t·ª≠: ");
                        name = Console.ReadLine()?.Trim() ?? "";
                        Console.Write("S·ªë ƒëi·ªán tho·∫°i/Email: ");
                        details = Console.ReadLine()?.Trim() ?? "";
                        break;
                    default:
                        name = details = "";
                        break;
                }

                if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(details))
                {
                    // In real app, this would save to database
                    ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ th√™m {GetMethodDisplayName(methodType)}: {name}", true, 2000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß!", false, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task ViewPaymentMethodsAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("DANH S√ÅCH PH∆Ø∆†NG TH·ª®C THANH TO√ÅN", 80, 25);

                // Mock data - in real app, load from database
                var paymentMethods = new[]
                {
                    new { Type = "BankTransfer", Name = "Vietcombank", Details = "1234567890", IsDefault = true },
                    new { Type = "CreditCard", Name = "Visa Card", Details = "****-****-****-1234", IsDefault = false },
                    new { Type = "EWallet", Name = "MoMo", Details = "0901234567", IsDefault = false }
                };

                Console.WriteLine("ÔøΩ Danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n ƒë√£ l∆∞u:\n");

                for (int i = 0; i < paymentMethods.Length; i++)
                {
                    var method = paymentMethods[i];
                    string defaultMark = method.IsDefault ? " [M·∫∂C ƒê·ªäNH]" : "";
                    string typeDisplay = GetMethodDisplayName(method.Type);
                    
                    Console.WriteLine($"{i + 1}. {typeDisplay}{defaultMark}");
                    Console.WriteLine($"   üìÑ {method.Name}");
                    Console.WriteLine($"   üî¢ {method.Details}");
                    Console.WriteLine();
                }

                if (!paymentMethods.Any())
                {
                    Console.WriteLine("üîç Ch∆∞a c√≥ ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c l∆∞u.");
                }

                Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task UpdatePaymentMethodAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("C·∫¨P NH·∫¨T PH∆Ø∆†NG TH·ª®C THANH TO√ÅN", 80, 20);

                // Mock data - show available methods
                var methods = new[]
                {
                    "Vietcombank - 1234567890",
                    "Visa Card - ****1234",
                    "MoMo - 0901234567"
                };

                int selection = InteractiveMenuService.DisplayInteractiveMenu("CH·ªåN PH∆Ø∆†NG TH·ª®C C·∫¨P NH·∫¨T", methods);
                if (selection == -1) return;

                Console.WriteLine($"\nÔøΩ C·∫≠p nh·∫≠t: {methods[selection]}");
                Console.Write("T√™n m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi): ");
                var newName = Console.ReadLine()?.Trim();
                
                Console.Write("Th√¥ng tin m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi): ");
                var newDetails = Console.ReadLine()?.Trim();

                if (!string.IsNullOrEmpty(newName) || !string.IsNullOrEmpty(newDetails))
                {
                    ConsoleRenderingService.ShowMessageBox("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin thanh to√°n!", true, 2000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o.", false, 1500);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task DeletePaymentMethodAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("X√ìA PH∆Ø∆†NG TH·ª®C THANH TO√ÅN", 80, 20);

                // Mock data - show available methods
                var methods = new[]
                {
                    "Vietcombank - 1234567890",
                    "Visa Card - ****1234", 
                    "MoMo - 0901234567"
                };

                if (!methods.Any())
                {
                    ConsoleRenderingService.ShowMessageBox("ÔøΩ Kh√¥ng c√≥ ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë·ªÉ x√≥a.", false, 2000);
                    return;
                }

                int selection = InteractiveMenuService.DisplayInteractiveMenu("CH·ªåN PH∆Ø∆†NG TH·ª®C X√ìA", methods);
                if (selection == -1) return;

                Console.WriteLine($"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a: {methods[selection]}? (y/N)");
                var confirm = Console.ReadLine()?.Trim().ToLower();

                if (confirm == "y" || confirm == "yes")
                {
                    ConsoleRenderingService.ShowMessageBox("‚úÖ ƒê√£ x√≥a ph∆∞∆°ng th·ª©c thanh to√°n!", true, 2000);
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a.", false, 1500);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private string GetMethodDisplayName(string method)
        {
            return method switch
            {
                "BankTransfer" => "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
                "CreditCard" => "Th·∫ª t√≠n d·ª•ng/ghi n·ª£",
                "EWallet" => "V√≠ ƒëi·ªán t·ª≠",
                _ => method
            };
        }

        private string GenerateReferenceCode()
        {
            return $"TOP{DateTime.Now:yyyyMMddHHmmss}{new Random().Next(1000, 9999)}";
        }
    }
}
