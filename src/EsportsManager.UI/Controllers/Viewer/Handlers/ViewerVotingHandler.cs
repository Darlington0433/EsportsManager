using System;
using System.Threading.Tasks;
using EsportsManager.BL.DTOs;
using EsportsManager.BL.Interfaces;
using EsportsManager.UI.ConsoleUI.Utilities;
using EsportsManager.UI.Controllers.MenuHandlers;

namespace EsportsManager.UI.Controllers.Viewer.Handlers
{
    /// <summary>
    /// Handler cho ch·ª©c nƒÉng voting c·ªßa Viewer
    /// √Åp d·ª•ng Single Responsibility Principle
    /// </summary>
    public class ViewerVotingHandler : IViewerVotingHandler
    {
        private readonly UserProfileDto _currentUser;
        private readonly ITournamentService _tournamentService;
        private readonly IUserService _userService;
        private readonly IVotingService _votingService;

        public ViewerVotingHandler(
            UserProfileDto currentUser,
            ITournamentService tournamentService,
            IUserService userService,
            IVotingService votingService)
        {
            _currentUser = currentUser;
            _tournamentService = tournamentService;
            _userService = userService;
            _votingService = votingService;
        }

        public async Task HandleVoteForPlayerAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("VOTE CHO PLAYER Y√äU TH√çCH", 80, 15);                // S·ª≠ d·ª•ng HandlePlayerVotingAsync ƒë·ªÉ x·ª≠ l√Ω vi·ªác vote cho player
                await HandlePlayerVotingAsync();

                Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"L·ªói khi vote cho player: {ex.Message}", false, 3000);
            }
        }

        public async Task HandleVoteForTournamentAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("VOTE CHO GI·∫¢I ƒê·∫§U HAY NH·∫§T", 80, 15);                // S·ª≠ d·ª•ng HandleTournamentVotingAsync ƒë·ªÉ x·ª≠ l√Ω vi·ªác vote cho gi·∫£i ƒë·∫•u
                await HandleTournamentVotingAsync();

                Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"L·ªói khi vote cho gi·∫£i ƒë·∫•u: {ex.Message}", false, 3000);
            }
        }

        public async Task HandleVoteForSportAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("VOTE CHO M√îTHER SPORT ESPORTS", 80, 15);                // S·ª≠ d·ª•ng HandleEsportsVotingAsync ƒë·ªÉ x·ª≠ l√Ω vi·ªác vote cho m√¥n th·ªÉ thao
                await HandleEsportsVotingAsync();

                Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"L·ªói khi vote cho sport: {ex.Message}", false, 3000);
            }
        }

        // Keep the old method for backward compatibility during transition
        public async Task HandleVotingAsync()
        {
            while (true)
            {
                try
                {
                    Console.Clear();
                    ConsoleRenderingService.DrawBorder("VOTING", 80, 15);

                    var voteOptions = new[]
                    {
                        "Vote cho Player y√™u th√≠ch",
                        "Vote cho Gi·∫£i ƒë·∫•u hay nh·∫•t",
                        "Vote cho M√¥n th·ªÉ thao esports",
                        "Xem k·∫øt qu·∫£ voting",
                        "Quay l·∫°i menu ch√≠nh"
                    };

                    int selection = InteractiveMenuService.DisplayInteractiveMenu("CH·ªåN LO·∫†I VOTING", voteOptions);

                    switch (selection)
                    {
                        case 0:
                            await HandlePlayerVotingAsync();
                            break;
                        case 1:
                            await HandleTournamentVotingAsync();
                            break;
                        case 2:
                            await HandleEsportsVotingAsync();
                            break;
                        case 3:
                            await HandleViewVotingResults();
                            break;
                        case 4:
                        case -1:
                            return;
                        default:
                            Console.WriteLine("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
                }
            }
        }

        private async Task HandlePlayerVotingAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("VOTE CHO PLAYER Y√äU TH√çCH", 80, 15);

                // Get real player list from database
                var playerResult = await _userService.GetUsersByRoleAsync("Player");

                if (playerResult.IsSuccess && playerResult.Data != null && playerResult.Data.Any())
                {
                    var players = playerResult.Data.ToList();

                    Console.WriteLine("üë• Ch·ªçn player ƒë·ªÉ vote:");
                    for (int i = 0; i < players.Count; i++)
                    {
                        Console.WriteLine($"{i + 1}. {players[i].Username}");
                    }

                    Console.Write($"\nNh·∫≠p s·ªë th·ª© t·ª± player (1-{players.Count}): ");
                    if (int.TryParse(Console.ReadLine(), out int choice) &&
                        choice >= 1 && choice <= players.Count)
                    {
                        var selectedPlayer = players[choice - 1];

                        Console.WriteLine($"\nƒê√°nh gi√° cho {selectedPlayer.Username}:");
                        Console.WriteLine("1 - ‚≠ê | 2 - ‚≠ê‚≠ê | 3 - ‚≠ê‚≠ê‚≠ê | 4 - ‚≠ê‚≠ê‚≠ê‚≠ê | 5 - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
                        Console.Write("Ch·ªçn s·ªë ƒëi·ªÉm (1-5): ");

                        int rating = 5; // M·∫∑c ƒë·ªãnh ƒëi·ªÉm cao nh·∫•t
                        if (int.TryParse(Console.ReadLine(), out int ratingInput) &&
                            ratingInput >= 1 && ratingInput <= 5)
                        {
                            rating = ratingInput;
                        }

                        Console.Write("Nh·∫≠p nh·∫≠n x√©t (t√πy ch·ªçn): ");
                        string comment = Console.ReadLine() ?? string.Empty;

                        // Create voting object
                        var votingDto = new VotingDto
                        {
                            UserId = _currentUser.Id,
                            VoteType = "Player",
                            TargetId = selectedPlayer.Id,
                            TargetName = selectedPlayer.Username,
                            Rating = rating,
                            Comment = comment,
                            VoteDate = DateTime.Now
                        };

                        // S·ª≠ d·ª•ng IVotingService ƒë·ªÉ l∆∞u vote
                        try
                        {
                            var result = await _votingService.SubmitVoteAsync(votingDto);
                            if (result)
                            {
                                ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ vote cho {selectedPlayer.Username}!", true, 2000);
                            }
                            else
                            {
                                ConsoleRenderingService.ShowMessageBox($"‚ùå Kh√¥ng th·ªÉ vote cho player.", false, 2000);
                            }
                        }
                        catch (Exception ex)
                        {
                            ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói khi vote: {ex.Message}", false, 2000);
                        }
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", false, 1500);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng t√¨m th·∫•y Player n√†o trong h·ªá th·ªëng!", false, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task HandleTournamentVotingAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("VOTE CHO GI·∫¢I ƒê·∫§U HAY NH·∫§T", 80, 15);

                var tournaments = await _tournamentService.GetAllTournamentsAsync();

                if (tournaments.Count > 0)
                {
                    Console.WriteLine("üèÜ Ch·ªçn gi·∫£i ƒë·∫•u ƒë·ªÉ vote:");
                    for (int i = 0; i < tournaments.Count; i++)
                    {
                        Console.WriteLine($"{i + 1}. {tournaments[i].Name}");
                    }

                    Console.Write($"\nNh·∫≠p s·ªë th·ª© t·ª± gi·∫£i ƒë·∫•u (1-{tournaments.Count}): ");
                    if (int.TryParse(Console.ReadLine(), out int choice) &&
                        choice >= 1 && choice <= tournaments.Count)
                    {
                        var selectedTournament = tournaments[choice - 1];

                        Console.WriteLine($"\nƒê√°nh gi√° cho {selectedTournament.Name}:");
                        Console.WriteLine("1 - ‚≠ê | 2 - ‚≠ê‚≠ê | 3 - ‚≠ê‚≠ê‚≠ê | 4 - ‚≠ê‚≠ê‚≠ê‚≠ê | 5 - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
                        Console.Write("Ch·ªçn s·ªë ƒëi·ªÉm (1-5): ");

                        int rating = 5; // M·∫∑c ƒë·ªãnh ƒëi·ªÉm cao nh·∫•t
                        if (int.TryParse(Console.ReadLine(), out int ratingInput) &&
                            ratingInput >= 1 && ratingInput <= 5)
                        {
                            rating = ratingInput;
                        }

                        Console.Write("Nh·∫≠p nh·∫≠n x√©t (t√πy ch·ªçn): ");
                        string comment = Console.ReadLine() ?? string.Empty;

                        // T·∫°o voting DTO
                        var votingDto = new VotingDto
                        {
                            UserId = _currentUser.Id,
                            VoteType = "Tournament",
                            TargetId = selectedTournament.TournamentId,
                            TargetName = selectedTournament.Name,
                            Rating = rating,
                            Comment = comment,
                            VoteDate = DateTime.Now
                        };

                        var result = await _votingService.SubmitVoteAsync(votingDto);
                        if (result)
                        {
                            ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ vote cho {selectedTournament.Name}!", true, 2000);
                        }
                        else
                        {
                            ConsoleRenderingService.ShowMessageBox($"‚ùå Kh√¥ng th·ªÉ vote cho gi·∫£i ƒë·∫•u.", false, 2000);
                        }
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", false, 1500);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("Kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o ƒë·ªÉ vote!", false, 2000);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task HandleEsportsVotingAsync()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("VOTE CHO M√îN TH·ªÇ THAO ESPORTS", 80, 12);

                var esportsCategories = new[]
                {
                    "League of Legends",
                    "Counter-Strike: Global Offensive",
                    "Valorant",
                    "PUBG Mobile",
                    "FIFA Online 4",
                    "Mobile Legends: Bang Bang"
                };

                Console.WriteLine("üéÆ Ch·ªçn m√¥n th·ªÉ thao esports y√™u th√≠ch:");
                for (int i = 0; i < esportsCategories.Length; i++)
                {
                    Console.WriteLine($"{i + 1}. {esportsCategories[i]}");
                }

                Console.Write($"\nNh·∫≠p s·ªë th·ª© t·ª± (1-{esportsCategories.Length}): ");
                if (int.TryParse(Console.ReadLine(), out int choice) &&
                    choice >= 1 && choice <= esportsCategories.Length)
                {
                    var selectedCategory = esportsCategories[choice - 1];

                    Console.WriteLine($"\nƒê√°nh gi√° cho {selectedCategory}:");
                    Console.WriteLine("1 - ‚≠ê | 2 - ‚≠ê‚≠ê | 3 - ‚≠ê‚≠ê‚≠ê | 4 - ‚≠ê‚≠ê‚≠ê‚≠ê | 5 - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
                    Console.Write("Ch·ªçn s·ªë ƒëi·ªÉm (1-5): ");

                    int rating = 5; // M·∫∑c ƒë·ªãnh ƒëi·ªÉm cao nh·∫•t
                    if (int.TryParse(Console.ReadLine(), out int ratingInput) &&
                        ratingInput >= 1 && ratingInput <= 5)
                    {
                        rating = ratingInput;
                    }

                    Console.Write("Nh·∫≠p nh·∫≠n x√©t (t√πy ch·ªçn): ");
                    string comment = Console.ReadLine() ?? string.Empty;

                    var votingDto = new VotingDto
                    {
                        UserId = _currentUser.Id,
                        VoteType = "EsportsCategory",
                        TargetId = choice, // S·ª≠ d·ª•ng index l√†m ID t·∫°m th·ªùi
                        TargetName = selectedCategory,
                        Rating = rating,
                        Comment = comment,
                        VoteDate = DateTime.Now
                    };

                    var result = await _votingService.SubmitVoteAsync(votingDto);
                    if (result)
                    {
                        ConsoleRenderingService.ShowMessageBox($"‚úÖ ƒê√£ vote cho {selectedCategory}!", true, 2000);
                    }
                    else
                    {
                        ConsoleRenderingService.ShowMessageBox($"‚ùå Kh√¥ng th·ªÉ vote cho esports category.", false, 2000);
                    }
                }
                else
                {
                    ConsoleRenderingService.ShowMessageBox("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", false, 1500);
                }
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }

        private async Task HandleViewVotingResults()
        {
            try
            {
                Console.Clear();
                ConsoleRenderingService.DrawBorder("K·∫æT QU·∫¢ VOTING", 80, 20);

                Console.WriteLine("üìä K·∫æT QU·∫¢ VOTING T·ªîNG H·ª¢P");
                Console.WriteLine("‚îÄ".PadRight(78, '‚îÄ'));

                Console.WriteLine("\nüèÜ TOP 5 PLAYER Y√äU TH√çCH:");

                // Get actual voting results from service
                var playerResults = await _votingService.GetPlayerVotingResultsAsync(5);

                if (playerResults != null && playerResults.Count > 0)
                {
                    foreach (var result in playerResults)
                    {
                        Console.WriteLine($"  ‚Ä¢ {result.TargetName}: {result.TotalVotes} votes (‚≠ê {result.AverageRating:F1})");
                    }
                }
                else
                {
                    Console.WriteLine("  ‚Ä¢ Ch∆∞a c√≥ d·ªØ li·ªáu b√¨nh ch·ªçn");
                }

                Console.WriteLine("\nüéÆ TOP 5 GI·∫¢I ƒê·∫§U HAY NH·∫§T:");

                // Get tournament voting results
                var tournamentResults = await _votingService.GetTournamentVotingResultsAsync(5);

                if (tournamentResults != null && tournamentResults.Count > 0)
                {
                    foreach (var result in tournamentResults)
                    {
                        Console.WriteLine($"  ‚Ä¢ {result.TargetName}: {result.TotalVotes} votes (‚≠ê {result.AverageRating:F1})");
                    }
                }
                else
                {
                    Console.WriteLine("  ‚Ä¢ Ch∆∞a c√≥ d·ªØ li·ªáu b√¨nh ch·ªçn cho gi·∫£i ƒë·∫•u");
                }

                Console.WriteLine("\nüèÖ TOP 3 M√îN TH·ªÇ THAO ESPORTS:");

                // Get esports category voting results
                var categoryResults = await _votingService.GetEsportsCategoryVotingResultsAsync(3);

                if (categoryResults != null && categoryResults.Count > 0)
                {
                    foreach (var result in categoryResults)
                    {
                        Console.WriteLine($"  ‚Ä¢ {result.TargetName}: {result.TotalVotes} votes (‚≠ê {result.AverageRating:F1})");
                    }
                }
                else
                {
                    Console.WriteLine("  ‚Ä¢ Ch∆∞a c√≥ d·ªØ li·ªáu b√¨nh ch·ªçn cho m√¥n th·ªÉ thao esports");
                }

                Console.WriteLine("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                ConsoleRenderingService.ShowMessageBox($"‚ùå L·ªói: {ex.Message}", false, 2000);
            }
        }
    }
}
